/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientAuthorizationUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * A client ID.
   *
   * @remarks
   */
  clientId: string;
  clientAuthorizationUpdateRequest?:
    | models.ClientAuthorizationUpdateRequest
    | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiRequest$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  client_authorization_update_request: models
    .ClientAuthorizationUpdateRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "client_authorization_update_request": "clientAuthorizationUpdateRequest",
  });
});

/** @internal */
export type ClientAuthorizationUpdateApiRequest$Outbound = {
  serviceId: string;
  clientId: string;
  client_authorization_update_request?:
    | models.ClientAuthorizationUpdateRequest$Outbound
    | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateApiRequest$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  clientId: z.string(),
  clientAuthorizationUpdateRequest: models
    .ClientAuthorizationUpdateRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    clientAuthorizationUpdateRequest: "client_authorization_update_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateApiRequest$ {
  /** @deprecated use `ClientAuthorizationUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateApiRequest$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateApiRequest$Outbound;
}

export function clientAuthorizationUpdateApiRequestToJSON(
  clientAuthorizationUpdateApiRequest: ClientAuthorizationUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateApiRequest$outboundSchema.parse(
      clientAuthorizationUpdateApiRequest,
    ),
  );
}

export function clientAuthorizationUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationUpdateApiRequest' from JSON`,
  );
}
