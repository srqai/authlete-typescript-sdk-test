/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenRevokeApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  tokenRevokeRequest: models.TokenRevokeRequest;
};

/** @internal */
export const AuthTokenRevokeApiRequest$inboundSchema: z.ZodType<
  AuthTokenRevokeApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  token_revoke_request: models.TokenRevokeRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "token_revoke_request": "tokenRevokeRequest",
  });
});

/** @internal */
export type AuthTokenRevokeApiRequest$Outbound = {
  serviceId: string;
  token_revoke_request: models.TokenRevokeRequest$Outbound;
};

/** @internal */
export const AuthTokenRevokeApiRequest$outboundSchema: z.ZodType<
  AuthTokenRevokeApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenRevokeApiRequest
> = z.object({
  serviceId: z.string(),
  tokenRevokeRequest: models.TokenRevokeRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tokenRevokeRequest: "token_revoke_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenRevokeApiRequest$ {
  /** @deprecated use `AuthTokenRevokeApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenRevokeApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenRevokeApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenRevokeApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenRevokeApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenRevokeApiRequest$Outbound;
}

export function authTokenRevokeApiRequestToJSON(
  authTokenRevokeApiRequest: AuthTokenRevokeApiRequest,
): string {
  return JSON.stringify(
    AuthTokenRevokeApiRequest$outboundSchema.parse(authTokenRevokeApiRequest),
  );
}

export function authTokenRevokeApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenRevokeApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenRevokeApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenRevokeApiRequest' from JSON`,
  );
}
