/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type VciOfferInfoApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  vciOfferInfoRequest: models.VciOfferInfoRequest;
};

/** @internal */
export const VciOfferInfoApiRequest$inboundSchema: z.ZodType<
  VciOfferInfoApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  vci_offer_info_request: models.VciOfferInfoRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "vci_offer_info_request": "vciOfferInfoRequest",
  });
});

/** @internal */
export type VciOfferInfoApiRequest$Outbound = {
  serviceId: string;
  vci_offer_info_request: models.VciOfferInfoRequest$Outbound;
};

/** @internal */
export const VciOfferInfoApiRequest$outboundSchema: z.ZodType<
  VciOfferInfoApiRequest$Outbound,
  z.ZodTypeDef,
  VciOfferInfoApiRequest
> = z.object({
  serviceId: z.string(),
  vciOfferInfoRequest: models.VciOfferInfoRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    vciOfferInfoRequest: "vci_offer_info_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferInfoApiRequest$ {
  /** @deprecated use `VciOfferInfoApiRequest$inboundSchema` instead. */
  export const inboundSchema = VciOfferInfoApiRequest$inboundSchema;
  /** @deprecated use `VciOfferInfoApiRequest$outboundSchema` instead. */
  export const outboundSchema = VciOfferInfoApiRequest$outboundSchema;
  /** @deprecated use `VciOfferInfoApiRequest$Outbound` instead. */
  export type Outbound = VciOfferInfoApiRequest$Outbound;
}

export function vciOfferInfoApiRequestToJSON(
  vciOfferInfoApiRequest: VciOfferInfoApiRequest,
): string {
  return JSON.stringify(
    VciOfferInfoApiRequest$outboundSchema.parse(vciOfferInfoApiRequest),
  );
}

export function vciOfferInfoApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferInfoApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferInfoApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferInfoApiRequest' from JSON`,
  );
}
