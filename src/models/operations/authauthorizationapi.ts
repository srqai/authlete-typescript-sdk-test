/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthAuthorizationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  authorizationRequest: models.AuthorizationRequest;
};

/** @internal */
export const AuthAuthorizationApiRequest$inboundSchema: z.ZodType<
  AuthAuthorizationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  authorization_request: models.AuthorizationRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "authorization_request": "authorizationRequest",
  });
});

/** @internal */
export type AuthAuthorizationApiRequest$Outbound = {
  serviceId: string;
  authorization_request: models.AuthorizationRequest$Outbound;
};

/** @internal */
export const AuthAuthorizationApiRequest$outboundSchema: z.ZodType<
  AuthAuthorizationApiRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationApiRequest
> = z.object({
  serviceId: z.string(),
  authorizationRequest: models.AuthorizationRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    authorizationRequest: "authorization_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationApiRequest$ {
  /** @deprecated use `AuthAuthorizationApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationApiRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationApiRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationApiRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationApiRequest$Outbound;
}

export function authAuthorizationApiRequestToJSON(
  authAuthorizationApiRequest: AuthAuthorizationApiRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationApiRequest$outboundSchema.parse(
      authAuthorizationApiRequest,
    ),
  );
}

export function authAuthorizationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationApiRequest' from JSON`,
  );
}
