/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthIntrospectionStandardApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  standardIntrospectionRequest: models.StandardIntrospectionRequest;
};

/** @internal */
export const AuthIntrospectionStandardApiRequest$inboundSchema: z.ZodType<
  AuthIntrospectionStandardApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  standard_introspection_request:
    models.StandardIntrospectionRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "standard_introspection_request": "standardIntrospectionRequest",
  });
});

/** @internal */
export type AuthIntrospectionStandardApiRequest$Outbound = {
  serviceId: string;
  standard_introspection_request: models.StandardIntrospectionRequest$Outbound;
};

/** @internal */
export const AuthIntrospectionStandardApiRequest$outboundSchema: z.ZodType<
  AuthIntrospectionStandardApiRequest$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionStandardApiRequest
> = z.object({
  serviceId: z.string(),
  standardIntrospectionRequest:
    models.StandardIntrospectionRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    standardIntrospectionRequest: "standard_introspection_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionStandardApiRequest$ {
  /** @deprecated use `AuthIntrospectionStandardApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    AuthIntrospectionStandardApiRequest$inboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    AuthIntrospectionStandardApiRequest$outboundSchema;
  /** @deprecated use `AuthIntrospectionStandardApiRequest$Outbound` instead. */
  export type Outbound = AuthIntrospectionStandardApiRequest$Outbound;
}

export function authIntrospectionStandardApiRequestToJSON(
  authIntrospectionStandardApiRequest: AuthIntrospectionStandardApiRequest,
): string {
  return JSON.stringify(
    AuthIntrospectionStandardApiRequest$outboundSchema.parse(
      authIntrospectionStandardApiRequest,
    ),
  );
}

export function authIntrospectionStandardApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionStandardApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AuthIntrospectionStandardApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionStandardApiRequest' from JSON`,
  );
}
