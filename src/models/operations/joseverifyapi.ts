/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type JoseVerifyApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  joseVerifyRequest?: models.JoseVerifyRequest | undefined;
};

/** @internal */
export const JoseVerifyApiRequest$inboundSchema: z.ZodType<
  JoseVerifyApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  jose_verify_request: models.JoseVerifyRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "jose_verify_request": "joseVerifyRequest",
  });
});

/** @internal */
export type JoseVerifyApiRequest$Outbound = {
  serviceId: string;
  jose_verify_request?: models.JoseVerifyRequest$Outbound | undefined;
};

/** @internal */
export const JoseVerifyApiRequest$outboundSchema: z.ZodType<
  JoseVerifyApiRequest$Outbound,
  z.ZodTypeDef,
  JoseVerifyApiRequest
> = z.object({
  serviceId: z.string(),
  joseVerifyRequest: models.JoseVerifyRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    joseVerifyRequest: "jose_verify_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyApiRequest$ {
  /** @deprecated use `JoseVerifyApiRequest$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyApiRequest$inboundSchema;
  /** @deprecated use `JoseVerifyApiRequest$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyApiRequest$outboundSchema;
  /** @deprecated use `JoseVerifyApiRequest$Outbound` instead. */
  export type Outbound = JoseVerifyApiRequest$Outbound;
}

export function joseVerifyApiRequestToJSON(
  joseVerifyApiRequest: JoseVerifyApiRequest,
): string {
  return JSON.stringify(
    JoseVerifyApiRequest$outboundSchema.parse(joseVerifyApiRequest),
  );
}

export function joseVerifyApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyApiRequest' from JSON`,
  );
}
