/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type FederationRegistrationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  federationRegistrationRequest: models.FederationRegistrationRequest;
};

/** @internal */
export const FederationRegistrationApiRequest$inboundSchema: z.ZodType<
  FederationRegistrationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  federation_registration_request:
    models.FederationRegistrationRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "federation_registration_request": "federationRegistrationRequest",
  });
});

/** @internal */
export type FederationRegistrationApiRequest$Outbound = {
  serviceId: string;
  federation_registration_request:
    models.FederationRegistrationRequest$Outbound;
};

/** @internal */
export const FederationRegistrationApiRequest$outboundSchema: z.ZodType<
  FederationRegistrationApiRequest$Outbound,
  z.ZodTypeDef,
  FederationRegistrationApiRequest
> = z.object({
  serviceId: z.string(),
  federationRegistrationRequest:
    models.FederationRegistrationRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    federationRegistrationRequest: "federation_registration_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationApiRequest$ {
  /** @deprecated use `FederationRegistrationApiRequest$inboundSchema` instead. */
  export const inboundSchema = FederationRegistrationApiRequest$inboundSchema;
  /** @deprecated use `FederationRegistrationApiRequest$outboundSchema` instead. */
  export const outboundSchema = FederationRegistrationApiRequest$outboundSchema;
  /** @deprecated use `FederationRegistrationApiRequest$Outbound` instead. */
  export type Outbound = FederationRegistrationApiRequest$Outbound;
}

export function federationRegistrationApiRequestToJSON(
  federationRegistrationApiRequest: FederationRegistrationApiRequest,
): string {
  return JSON.stringify(
    FederationRegistrationApiRequest$outboundSchema.parse(
      federationRegistrationApiRequest,
    ),
  );
}

export function federationRegistrationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FederationRegistrationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationApiRequest' from JSON`,
  );
}
