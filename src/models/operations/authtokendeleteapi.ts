/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthTokenDeleteApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The identifier of an existing access token. The identifier is the value of the access token
   *
   * @remarks
   * or the value of the hash of the access token.
   */
  accessTokenIdentifier: string;
};

/** @internal */
export const AuthTokenDeleteApiRequest$inboundSchema: z.ZodType<
  AuthTokenDeleteApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  accessTokenIdentifier: z.string(),
});

/** @internal */
export type AuthTokenDeleteApiRequest$Outbound = {
  serviceId: string;
  accessTokenIdentifier: string;
};

/** @internal */
export const AuthTokenDeleteApiRequest$outboundSchema: z.ZodType<
  AuthTokenDeleteApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenDeleteApiRequest
> = z.object({
  serviceId: z.string(),
  accessTokenIdentifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenDeleteApiRequest$ {
  /** @deprecated use `AuthTokenDeleteApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenDeleteApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenDeleteApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenDeleteApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenDeleteApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenDeleteApiRequest$Outbound;
}

export function authTokenDeleteApiRequestToJSON(
  authTokenDeleteApiRequest: AuthTokenDeleteApiRequest,
): string {
  return JSON.stringify(
    AuthTokenDeleteApiRequest$outboundSchema.parse(authTokenDeleteApiRequest),
  );
}

export function authTokenDeleteApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenDeleteApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenDeleteApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenDeleteApiRequest' from JSON`,
  );
}
