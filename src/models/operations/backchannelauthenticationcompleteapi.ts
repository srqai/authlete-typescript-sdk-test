/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationCompleteApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  backchannelAuthenticationCompleteRequest:
    models.BackchannelAuthenticationCompleteRequest;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiRequest$inboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    serviceId: z.string(),
    backchannel_authentication_complete_request:
      models.BackchannelAuthenticationCompleteRequest$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "backchannel_authentication_complete_request":
        "backchannelAuthenticationCompleteRequest",
    });
  });

/** @internal */
export type BackchannelAuthenticationCompleteApiRequest$Outbound = {
  serviceId: string;
  backchannel_authentication_complete_request:
    models.BackchannelAuthenticationCompleteRequest$Outbound;
};

/** @internal */
export const BackchannelAuthenticationCompleteApiRequest$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteApiRequest$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteApiRequest
  > = z.object({
    serviceId: z.string(),
    backchannelAuthenticationCompleteRequest:
      models.BackchannelAuthenticationCompleteRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      backchannelAuthenticationCompleteRequest:
        "backchannel_authentication_complete_request",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationCompleteApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationCompleteApiRequest$Outbound;
}

export function backchannelAuthenticationCompleteApiRequestToJSON(
  backchannelAuthenticationCompleteApiRequest:
    BackchannelAuthenticationCompleteApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteApiRequest$outboundSchema.parse(
      backchannelAuthenticationCompleteApiRequest,
    ),
  );
}

export function backchannelAuthenticationCompleteApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteApiRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteApiRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteApiRequest' from JSON`,
  );
}
