/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationFailApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  backchannelAuthenticationFailRequest:
    models.BackchannelAuthenticationFailRequest;
};

/** @internal */
export const BackchannelAuthenticationFailApiRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationFailApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  backchannel_authentication_fail_request:
    models.BackchannelAuthenticationFailRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "backchannel_authentication_fail_request":
      "backchannelAuthenticationFailRequest",
  });
});

/** @internal */
export type BackchannelAuthenticationFailApiRequest$Outbound = {
  serviceId: string;
  backchannel_authentication_fail_request:
    models.BackchannelAuthenticationFailRequest$Outbound;
};

/** @internal */
export const BackchannelAuthenticationFailApiRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationFailApiRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationFailApiRequest
> = z.object({
  serviceId: z.string(),
  backchannelAuthenticationFailRequest:
    models.BackchannelAuthenticationFailRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    backchannelAuthenticationFailRequest:
      "backchannel_authentication_fail_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationFailApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailApiRequest$Outbound;
}

export function backchannelAuthenticationFailApiRequestToJSON(
  backchannelAuthenticationFailApiRequest:
    BackchannelAuthenticationFailApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailApiRequest$outboundSchema.parse(
      backchannelAuthenticationFailApiRequest,
    ),
  );
}

export function backchannelAuthenticationFailApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationFailApiRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailApiRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationFailApiRequest' from JSON`,
  );
}
