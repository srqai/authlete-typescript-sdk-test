/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthAuthorizationFailApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  authorizationFailRequest: models.AuthorizationFailRequest;
};

/** @internal */
export const AuthAuthorizationFailApiRequest$inboundSchema: z.ZodType<
  AuthAuthorizationFailApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  authorization_fail_request: models.AuthorizationFailRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "authorization_fail_request": "authorizationFailRequest",
  });
});

/** @internal */
export type AuthAuthorizationFailApiRequest$Outbound = {
  serviceId: string;
  authorization_fail_request: models.AuthorizationFailRequest$Outbound;
};

/** @internal */
export const AuthAuthorizationFailApiRequest$outboundSchema: z.ZodType<
  AuthAuthorizationFailApiRequest$Outbound,
  z.ZodTypeDef,
  AuthAuthorizationFailApiRequest
> = z.object({
  serviceId: z.string(),
  authorizationFailRequest: models.AuthorizationFailRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    authorizationFailRequest: "authorization_fail_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthAuthorizationFailApiRequest$ {
  /** @deprecated use `AuthAuthorizationFailApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthAuthorizationFailApiRequest$inboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthAuthorizationFailApiRequest$outboundSchema;
  /** @deprecated use `AuthAuthorizationFailApiRequest$Outbound` instead. */
  export type Outbound = AuthAuthorizationFailApiRequest$Outbound;
}

export function authAuthorizationFailApiRequestToJSON(
  authAuthorizationFailApiRequest: AuthAuthorizationFailApiRequest,
): string {
  return JSON.stringify(
    AuthAuthorizationFailApiRequest$outboundSchema.parse(
      authAuthorizationFailApiRequest,
    ),
  );
}

export function authAuthorizationFailApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthAuthorizationFailApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthAuthorizationFailApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthAuthorizationFailApiRequest' from JSON`,
  );
}
