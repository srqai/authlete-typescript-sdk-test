/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeviceVerificationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  deviceVerificationRequest: models.DeviceVerificationRequest;
};

/** @internal */
export const DeviceVerificationApiRequest$inboundSchema: z.ZodType<
  DeviceVerificationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  device_verification_request: models.DeviceVerificationRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "device_verification_request": "deviceVerificationRequest",
  });
});

/** @internal */
export type DeviceVerificationApiRequest$Outbound = {
  serviceId: string;
  device_verification_request: models.DeviceVerificationRequest$Outbound;
};

/** @internal */
export const DeviceVerificationApiRequest$outboundSchema: z.ZodType<
  DeviceVerificationApiRequest$Outbound,
  z.ZodTypeDef,
  DeviceVerificationApiRequest
> = z.object({
  serviceId: z.string(),
  deviceVerificationRequest: models.DeviceVerificationRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    deviceVerificationRequest: "device_verification_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationApiRequest$ {
  /** @deprecated use `DeviceVerificationApiRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationApiRequest$inboundSchema;
  /** @deprecated use `DeviceVerificationApiRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationApiRequest$outboundSchema;
  /** @deprecated use `DeviceVerificationApiRequest$Outbound` instead. */
  export type Outbound = DeviceVerificationApiRequest$Outbound;
}

export function deviceVerificationApiRequestToJSON(
  deviceVerificationApiRequest: DeviceVerificationApiRequest,
): string {
  return JSON.stringify(
    DeviceVerificationApiRequest$outboundSchema.parse(
      deviceVerificationApiRequest,
    ),
  );
}

export function deviceVerificationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationApiRequest' from JSON`,
  );
}
