/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  backchannelAuthenticationRequest: models.BackchannelAuthenticationRequest;
};

/** @internal */
export const BackchannelAuthenticationApiRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  backchannel_authentication_request:
    models.BackchannelAuthenticationRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "backchannel_authentication_request": "backchannelAuthenticationRequest",
  });
});

/** @internal */
export type BackchannelAuthenticationApiRequest$Outbound = {
  serviceId: string;
  backchannel_authentication_request:
    models.BackchannelAuthenticationRequest$Outbound;
};

/** @internal */
export const BackchannelAuthenticationApiRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationApiRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationApiRequest
> = z.object({
  serviceId: z.string(),
  backchannelAuthenticationRequest:
    models.BackchannelAuthenticationRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    backchannelAuthenticationRequest: "backchannel_authentication_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationApiRequest$Outbound;
}

export function backchannelAuthenticationApiRequestToJSON(
  backchannelAuthenticationApiRequest: BackchannelAuthenticationApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationApiRequest$outboundSchema.parse(
      backchannelAuthenticationApiRequest,
    ),
  );
}

export function backchannelAuthenticationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationApiRequest' from JSON`,
  );
}
