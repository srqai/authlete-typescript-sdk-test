/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthIntrospectionApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  introspectionRequest: models.IntrospectionRequest;
};

/** @internal */
export const AuthIntrospectionApiRequest$inboundSchema: z.ZodType<
  AuthIntrospectionApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  introspection_request: models.IntrospectionRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "introspection_request": "introspectionRequest",
  });
});

/** @internal */
export type AuthIntrospectionApiRequest$Outbound = {
  serviceId: string;
  introspection_request: models.IntrospectionRequest$Outbound;
};

/** @internal */
export const AuthIntrospectionApiRequest$outboundSchema: z.ZodType<
  AuthIntrospectionApiRequest$Outbound,
  z.ZodTypeDef,
  AuthIntrospectionApiRequest
> = z.object({
  serviceId: z.string(),
  introspectionRequest: models.IntrospectionRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    introspectionRequest: "introspection_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthIntrospectionApiRequest$ {
  /** @deprecated use `AuthIntrospectionApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthIntrospectionApiRequest$inboundSchema;
  /** @deprecated use `AuthIntrospectionApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthIntrospectionApiRequest$outboundSchema;
  /** @deprecated use `AuthIntrospectionApiRequest$Outbound` instead. */
  export type Outbound = AuthIntrospectionApiRequest$Outbound;
}

export function authIntrospectionApiRequestToJSON(
  authIntrospectionApiRequest: AuthIntrospectionApiRequest,
): string {
  return JSON.stringify(
    AuthIntrospectionApiRequest$outboundSchema.parse(
      authIntrospectionApiRequest,
    ),
  );
}

export function authIntrospectionApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthIntrospectionApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthIntrospectionApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthIntrospectionApiRequest' from JSON`,
  );
}
