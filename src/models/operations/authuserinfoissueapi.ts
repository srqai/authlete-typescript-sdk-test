/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthUserinfoIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  userinfoIssueRequest: models.UserinfoIssueRequest;
};

/** @internal */
export const AuthUserinfoIssueApiRequest$inboundSchema: z.ZodType<
  AuthUserinfoIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  userinfo_issue_request: models.UserinfoIssueRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "userinfo_issue_request": "userinfoIssueRequest",
  });
});

/** @internal */
export type AuthUserinfoIssueApiRequest$Outbound = {
  serviceId: string;
  userinfo_issue_request: models.UserinfoIssueRequest$Outbound;
};

/** @internal */
export const AuthUserinfoIssueApiRequest$outboundSchema: z.ZodType<
  AuthUserinfoIssueApiRequest$Outbound,
  z.ZodTypeDef,
  AuthUserinfoIssueApiRequest
> = z.object({
  serviceId: z.string(),
  userinfoIssueRequest: models.UserinfoIssueRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userinfoIssueRequest: "userinfo_issue_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthUserinfoIssueApiRequest$ {
  /** @deprecated use `AuthUserinfoIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthUserinfoIssueApiRequest$inboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthUserinfoIssueApiRequest$outboundSchema;
  /** @deprecated use `AuthUserinfoIssueApiRequest$Outbound` instead. */
  export type Outbound = AuthUserinfoIssueApiRequest$Outbound;
}

export function authUserinfoIssueApiRequestToJSON(
  authUserinfoIssueApiRequest: AuthUserinfoIssueApiRequest,
): string {
  return JSON.stringify(
    AuthUserinfoIssueApiRequest$outboundSchema.parse(
      authUserinfoIssueApiRequest,
    ),
  );
}

export function authUserinfoIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthUserinfoIssueApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthUserinfoIssueApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthUserinfoIssueApiRequest' from JSON`,
  );
}
