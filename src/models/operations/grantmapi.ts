/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GrantMApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  gMRequest: models.GMRequest;
};

/** @internal */
export const GrantMApiRequest$inboundSchema: z.ZodType<
  GrantMApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  g_m_request: models.GMRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "g_m_request": "gMRequest",
  });
});

/** @internal */
export type GrantMApiRequest$Outbound = {
  serviceId: string;
  g_m_request: models.GMRequest$Outbound;
};

/** @internal */
export const GrantMApiRequest$outboundSchema: z.ZodType<
  GrantMApiRequest$Outbound,
  z.ZodTypeDef,
  GrantMApiRequest
> = z.object({
  serviceId: z.string(),
  gMRequest: models.GMRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    gMRequest: "g_m_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantMApiRequest$ {
  /** @deprecated use `GrantMApiRequest$inboundSchema` instead. */
  export const inboundSchema = GrantMApiRequest$inboundSchema;
  /** @deprecated use `GrantMApiRequest$outboundSchema` instead. */
  export const outboundSchema = GrantMApiRequest$outboundSchema;
  /** @deprecated use `GrantMApiRequest$Outbound` instead. */
  export type Outbound = GrantMApiRequest$Outbound;
}

export function grantMApiRequestToJSON(
  grantMApiRequest: GrantMApiRequest,
): string {
  return JSON.stringify(
    GrantMApiRequest$outboundSchema.parse(grantMApiRequest),
  );
}

export function grantMApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<GrantMApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantMApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantMApiRequest' from JSON`,
  );
}
