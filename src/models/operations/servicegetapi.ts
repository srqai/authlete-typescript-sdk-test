/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceGetApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
};

/** @internal */
export const ServiceGetApiRequest$inboundSchema: z.ZodType<
  ServiceGetApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
});

/** @internal */
export type ServiceGetApiRequest$Outbound = {
  serviceId: string;
};

/** @internal */
export const ServiceGetApiRequest$outboundSchema: z.ZodType<
  ServiceGetApiRequest$Outbound,
  z.ZodTypeDef,
  ServiceGetApiRequest
> = z.object({
  serviceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceGetApiRequest$ {
  /** @deprecated use `ServiceGetApiRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceGetApiRequest$inboundSchema;
  /** @deprecated use `ServiceGetApiRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceGetApiRequest$outboundSchema;
  /** @deprecated use `ServiceGetApiRequest$Outbound` instead. */
  export type Outbound = ServiceGetApiRequest$Outbound;
}

export function serviceGetApiRequestToJSON(
  serviceGetApiRequest: ServiceGetApiRequest,
): string {
  return JSON.stringify(
    ServiceGetApiRequest$outboundSchema.parse(serviceGetApiRequest),
  );
}

export function serviceGetApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceGetApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceGetApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceGetApiRequest' from JSON`,
  );
}
