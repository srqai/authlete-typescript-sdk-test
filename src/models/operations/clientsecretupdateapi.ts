/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ClientSecretUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * The client ID or the client ID alias of a client.
   *
   * @remarks
   */
  clientIdentifier: string;
  clientSecretUpdateRequest: models.ClientSecretUpdateRequest;
};

/** @internal */
export const ClientSecretUpdateApiRequest$inboundSchema: z.ZodType<
  ClientSecretUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  client_secret_update_request: models.ClientSecretUpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "client_secret_update_request": "clientSecretUpdateRequest",
  });
});

/** @internal */
export type ClientSecretUpdateApiRequest$Outbound = {
  serviceId: string;
  clientIdentifier: string;
  client_secret_update_request: models.ClientSecretUpdateRequest$Outbound;
};

/** @internal */
export const ClientSecretUpdateApiRequest$outboundSchema: z.ZodType<
  ClientSecretUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  ClientSecretUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  clientIdentifier: z.string(),
  clientSecretUpdateRequest: models.ClientSecretUpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    clientSecretUpdateRequest: "client_secret_update_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientSecretUpdateApiRequest$ {
  /** @deprecated use `ClientSecretUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema = ClientSecretUpdateApiRequest$inboundSchema;
  /** @deprecated use `ClientSecretUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema = ClientSecretUpdateApiRequest$outboundSchema;
  /** @deprecated use `ClientSecretUpdateApiRequest$Outbound` instead. */
  export type Outbound = ClientSecretUpdateApiRequest$Outbound;
}

export function clientSecretUpdateApiRequestToJSON(
  clientSecretUpdateApiRequest: ClientSecretUpdateApiRequest,
): string {
  return JSON.stringify(
    ClientSecretUpdateApiRequest$outboundSchema.parse(
      clientSecretUpdateApiRequest,
    ),
  );
}

export function clientSecretUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientSecretUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientSecretUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientSecretUpdateApiRequest' from JSON`,
  );
}
