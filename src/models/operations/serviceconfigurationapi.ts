/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServiceConfigurationApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.
   */
  pretty?: boolean | undefined;
  /**
   * Get the JSON Patch [RFC 6902 JavaScript Object Notation (JSON) Patch](https://www.rfc-editor.org/rfc/rfc6902) to be applied.
   */
  patch?: string | undefined;
};

/**
 * An object representing OpenID Provider configuration information. See [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) and [OpenID Provider Configuration Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse) for more details.
 *
 * @remarks
 */
export type ServiceConfigurationApiResponse = {};

/** @internal */
export const ServiceConfigurationApiRequest$inboundSchema: z.ZodType<
  ServiceConfigurationApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  pretty: z.boolean().optional(),
  patch: z.string().optional(),
});

/** @internal */
export type ServiceConfigurationApiRequest$Outbound = {
  serviceId: string;
  pretty?: boolean | undefined;
  patch?: string | undefined;
};

/** @internal */
export const ServiceConfigurationApiRequest$outboundSchema: z.ZodType<
  ServiceConfigurationApiRequest$Outbound,
  z.ZodTypeDef,
  ServiceConfigurationApiRequest
> = z.object({
  serviceId: z.string(),
  pretty: z.boolean().optional(),
  patch: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigurationApiRequest$ {
  /** @deprecated use `ServiceConfigurationApiRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceConfigurationApiRequest$inboundSchema;
  /** @deprecated use `ServiceConfigurationApiRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceConfigurationApiRequest$outboundSchema;
  /** @deprecated use `ServiceConfigurationApiRequest$Outbound` instead. */
  export type Outbound = ServiceConfigurationApiRequest$Outbound;
}

export function serviceConfigurationApiRequestToJSON(
  serviceConfigurationApiRequest: ServiceConfigurationApiRequest,
): string {
  return JSON.stringify(
    ServiceConfigurationApiRequest$outboundSchema.parse(
      serviceConfigurationApiRequest,
    ),
  );
}

export function serviceConfigurationApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ServiceConfigurationApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceConfigurationApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceConfigurationApiRequest' from JSON`,
  );
}

/** @internal */
export const ServiceConfigurationApiResponse$inboundSchema: z.ZodType<
  ServiceConfigurationApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ServiceConfigurationApiResponse$Outbound = {};

/** @internal */
export const ServiceConfigurationApiResponse$outboundSchema: z.ZodType<
  ServiceConfigurationApiResponse$Outbound,
  z.ZodTypeDef,
  ServiceConfigurationApiResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigurationApiResponse$ {
  /** @deprecated use `ServiceConfigurationApiResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceConfigurationApiResponse$inboundSchema;
  /** @deprecated use `ServiceConfigurationApiResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceConfigurationApiResponse$outboundSchema;
  /** @deprecated use `ServiceConfigurationApiResponse$Outbound` instead. */
  export type Outbound = ServiceConfigurationApiResponse$Outbound;
}

export function serviceConfigurationApiResponseToJSON(
  serviceConfigurationApiResponse: ServiceConfigurationApiResponse,
): string {
  return JSON.stringify(
    ServiceConfigurationApiResponse$outboundSchema.parse(
      serviceConfigurationApiResponse,
    ),
  );
}

export function serviceConfigurationApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceConfigurationApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceConfigurationApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceConfigurationApiResponse' from JSON`,
  );
}
