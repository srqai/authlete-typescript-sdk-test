/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientAuthorizationGetListApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  /**
   * Unique user ID of an end-user.
   *
   * @remarks
   */
  subjectPathParameter: string;
  /**
   * Unique user ID of an end-user.
   *
   * @remarks
   */
  subjectQueryParameter: string;
  /**
   * Unique ID of a client developer.
   *
   * @remarks
   */
  developer?: string | undefined;
  /**
   * Start index of search results (inclusive). The default value is 0.
   */
  start?: number | undefined;
  /**
   * End index of search results (exclusive). The default value is 5.
   *
   * @remarks
   */
  end?: number | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiRequest$inboundSchema: z.ZodType<
  ClientAuthorizationGetListApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  subjectPathParameter: z.string(),
  subjectQueryParameter: z.string(),
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/** @internal */
export type ClientAuthorizationGetListApiRequest$Outbound = {
  serviceId: string;
  subjectPathParameter: string;
  subjectQueryParameter: string;
  developer?: string | undefined;
  start?: number | undefined;
  end?: number | undefined;
};

/** @internal */
export const ClientAuthorizationGetListApiRequest$outboundSchema: z.ZodType<
  ClientAuthorizationGetListApiRequest$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationGetListApiRequest
> = z.object({
  serviceId: z.string(),
  subjectPathParameter: z.string(),
  subjectQueryParameter: z.string(),
  developer: z.string().optional(),
  start: z.number().int().optional(),
  end: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationGetListApiRequest$ {
  /** @deprecated use `ClientAuthorizationGetListApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientAuthorizationGetListApiRequest$inboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationGetListApiRequest$outboundSchema;
  /** @deprecated use `ClientAuthorizationGetListApiRequest$Outbound` instead. */
  export type Outbound = ClientAuthorizationGetListApiRequest$Outbound;
}

export function clientAuthorizationGetListApiRequestToJSON(
  clientAuthorizationGetListApiRequest: ClientAuthorizationGetListApiRequest,
): string {
  return JSON.stringify(
    ClientAuthorizationGetListApiRequest$outboundSchema.parse(
      clientAuthorizationGetListApiRequest,
    ),
  );
}

export function clientAuthorizationGetListApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationGetListApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ClientAuthorizationGetListApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationGetListApiRequest' from JSON`,
  );
}
