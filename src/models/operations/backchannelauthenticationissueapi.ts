/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type BackchannelAuthenticationIssueApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  backchannelAuthenticationIssueRequest:
    models.BackchannelAuthenticationIssueRequest;
};

/** @internal */
export const BackchannelAuthenticationIssueApiRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationIssueApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  backchannel_authentication_issue_request:
    models.BackchannelAuthenticationIssueRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "backchannel_authentication_issue_request":
      "backchannelAuthenticationIssueRequest",
  });
});

/** @internal */
export type BackchannelAuthenticationIssueApiRequest$Outbound = {
  serviceId: string;
  backchannel_authentication_issue_request:
    models.BackchannelAuthenticationIssueRequest$Outbound;
};

/** @internal */
export const BackchannelAuthenticationIssueApiRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationIssueApiRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationIssueApiRequest
> = z.object({
  serviceId: z.string(),
  backchannelAuthenticationIssueRequest:
    models.BackchannelAuthenticationIssueRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    backchannelAuthenticationIssueRequest:
      "backchannel_authentication_issue_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueApiRequest$ {
  /** @deprecated use `BackchannelAuthenticationIssueApiRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueApiRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueApiRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueApiRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueApiRequest$Outbound;
}

export function backchannelAuthenticationIssueApiRequestToJSON(
  backchannelAuthenticationIssueApiRequest:
    BackchannelAuthenticationIssueApiRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueApiRequest$outboundSchema.parse(
      backchannelAuthenticationIssueApiRequest,
    ),
  );
}

export function backchannelAuthenticationIssueApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationIssueApiRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueApiRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationIssueApiRequest' from JSON`,
  );
}
