/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AuthTokenUpdateApiRequest = {
  /**
   * A service ID.
   */
  serviceId: string;
  tokenUpdateRequest: models.TokenUpdateRequest;
};

/** @internal */
export const AuthTokenUpdateApiRequest$inboundSchema: z.ZodType<
  AuthTokenUpdateApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  serviceId: z.string(),
  token_update_request: models.TokenUpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "token_update_request": "tokenUpdateRequest",
  });
});

/** @internal */
export type AuthTokenUpdateApiRequest$Outbound = {
  serviceId: string;
  token_update_request: models.TokenUpdateRequest$Outbound;
};

/** @internal */
export const AuthTokenUpdateApiRequest$outboundSchema: z.ZodType<
  AuthTokenUpdateApiRequest$Outbound,
  z.ZodTypeDef,
  AuthTokenUpdateApiRequest
> = z.object({
  serviceId: z.string(),
  tokenUpdateRequest: models.TokenUpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    tokenUpdateRequest: "token_update_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenUpdateApiRequest$ {
  /** @deprecated use `AuthTokenUpdateApiRequest$inboundSchema` instead. */
  export const inboundSchema = AuthTokenUpdateApiRequest$inboundSchema;
  /** @deprecated use `AuthTokenUpdateApiRequest$outboundSchema` instead. */
  export const outboundSchema = AuthTokenUpdateApiRequest$outboundSchema;
  /** @deprecated use `AuthTokenUpdateApiRequest$Outbound` instead. */
  export type Outbound = AuthTokenUpdateApiRequest$Outbound;
}

export function authTokenUpdateApiRequestToJSON(
  authTokenUpdateApiRequest: AuthTokenUpdateApiRequest,
): string {
  return JSON.stringify(
    AuthTokenUpdateApiRequest$outboundSchema.parse(authTokenUpdateApiRequest),
  );
}

export function authTokenUpdateApiRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthTokenUpdateApiRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthTokenUpdateApiRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthTokenUpdateApiRequest' from JSON`,
  );
}
