/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthorizationFailResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthorizationFailResponseAction = ClosedEnum<
  typeof AuthorizationFailResponseAction
>;

export type AuthorizationFailResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthorizationFailResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const AuthorizationFailResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthorizationFailResponseAction
> = z.nativeEnum(AuthorizationFailResponseAction);

/** @internal */
export const AuthorizationFailResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthorizationFailResponseAction
> = AuthorizationFailResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationFailResponseAction$ {
  /** @deprecated use `AuthorizationFailResponseAction$inboundSchema` instead. */
  export const inboundSchema = AuthorizationFailResponseAction$inboundSchema;
  /** @deprecated use `AuthorizationFailResponseAction$outboundSchema` instead. */
  export const outboundSchema = AuthorizationFailResponseAction$outboundSchema;
}

/** @internal */
export const AuthorizationFailResponse$inboundSchema: z.ZodType<
  AuthorizationFailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthorizationFailResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type AuthorizationFailResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const AuthorizationFailResponse$outboundSchema: z.ZodType<
  AuthorizationFailResponse$Outbound,
  z.ZodTypeDef,
  AuthorizationFailResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthorizationFailResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationFailResponse$ {
  /** @deprecated use `AuthorizationFailResponse$inboundSchema` instead. */
  export const inboundSchema = AuthorizationFailResponse$inboundSchema;
  /** @deprecated use `AuthorizationFailResponse$outboundSchema` instead. */
  export const outboundSchema = AuthorizationFailResponse$outboundSchema;
  /** @deprecated use `AuthorizationFailResponse$Outbound` instead. */
  export type Outbound = AuthorizationFailResponse$Outbound;
}

export function authorizationFailResponseToJSON(
  authorizationFailResponse: AuthorizationFailResponse,
): string {
  return JSON.stringify(
    AuthorizationFailResponse$outboundSchema.parse(authorizationFailResponse),
  );
}

export function authorizationFailResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationFailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationFailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationFailResponse' from JSON`,
  );
}
