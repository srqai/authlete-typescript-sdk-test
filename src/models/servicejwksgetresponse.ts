/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An object representing JWK. See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more details.
 *
 * @remarks
 */
export type Key = {};

export type ServiceJwksGetResponse = {
  /**
   * An array of [JWK](https://datatracker.ietf.org/doc/html/rfc7517)s.
   */
  keys?: Array<Key> | undefined;
};

/** @internal */
export const Key$inboundSchema: z.ZodType<Key, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Key$Outbound = {};

/** @internal */
export const Key$outboundSchema: z.ZodType<Key$Outbound, z.ZodTypeDef, Key> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Key$ {
  /** @deprecated use `Key$inboundSchema` instead. */
  export const inboundSchema = Key$inboundSchema;
  /** @deprecated use `Key$outboundSchema` instead. */
  export const outboundSchema = Key$outboundSchema;
  /** @deprecated use `Key$Outbound` instead. */
  export type Outbound = Key$Outbound;
}

export function keyToJSON(key: Key): string {
  return JSON.stringify(Key$outboundSchema.parse(key));
}

export function keyFromJSON(
  jsonString: string,
): SafeParseResult<Key, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Key$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Key' from JSON`,
  );
}

/** @internal */
export const ServiceJwksGetResponse$inboundSchema: z.ZodType<
  ServiceJwksGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  keys: z.array(z.lazy(() => Key$inboundSchema)).optional(),
});

/** @internal */
export type ServiceJwksGetResponse$Outbound = {
  keys?: Array<Key$Outbound> | undefined;
};

/** @internal */
export const ServiceJwksGetResponse$outboundSchema: z.ZodType<
  ServiceJwksGetResponse$Outbound,
  z.ZodTypeDef,
  ServiceJwksGetResponse
> = z.object({
  keys: z.array(z.lazy(() => Key$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceJwksGetResponse$ {
  /** @deprecated use `ServiceJwksGetResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceJwksGetResponse$inboundSchema;
  /** @deprecated use `ServiceJwksGetResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceJwksGetResponse$outboundSchema;
  /** @deprecated use `ServiceJwksGetResponse$Outbound` instead. */
  export type Outbound = ServiceJwksGetResponse$Outbound;
}

export function serviceJwksGetResponseToJSON(
  serviceJwksGetResponse: ServiceJwksGetResponse,
): string {
  return JSON.stringify(
    ServiceJwksGetResponse$outboundSchema.parse(serviceJwksGetResponse),
  );
}

export function serviceJwksGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<ServiceJwksGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceJwksGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceJwksGetResponse' from JSON`,
  );
}
