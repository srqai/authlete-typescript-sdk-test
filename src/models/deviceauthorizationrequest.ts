/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DeviceAuthorizationRequest = {
  /**
   * Parameters of a device authorization request which are the request parameters that the device
   *
   * @remarks
   * authorization endpoint of the authorization server implementation received from the client application.
   *
   * The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
   * of the request from the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from Authorization header of the device authorization request from the
   *
   * @remarks
   * client application.
   *
   * If the device authorization endpoint of the authorization server implementation supports Basic
   * `Authentication` as a means of client authentication, and the request from the client application
   * contained its client ID in `Authorization` header, the value should be extracted and set to this
   * parameter.
   */
  clientId?: string | undefined;
  /**
   * The client secret extracted from `Authorization` header of the device authorization request from
   *
   * @remarks
   * the client application.
   *
   * If the device authorization endpoint of the authorization server implementation supports Basic
   * Authentication as a means of client authentication, and the request from the client application
   * contained its client secret in `Authorization` header, the value should be extracted and set to
   * this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate used in the TLS connection between the client application and the device
   *
   * @remarks
   * authorization endpoint of the authorization server.
   */
  clientCertificate?: string | undefined;
  /**
   * The client certificate path presented by the client during client authentication. Each element
   *
   * @remarks
   * is a string in PEM format.
   */
  clientCertificatePath?: string | undefined;
  /**
   * The value of the `OAuth-Client-Attestation` HTTP header, which is defined in the specification
   *
   * @remarks
   * of [OAuth 2.0 Attestation-Based Client Authentication](https://datatracker.ietf.org/doc/draft-ietf-oauth-attestation-based-client-auth/).
   */
  oauthClientAttestation?: string | undefined;
  /**
   * The value of the `OAuth-Client-Attestation-PoP` HTTP header, which is defined in the specification
   *
   * @remarks
   * of [OAuth 2.0 Attestation-Based Client Authentication](https://datatracker.ietf.org/doc/draft-ietf-oauth-attestation-based-client-auth/).
   */
  oauthClientAttestationPop?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationRequest$inboundSchema: z.ZodType<
  DeviceAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  oauthClientAttestation: z.string().optional(),
  oauthClientAttestationPop: z.string().optional(),
});

/** @internal */
export type DeviceAuthorizationRequest$Outbound = {
  parameters: string;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
  oauthClientAttestation?: string | undefined;
  oauthClientAttestationPop?: string | undefined;
};

/** @internal */
export const DeviceAuthorizationRequest$outboundSchema: z.ZodType<
  DeviceAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  DeviceAuthorizationRequest
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  oauthClientAttestation: z.string().optional(),
  oauthClientAttestationPop: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceAuthorizationRequest$ {
  /** @deprecated use `DeviceAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = DeviceAuthorizationRequest$inboundSchema;
  /** @deprecated use `DeviceAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = DeviceAuthorizationRequest$outboundSchema;
  /** @deprecated use `DeviceAuthorizationRequest$Outbound` instead. */
  export type Outbound = DeviceAuthorizationRequest$Outbound;
}

export function deviceAuthorizationRequestToJSON(
  deviceAuthorizationRequest: DeviceAuthorizationRequest,
): string {
  return JSON.stringify(
    DeviceAuthorizationRequest$outboundSchema.parse(deviceAuthorizationRequest),
  );
}

export function deviceAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeviceAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceAuthorizationRequest' from JSON`,
  );
}
