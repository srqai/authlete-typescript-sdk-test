/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";

export type IntrospectionRequest = {
  /**
   * An access token to introspect.
   */
  token: string;
  /**
   * A string array listing names of scopes which the caller (= a protected resource endpoint of the
   *
   * @remarks
   * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
   * the format of `scopes` is a space-separated list of scope names.
   *
   * If this parameter is a non-empty array and if it contains a scope which is not covered by the
   * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
   */
  scopes?: Array<string> | undefined;
  /**
   * A subject (= a user account managed by the service) whom the caller (= a protected resource
   *
   * @remarks
   * endpoint of the service) requires.
   *
   * If this parameter is not `null` and if the value does not match the subject who is associated
   * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
   */
  subject?: string | undefined;
  /**
   * Client certificate in PEM format, used to validate binding against access tokens using the TLS
   *
   * @remarks
   * client certificate confirmation method.
   */
  clientCertificate?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the resource server.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private
   * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
   * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the request from the client to the protected resource endpoint. This field is
   *
   * @remarks
   * used to validate the `DPoP` header.
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htm?: string | undefined;
  /**
   * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  resources?: Array<string> | undefined;
  /**
   * Authentication Context Class Reference values one of which the user authentication performed during the course
   *
   * @remarks
   * of issuing the access token must satisfy.
   */
  acrValues?: Array<string> | undefined;
  /**
   * The maximum authentication age which is the maximum allowable elapsed time since the user authentication
   *
   * @remarks
   * was performed during the course of issuing the access token.
   */
  maxAge?: number | undefined;
  /**
   * HTTP Message Components required to be in the signature. If absent, defaults to [ "@method", "@target-uri", "authorization" ].
   *
   * @remarks
   */
  requiredComponents?: Array<string> | undefined;
  /**
   * The full URL of the userinfo endpoint.
   *
   * @remarks
   */
  uri?: string | undefined;
  /**
   * The HTTP message body of the request, if present.
   *
   * @remarks
   */
  message?: string | undefined;
  /**
   * HTTP headers to be included in processing the signature. If this is a signed request, this must include the
   *
   * @remarks
   * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
   */
  headers?: Array<Pair> | undefined;
  /**
   * The target URI of the resource request, including the query part, if any.
   *
   * @remarks
   *
   * This parameter is used as the value of the @target-uri derived component for HTTP message signatures
   * [RFC 9421 HTTP Message Signatures, Section 2.2.2. Target URI](https://www.rfc-editor.org/rfc/rfc9421.html#section-2.2.2)).
   * Additionally, other derived components such as `@authority`, `@scheme`, `@path`, `@query` and
   * `@query-param` are computed from this parameter.
   *
   * When this parameter is omitted, the value of the `htu` parameter is used. The `htu` parameter
   * represents the URL of the resource endpoint, which is identical to the target URI of the resource
   * request as long as the request does not include a query component. Conversely, if the resource
   * request includes a query component, the value of the `htu` parameter will not match the target
   * URI, and in that case, the HTTP message signature verification will fail.
   *
   * If neither this `targetUri` parameter nor the `htu` parameter is specified, the target URI is
   * considered unavailable. If HTTP message signing requires the target-uri derived component or
   * other derived components computed based on the target URI, the HTTP message signature verification
   * will fail.
   */
  targetUri?: string | undefined;
  /**
   * The flag indicating whether to check if the DPoP proof JWT includes the expected `nonce` value.
   *
   * @remarks
   *
   * If this request parameter is set to `true` or if the service's `dpopNonceRequired` property is
   * set to `true`, the `/auth/introspection` API checks if the DPoP proof JWT includes the expected
   * `nonce` value. In this case, the response from the `/auth/introspection` API will include the
   * `dpopNonce` response parameter, which should be used as the value of the DPoP-Nonce HTTP header.
   */
  dpopNonceRequired?: boolean | undefined;
  /**
   * The flag indicating whether the resource request contains a request body.
   *
   * @remarks
   *
   * When the resource request must comply with the HTTP message signing requirements defined in the
   * FAPI 2.0 Message Signing specification, the `"content-digest"` component identifier must be included
   * in the signature base of the HTTP message signature (see [RFC 9421 HTTP Message Signatures](https://www.rfc-editor.org/rfc/rfc9421.html))
   * if the resource request contains a request body.
   *
   * When this `requestBodyContained` parameter is set to `true`, Authlete checks whether `"content-digest"`
   * is included in the signature base, if the FAPI profile applies to the resource request.
   */
  requestBodyContained?: boolean | undefined;
};

/** @internal */
export const IntrospectionRequest$inboundSchema: z.ZodType<
  IntrospectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  resources: z.array(z.string()).optional(),
  acrValues: z.array(z.string()).optional(),
  maxAge: z.number().int().optional(),
  requiredComponents: z.array(z.string()).optional(),
  uri: z.string().optional(),
  message: z.string().optional(),
  headers: z.array(Pair$inboundSchema).optional(),
  targetUri: z.string().optional(),
  dpopNonceRequired: z.boolean().optional(),
  requestBodyContained: z.boolean().optional(),
});

/** @internal */
export type IntrospectionRequest$Outbound = {
  token: string;
  scopes?: Array<string> | undefined;
  subject?: string | undefined;
  clientCertificate?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  resources?: Array<string> | undefined;
  acrValues?: Array<string> | undefined;
  maxAge?: number | undefined;
  requiredComponents?: Array<string> | undefined;
  uri?: string | undefined;
  message?: string | undefined;
  headers?: Array<Pair$Outbound> | undefined;
  targetUri?: string | undefined;
  dpopNonceRequired?: boolean | undefined;
  requestBodyContained?: boolean | undefined;
};

/** @internal */
export const IntrospectionRequest$outboundSchema: z.ZodType<
  IntrospectionRequest$Outbound,
  z.ZodTypeDef,
  IntrospectionRequest
> = z.object({
  token: z.string(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  resources: z.array(z.string()).optional(),
  acrValues: z.array(z.string()).optional(),
  maxAge: z.number().int().optional(),
  requiredComponents: z.array(z.string()).optional(),
  uri: z.string().optional(),
  message: z.string().optional(),
  headers: z.array(Pair$outboundSchema).optional(),
  targetUri: z.string().optional(),
  dpopNonceRequired: z.boolean().optional(),
  requestBodyContained: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntrospectionRequest$ {
  /** @deprecated use `IntrospectionRequest$inboundSchema` instead. */
  export const inboundSchema = IntrospectionRequest$inboundSchema;
  /** @deprecated use `IntrospectionRequest$outboundSchema` instead. */
  export const outboundSchema = IntrospectionRequest$outboundSchema;
  /** @deprecated use `IntrospectionRequest$Outbound` instead. */
  export type Outbound = IntrospectionRequest$Outbound;
}

export function introspectionRequestToJSON(
  introspectionRequest: IntrospectionRequest,
): string {
  return JSON.stringify(
    IntrospectionRequest$outboundSchema.parse(introspectionRequest),
  );
}

export function introspectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<IntrospectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntrospectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntrospectionRequest' from JSON`,
  );
}
