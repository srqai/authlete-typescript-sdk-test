/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TaggedValue = {
  /**
   * The language tag part.
   */
  tag?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/** @internal */
export const TaggedValue$inboundSchema: z.ZodType<
  TaggedValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type TaggedValue$Outbound = {
  tag?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const TaggedValue$outboundSchema: z.ZodType<
  TaggedValue$Outbound,
  z.ZodTypeDef,
  TaggedValue
> = z.object({
  tag: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedValue$ {
  /** @deprecated use `TaggedValue$inboundSchema` instead. */
  export const inboundSchema = TaggedValue$inboundSchema;
  /** @deprecated use `TaggedValue$outboundSchema` instead. */
  export const outboundSchema = TaggedValue$outboundSchema;
  /** @deprecated use `TaggedValue$Outbound` instead. */
  export type Outbound = TaggedValue$Outbound;
}

export function taggedValueToJSON(taggedValue: TaggedValue): string {
  return JSON.stringify(TaggedValue$outboundSchema.parse(taggedValue));
}

export function taggedValueFromJSON(
  jsonString: string,
): SafeParseResult<TaggedValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaggedValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaggedValue' from JSON`,
  );
}
