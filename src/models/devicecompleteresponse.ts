/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const DeviceCompleteResponseAction = {
  ServerError: "SERVER_ERROR",
  UserCodeNotExist: "USER_CODE_NOT_EXIST",
  UserCodeExpired: "USER_CODE_EXPIRED",
  InvalidRequest: "INVALID_REQUEST",
  Success: "SUCCESS",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type DeviceCompleteResponseAction = ClosedEnum<
  typeof DeviceCompleteResponseAction
>;

export type DeviceCompleteResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: DeviceCompleteResponseAction | undefined;
};

/** @internal */
export const DeviceCompleteResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteResponseAction
> = z.nativeEnum(DeviceCompleteResponseAction);

/** @internal */
export const DeviceCompleteResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceCompleteResponseAction
> = DeviceCompleteResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteResponseAction$ {
  /** @deprecated use `DeviceCompleteResponseAction$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteResponseAction$inboundSchema;
  /** @deprecated use `DeviceCompleteResponseAction$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteResponseAction$outboundSchema;
}

/** @internal */
export const DeviceCompleteResponse$inboundSchema: z.ZodType<
  DeviceCompleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceCompleteResponseAction$inboundSchema.optional(),
});

/** @internal */
export type DeviceCompleteResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
};

/** @internal */
export const DeviceCompleteResponse$outboundSchema: z.ZodType<
  DeviceCompleteResponse$Outbound,
  z.ZodTypeDef,
  DeviceCompleteResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceCompleteResponseAction$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCompleteResponse$ {
  /** @deprecated use `DeviceCompleteResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceCompleteResponse$inboundSchema;
  /** @deprecated use `DeviceCompleteResponse$outboundSchema` instead. */
  export const outboundSchema = DeviceCompleteResponse$outboundSchema;
  /** @deprecated use `DeviceCompleteResponse$Outbound` instead. */
  export type Outbound = DeviceCompleteResponse$Outbound;
}

export function deviceCompleteResponseToJSON(
  deviceCompleteResponse: DeviceCompleteResponse,
): string {
  return JSON.stringify(
    DeviceCompleteResponse$outboundSchema.parse(deviceCompleteResponse),
  );
}

export function deviceCompleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCompleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCompleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCompleteResponse' from JSON`,
  );
}
