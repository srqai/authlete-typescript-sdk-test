/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CredentialRequestInfo,
  CredentialRequestInfo$inboundSchema,
  CredentialRequestInfo$Outbound,
  CredentialRequestInfo$outboundSchema,
} from "./credentialrequestinfo.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the batch credential endpoint should take.
 */
export const VciBatchParseResponseAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the batch credential endpoint should take.
 */
export type VciBatchParseResponseAction = ClosedEnum<
  typeof VciBatchParseResponseAction
>;

export type VciBatchParseResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the batch credential endpoint should take.
   */
  action?: VciBatchParseResponseAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  /**
   * Information about the credential requests in the batch credential
   *
   * @remarks
   * request.
   */
  info?: Array<CredentialRequestInfo> | undefined;
};

/** @internal */
export const VciBatchParseResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciBatchParseResponseAction
> = z.nativeEnum(VciBatchParseResponseAction);

/** @internal */
export const VciBatchParseResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciBatchParseResponseAction
> = VciBatchParseResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseResponseAction$ {
  /** @deprecated use `VciBatchParseResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseResponseAction$inboundSchema;
  /** @deprecated use `VciBatchParseResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseResponseAction$outboundSchema;
}

/** @internal */
export const VciBatchParseResponse$inboundSchema: z.ZodType<
  VciBatchParseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchParseResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.array(CredentialRequestInfo$inboundSchema).optional(),
});

/** @internal */
export type VciBatchParseResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: Array<CredentialRequestInfo$Outbound> | undefined;
};

/** @internal */
export const VciBatchParseResponse$outboundSchema: z.ZodType<
  VciBatchParseResponse$Outbound,
  z.ZodTypeDef,
  VciBatchParseResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchParseResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: z.array(CredentialRequestInfo$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchParseResponse$ {
  /** @deprecated use `VciBatchParseResponse$inboundSchema` instead. */
  export const inboundSchema = VciBatchParseResponse$inboundSchema;
  /** @deprecated use `VciBatchParseResponse$outboundSchema` instead. */
  export const outboundSchema = VciBatchParseResponse$outboundSchema;
  /** @deprecated use `VciBatchParseResponse$Outbound` instead. */
  export type Outbound = VciBatchParseResponse$Outbound;
}

export function vciBatchParseResponseToJSON(
  vciBatchParseResponse: VciBatchParseResponse,
): string {
  return JSON.stringify(
    VciBatchParseResponse$outboundSchema.parse(vciBatchParseResponse),
  );
}

export function vciBatchParseResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchParseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchParseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchParseResponse' from JSON`,
  );
}
