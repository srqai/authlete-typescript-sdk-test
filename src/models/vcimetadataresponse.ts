/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the credential issuer
 *
 * @remarks
 * metadata endpoint (`/.well-known/openid-credential-issuer`)
 * should take after getting a response from Authlete's
 * `/vci/metadata` API.
 */
export const VciMetadataResponseAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the credential issuer
 *
 * @remarks
 * metadata endpoint (`/.well-known/openid-credential-issuer`)
 * should take after getting a response from Authlete's
 * `/vci/metadata` API.
 */
export type VciMetadataResponseAction = ClosedEnum<
  typeof VciMetadataResponseAction
>;

export type VciMetadataResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint (`/.well-known/openid-credential-issuer`)
   * should take after getting a response from Authlete's
   * `/vci/metadata` API.
   */
  action?: VciMetadataResponseAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciMetadataResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciMetadataResponseAction
> = z.nativeEnum(VciMetadataResponseAction);

/** @internal */
export const VciMetadataResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciMetadataResponseAction
> = VciMetadataResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataResponseAction$ {
  /** @deprecated use `VciMetadataResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciMetadataResponseAction$inboundSchema;
  /** @deprecated use `VciMetadataResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciMetadataResponseAction$outboundSchema;
}

/** @internal */
export const VciMetadataResponse$inboundSchema: z.ZodType<
  VciMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciMetadataResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciMetadataResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciMetadataResponse$outboundSchema: z.ZodType<
  VciMetadataResponse$Outbound,
  z.ZodTypeDef,
  VciMetadataResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciMetadataResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciMetadataResponse$ {
  /** @deprecated use `VciMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = VciMetadataResponse$inboundSchema;
  /** @deprecated use `VciMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = VciMetadataResponse$outboundSchema;
  /** @deprecated use `VciMetadataResponse$Outbound` instead. */
  export type Outbound = VciMetadataResponse$Outbound;
}

export function vciMetadataResponseToJSON(
  vciMetadataResponse: VciMetadataResponse,
): string {
  return JSON.stringify(
    VciMetadataResponse$outboundSchema.parse(vciMetadataResponse),
  );
}

export function vciMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciMetadataResponse' from JSON`,
  );
}
