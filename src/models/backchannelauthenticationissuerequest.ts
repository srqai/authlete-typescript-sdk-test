/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BackchannelAuthenticationIssueRequest = {
  /**
   * The ticket issued from Authlete's `/backchannel/authentication` API.
   *
   * @remarks
   */
  ticket: string;
};

/** @internal */
export const BackchannelAuthenticationIssueRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationIssueRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
});

/** @internal */
export type BackchannelAuthenticationIssueRequest$Outbound = {
  ticket: string;
};

/** @internal */
export const BackchannelAuthenticationIssueRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationIssueRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationIssueRequest
> = z.object({
  ticket: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueRequest$ {
  /** @deprecated use `BackchannelAuthenticationIssueRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueRequest$Outbound;
}

export function backchannelAuthenticationIssueRequestToJSON(
  backchannelAuthenticationIssueRequest: BackchannelAuthenticationIssueRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueRequest$outboundSchema.parse(
      backchannelAuthenticationIssueRequest,
    ),
  );
}

export function backchannelAuthenticationIssueRequestFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationIssueRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationIssueRequest' from JSON`,
  );
}
