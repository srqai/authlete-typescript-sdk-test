/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CredentialRequestInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The value of the format parameter in the credential request.
   */
  format?: string | undefined;
  /**
   * The binding key specified by the proof in the credential request.
   */
  bindingKey?: string | undefined;
  /**
   * The binding keys specified by the proofs in the credential request.
   */
  bindingKeys?: Array<string> | undefined;
  /**
   * The details about the credential request.
   */
  details?: string | undefined;
};

/** @internal */
export const CredentialRequestInfo$inboundSchema: z.ZodType<
  CredentialRequestInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  format: z.string().optional(),
  bindingKey: z.string().optional(),
  bindingKeys: z.array(z.string()).optional(),
  details: z.string().optional(),
});

/** @internal */
export type CredentialRequestInfo$Outbound = {
  identifier?: string | undefined;
  format?: string | undefined;
  bindingKey?: string | undefined;
  bindingKeys?: Array<string> | undefined;
  details?: string | undefined;
};

/** @internal */
export const CredentialRequestInfo$outboundSchema: z.ZodType<
  CredentialRequestInfo$Outbound,
  z.ZodTypeDef,
  CredentialRequestInfo
> = z.object({
  identifier: z.string().optional(),
  format: z.string().optional(),
  bindingKey: z.string().optional(),
  bindingKeys: z.array(z.string()).optional(),
  details: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CredentialRequestInfo$ {
  /** @deprecated use `CredentialRequestInfo$inboundSchema` instead. */
  export const inboundSchema = CredentialRequestInfo$inboundSchema;
  /** @deprecated use `CredentialRequestInfo$outboundSchema` instead. */
  export const outboundSchema = CredentialRequestInfo$outboundSchema;
  /** @deprecated use `CredentialRequestInfo$Outbound` instead. */
  export type Outbound = CredentialRequestInfo$Outbound;
}

export function credentialRequestInfoToJSON(
  credentialRequestInfo: CredentialRequestInfo,
): string {
  return JSON.stringify(
    CredentialRequestInfo$outboundSchema.parse(credentialRequestInfo),
  );
}

export function credentialRequestInfoFromJSON(
  jsonString: string,
): SafeParseResult<CredentialRequestInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CredentialRequestInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CredentialRequestInfo' from JSON`,
  );
}
