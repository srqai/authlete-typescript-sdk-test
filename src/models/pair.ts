/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Pair = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
};

/** @internal */
export const Pair$inboundSchema: z.ZodType<Pair, z.ZodTypeDef, unknown> = z
  .object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type Pair$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const Pair$outboundSchema: z.ZodType<Pair$Outbound, z.ZodTypeDef, Pair> =
  z.object({
    key: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pair$ {
  /** @deprecated use `Pair$inboundSchema` instead. */
  export const inboundSchema = Pair$inboundSchema;
  /** @deprecated use `Pair$outboundSchema` instead. */
  export const outboundSchema = Pair$outboundSchema;
  /** @deprecated use `Pair$Outbound` instead. */
  export type Outbound = Pair$Outbound;
}

export function pairToJSON(pair: Pair): string {
  return JSON.stringify(Pair$outboundSchema.parse(pair));
}

export function pairFromJSON(
  jsonString: string,
): SafeParseResult<Pair, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pair$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pair' from JSON`,
  );
}
