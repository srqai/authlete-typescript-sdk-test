/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type HskCreateRequest = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * The key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The algorithm of the key on the HSM. When the key use is `"sig"`, the algorithm represents a signing
   *
   * @remarks
   * algorithm such as `"ES256"`. When the key use is `"enc"`, the algorithm represents an encryption
   * algorithm such as `"RSA-OAEP-256"`.
   *
   * It is rare that HSMs support all the algorithms listed in [RFC 7518 JSON Web Algorithms (JWA)](https://www.rfc-editor.org/rfc/rfc7518.html).
   * When the specified algorithm is not supported by the HSM, the request to the `/hsk/create` API
   * fails.
   */
  alg?: string | undefined;
};

/** @internal */
export const HskCreateRequest$inboundSchema: z.ZodType<
  HskCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  alg: z.string().optional(),
});

/** @internal */
export type HskCreateRequest$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  alg?: string | undefined;
};

/** @internal */
export const HskCreateRequest$outboundSchema: z.ZodType<
  HskCreateRequest$Outbound,
  z.ZodTypeDef,
  HskCreateRequest
> = z.object({
  kty: z.string().optional(),
  use: z.string().optional(),
  kid: z.string().optional(),
  hsmName: z.string().optional(),
  alg: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskCreateRequest$ {
  /** @deprecated use `HskCreateRequest$inboundSchema` instead. */
  export const inboundSchema = HskCreateRequest$inboundSchema;
  /** @deprecated use `HskCreateRequest$outboundSchema` instead. */
  export const outboundSchema = HskCreateRequest$outboundSchema;
  /** @deprecated use `HskCreateRequest$Outbound` instead. */
  export type Outbound = HskCreateRequest$Outbound;
}

export function hskCreateRequestToJSON(
  hskCreateRequest: HskCreateRequest,
): string {
  return JSON.stringify(
    HskCreateRequest$outboundSchema.parse(hskCreateRequest),
  );
}

export function hskCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<HskCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskCreateRequest' from JSON`,
  );
}
