/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type JoseVerifyRequest = {
  /**
   * A JOSE object.
   *
   * @remarks
   */
  jose: string;
  /**
   * Mandatory claims that are required to be included in the JOSE object.
   *
   * @remarks
   */
  mandatoryClaims?: string | undefined;
  /**
   * Allowable clock skew in seconds.
   *
   * @remarks
   */
  clockSkew?: number | undefined;
  /**
   * The identifier of the client application whose keys are required for verification of the JOSE
   *
   * @remarks
   * object.
   */
  clientIdentifier?: string | undefined;
  /**
   * The flag which indicates whether the signature of the JOSE object has been signed by a client
   *
   * @remarks
   * application with the client's private key or a shared symmetric key.
   */
  signedByClient?: boolean | undefined;
};

/** @internal */
export const JoseVerifyRequest$inboundSchema: z.ZodType<
  JoseVerifyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  jose: z.string(),
  mandatoryClaims: z.string().optional(),
  clockSkew: z.number().int().optional(),
  clientIdentifier: z.string().optional(),
  signedByClient: z.boolean().optional(),
});

/** @internal */
export type JoseVerifyRequest$Outbound = {
  jose: string;
  mandatoryClaims?: string | undefined;
  clockSkew?: number | undefined;
  clientIdentifier?: string | undefined;
  signedByClient?: boolean | undefined;
};

/** @internal */
export const JoseVerifyRequest$outboundSchema: z.ZodType<
  JoseVerifyRequest$Outbound,
  z.ZodTypeDef,
  JoseVerifyRequest
> = z.object({
  jose: z.string(),
  mandatoryClaims: z.string().optional(),
  clockSkew: z.number().int().optional(),
  clientIdentifier: z.string().optional(),
  signedByClient: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyRequest$ {
  /** @deprecated use `JoseVerifyRequest$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyRequest$inboundSchema;
  /** @deprecated use `JoseVerifyRequest$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyRequest$outboundSchema;
  /** @deprecated use `JoseVerifyRequest$Outbound` instead. */
  export type Outbound = JoseVerifyRequest$Outbound;
}

export function joseVerifyRequestToJSON(
  joseVerifyRequest: JoseVerifyRequest,
): string {
  return JSON.stringify(
    JoseVerifyRequest$outboundSchema.parse(joseVerifyRequest),
  );
}

export function joseVerifyRequestFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyRequest' from JSON`,
  );
}
