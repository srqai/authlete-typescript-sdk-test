/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  GrantManagementAction,
  GrantManagementAction$inboundSchema,
  GrantManagementAction$outboundSchema,
} from "./grantmanagementaction.js";

export type GMRequest = {
  /**
   * An access token to introspect.
   */
  accessToken?: string | undefined;
  /**
   * Client certificate in PEM format, used to validate binding against access tokens using the TLS
   *
   * @remarks
   * client certificate confirmation method.
   */
  clientCertificate?: string | undefined;
  /**
   * `DPoP` header presented by the client during the request to the resource server.
   *
   * @remarks
   *
   * The header contains a signed JWT which includes the public key that is paired with the private
   * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
   * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
   */
  dpop?: string | undefined;
  /**
   * HTTP method of the request from the client to the protected resource endpoint. This field is
   *
   * @remarks
   * used to validate the `DPoP` header.
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htm?: string | undefined;
  /**
   * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
   *
   * @remarks
   *
   * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
   * for details.
   */
  htu?: string | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: GrantManagementAction | undefined;
  /**
   * The value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The flag indicating whether to require the DPoP proof JWT to include the `nonce` claim. Even if
   *
   * @remarks
   * the service's `dpopNonceRequired` property is `false`, calling the `/auth/gm` API with this
   * `dpopNonceRequired` parameter `true` will force the Authlete API to check whether the DPoP proof
   * JWT includes the expected `nonce` value.
   */
  dpopNonceRequired?: boolean | undefined;
};

/** @internal */
export const GMRequest$inboundSchema: z.ZodType<
  GMRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  gmAction: GrantManagementAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  dpopNonceRequired: z.boolean().optional(),
});

/** @internal */
export type GMRequest$Outbound = {
  accessToken?: string | undefined;
  clientCertificate?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  dpopNonceRequired?: boolean | undefined;
};

/** @internal */
export const GMRequest$outboundSchema: z.ZodType<
  GMRequest$Outbound,
  z.ZodTypeDef,
  GMRequest
> = z.object({
  accessToken: z.string().optional(),
  clientCertificate: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  gmAction: GrantManagementAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  dpopNonceRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GMRequest$ {
  /** @deprecated use `GMRequest$inboundSchema` instead. */
  export const inboundSchema = GMRequest$inboundSchema;
  /** @deprecated use `GMRequest$outboundSchema` instead. */
  export const outboundSchema = GMRequest$outboundSchema;
  /** @deprecated use `GMRequest$Outbound` instead. */
  export type Outbound = GMRequest$Outbound;
}

export function gMRequestToJSON(gmRequest: GMRequest): string {
  return JSON.stringify(GMRequest$outboundSchema.parse(gmRequest));
}

export function gMRequestFromJSON(
  jsonString: string,
): SafeParseResult<GMRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GMRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GMRequest' from JSON`,
  );
}
