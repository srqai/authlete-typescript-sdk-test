/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import {
  DynamicScope,
  DynamicScope$inboundSchema,
  DynamicScope$Outbound,
  DynamicScope$outboundSchema,
} from "./dynamicscope.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Grant,
  Grant$inboundSchema,
  Grant$Outbound,
  Grant$outboundSchema,
} from "./grant.js";
import {
  GrantManagementAction,
  GrantManagementAction$inboundSchema,
  GrantManagementAction$outboundSchema,
} from "./grantmanagementaction.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";
import {
  Scope,
  Scope$inboundSchema,
  Scope$Outbound,
  Scope$outboundSchema,
} from "./scope.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const DeviceVerificationResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  NotExist: "NOT_EXIST",
  Expired: "EXPIRED",
  Valid: "VALID",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type DeviceVerificationResponseAction = ClosedEnum<
  typeof DeviceVerificationResponseAction
>;

export type DeviceVerificationResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: DeviceVerificationResponseAction | undefined;
  /**
   * The client ID of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the `client_id` request parameter included in the device authorization
   *
   * @remarks
   * request is the client ID alias. `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application to which the user code has been issued.
   *
   * @remarks
   */
  clientName?: string | undefined;
  /**
   * The scopes requested by the device authorization request.
   *
   * @remarks
   *
   * Note that `description` property and `descriptions` property of each scope object in
   * the array contained in this property is always null even if descriptions of the scopes
   * are registered.
   */
  scopes?: Array<Scope> | undefined;
  /**
   * The names of the claims which were requested indirectly via some special scopes.
   *
   * @remarks
   * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * in OpenID Connect Core 1.0 for details.
   *
   * This property is always `null` if the `scope` request parameter of the device authorization
   * request does not include the `openid` scope even if special scopes (such as `profile`)
   * are included in the request (unless the openid scope is included in the default set
   * of scopes which is used when the `scope` request parameter is omitted).
   */
  claimNames?: Array<string> | undefined;
  /**
   * The list of ACR values requested by the device authorization request.
   *
   * @remarks
   */
  acrs?: Array<string> | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<Pair> | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<DynamicScope> | undefined;
  /**
   * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
   *
   * @remarks
   */
  expiresAt?: number | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: GrantManagementAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: Grant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceVerificationResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationResponseAction
> = z.nativeEnum(DeviceVerificationResponseAction);

/** @internal */
export const DeviceVerificationResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof DeviceVerificationResponseAction
> = DeviceVerificationResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationResponseAction$ {
  /** @deprecated use `DeviceVerificationResponseAction$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationResponseAction$inboundSchema;
  /** @deprecated use `DeviceVerificationResponseAction$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationResponseAction$outboundSchema;
}

/** @internal */
export const DeviceVerificationResponse$inboundSchema: z.ZodType<
  DeviceVerificationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceVerificationResponseAction$inboundSchema.optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(Scope$inboundSchema).optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  serviceAttributes: z.array(Pair$inboundSchema).optional(),
  clientAttributes: z.array(Pair$inboundSchema).optional(),
  dynamicScopes: z.array(DynamicScope$inboundSchema).optional(),
  expiresAt: z.number().int().optional(),
  gmAction: GrantManagementAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: Grant$inboundSchema.optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type DeviceVerificationResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  scopes?: Array<Scope$Outbound> | undefined;
  claimNames?: Array<string> | undefined;
  acrs?: Array<string> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  serviceAttributes?: Array<Pair$Outbound> | undefined;
  clientAttributes?: Array<Pair$Outbound> | undefined;
  dynamicScopes?: Array<DynamicScope$Outbound> | undefined;
  expiresAt?: number | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: Grant$Outbound | undefined;
  grantSubject?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const DeviceVerificationResponse$outboundSchema: z.ZodType<
  DeviceVerificationResponse$Outbound,
  z.ZodTypeDef,
  DeviceVerificationResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: DeviceVerificationResponseAction$outboundSchema.optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  scopes: z.array(Scope$outboundSchema).optional(),
  claimNames: z.array(z.string()).optional(),
  acrs: z.array(z.string()).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
  serviceAttributes: z.array(Pair$outboundSchema).optional(),
  clientAttributes: z.array(Pair$outboundSchema).optional(),
  dynamicScopes: z.array(DynamicScope$outboundSchema).optional(),
  expiresAt: z.number().int().optional(),
  gmAction: GrantManagementAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: Grant$outboundSchema.optional(),
  grantSubject: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceVerificationResponse$ {
  /** @deprecated use `DeviceVerificationResponse$inboundSchema` instead. */
  export const inboundSchema = DeviceVerificationResponse$inboundSchema;
  /** @deprecated use `DeviceVerificationResponse$outboundSchema` instead. */
  export const outboundSchema = DeviceVerificationResponse$outboundSchema;
  /** @deprecated use `DeviceVerificationResponse$Outbound` instead. */
  export type Outbound = DeviceVerificationResponse$Outbound;
}

export function deviceVerificationResponseToJSON(
  deviceVerificationResponse: DeviceVerificationResponse,
): string {
  return JSON.stringify(
    DeviceVerificationResponse$outboundSchema.parse(deviceVerificationResponse),
  );
}

export function deviceVerificationResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeviceVerificationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceVerificationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceVerificationResponse' from JSON`,
  );
}
