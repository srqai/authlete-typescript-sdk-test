/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientAuthorizationDeleteResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  serviceApiKey?: number | undefined;
  /**
   * Get the client ID.
   */
  clientId?: number | undefined;
  /**
   * Get the subject (= unique identifier) of the user
   *
   * @remarks
   * who has granted authorization to the client.
   */
  subject?: string | undefined;
  /**
   * Get the scopes granted to the client application by the last
   *
   * @remarks
   * authorization process by the user (who is identified by the
   * subject).
   */
  latestGrantedScopes?: Array<string> | undefined;
  /**
   * Get the scopes granted to the client application by all the
   *
   * @remarks
   * past authorization processes. Note that revoked scopes are
   * not included.
   */
  mergedGrantedScopes?: Array<string> | undefined;
  /**
   * Get the timestamp in milliseconds since Unix epoch
   *
   * @remarks
   * at which this record was modified.
   */
  modifiedAt?: number | undefined;
};

/** @internal */
export const ClientAuthorizationDeleteResponse$inboundSchema: z.ZodType<
  ClientAuthorizationDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  serviceApiKey: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  latestGrantedScopes: z.array(z.string()).optional(),
  mergedGrantedScopes: z.array(z.string()).optional(),
  modifiedAt: z.number().int().optional(),
});

/** @internal */
export type ClientAuthorizationDeleteResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  serviceApiKey?: number | undefined;
  clientId?: number | undefined;
  subject?: string | undefined;
  latestGrantedScopes?: Array<string> | undefined;
  mergedGrantedScopes?: Array<string> | undefined;
  modifiedAt?: number | undefined;
};

/** @internal */
export const ClientAuthorizationDeleteResponse$outboundSchema: z.ZodType<
  ClientAuthorizationDeleteResponse$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationDeleteResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  serviceApiKey: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  latestGrantedScopes: z.array(z.string()).optional(),
  mergedGrantedScopes: z.array(z.string()).optional(),
  modifiedAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationDeleteResponse$ {
  /** @deprecated use `ClientAuthorizationDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ClientAuthorizationDeleteResponse$inboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationDeleteResponse$outboundSchema;
  /** @deprecated use `ClientAuthorizationDeleteResponse$Outbound` instead. */
  export type Outbound = ClientAuthorizationDeleteResponse$Outbound;
}

export function clientAuthorizationDeleteResponseToJSON(
  clientAuthorizationDeleteResponse: ClientAuthorizationDeleteResponse,
): string {
  return JSON.stringify(
    ClientAuthorizationDeleteResponse$outboundSchema.parse(
      clientAuthorizationDeleteResponse,
    ),
  );
}

export function clientAuthorizationDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientAuthorizationDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationDeleteResponse' from JSON`,
  );
}
