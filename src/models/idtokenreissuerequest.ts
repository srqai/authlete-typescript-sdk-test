/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IdtokenReissueRequest = {
  /**
   * <p>
   *
   * @remarks
   * The value of this parameter should be (a) the value of the
   * "`jwtAccessToken`" parameter in a response from the
   * `/auth/token` API when the value is available, or (b)
   * the value of the "`accessToken`" parameter in the
   * response from the `/auth/token` API when the value of
   * the "`jwtAccessToken`" parameter is not available.
   * </p>
   */
  accessToken: string;
  /**
   * <p>
   *
   * @remarks
   * The value of this parameter should be the value of the
   * "`refreshToken`" parameter in a response from the
   * `/auth/token` API.
   * </p>
   */
  refreshToken: string;
  /**
   * The value that should be used as the value of the "`sub`"
   *
   * @remarks
   * claim of the ID token.
   *
   * <p>
   * This parameter is optional. When omitted, the value of the subject
   * associated with the access token is used.
   * </p>
   */
  sub?: string | undefined;
  /**
   * Additional claims that should be embedded in the payload part of
   *
   * @remarks
   * the ID token. The format is a JSON object.
   *
   * <p>
   * This parameter is optional.
   * </p>
   */
  claims?: string | undefined;
  /**
   * Additional parameters that should be embedded in the JWS header of
   *
   * @remarks
   * the ID token. The format is a JSON object.
   *
   * <p>
   * This parameter is optional.
   * </p>
   */
  idtHeaderParams?: string | undefined;
  /**
   * The type of the "`aud`" claim of the ID token being issued.
   *
   * @remarks
   *
   * <p>
   * Valid values of this parameter are as follows.
   * </p>
   *
   * <blockquote>
   * <table border="1" cellpadding="5" style="border-collapse: collapse;">
   *   <tr bgcolor="orange">
   *     <th>Value</th>
   *     <th>Description</th>
   *   </tr>
   *   <tr>
   *     <td>"`array`"</td>
   *     <td>The type of the `aud` claim becomes an array of strings.</td>
   *   </tr>
   *   <tr>
   *     <td>"`string`"</td>
   *     <td>The type of the `aud` claim becomes a single string.</td>
   *   </tr>
   * </table>
   * </blockquote>
   *
   * <p>
   * This parameter is optional, and the default value on omission is
   * "`array`".
   * </p>
   *
   * <p>
   * This parameter takes precedence over the `idTokenAudType` property
   * of {@link Service} (cf. {@link Service#getIdTokenAudType()}).
   * </p>
   */
  idTokenAudType?: string | undefined;
};

/** @internal */
export const IdtokenReissueRequest$inboundSchema: z.ZodType<
  IdtokenReissueRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  refreshToken: z.string(),
  sub: z.string().optional(),
  claims: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  idTokenAudType: z.string().optional(),
});

/** @internal */
export type IdtokenReissueRequest$Outbound = {
  accessToken: string;
  refreshToken: string;
  sub?: string | undefined;
  claims?: string | undefined;
  idtHeaderParams?: string | undefined;
  idTokenAudType?: string | undefined;
};

/** @internal */
export const IdtokenReissueRequest$outboundSchema: z.ZodType<
  IdtokenReissueRequest$Outbound,
  z.ZodTypeDef,
  IdtokenReissueRequest
> = z.object({
  accessToken: z.string(),
  refreshToken: z.string(),
  sub: z.string().optional(),
  claims: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  idTokenAudType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueRequest$ {
  /** @deprecated use `IdtokenReissueRequest$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueRequest$inboundSchema;
  /** @deprecated use `IdtokenReissueRequest$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueRequest$outboundSchema;
  /** @deprecated use `IdtokenReissueRequest$Outbound` instead. */
  export type Outbound = IdtokenReissueRequest$Outbound;
}

export function idtokenReissueRequestToJSON(
  idtokenReissueRequest: IdtokenReissueRequest,
): string {
  return JSON.stringify(
    IdtokenReissueRequest$outboundSchema.parse(idtokenReissueRequest),
  );
}

export function idtokenReissueRequestFromJSON(
  jsonString: string,
): SafeParseResult<IdtokenReissueRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdtokenReissueRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdtokenReissueRequest' from JSON`,
  );
}
