/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RevocationRequest = {
  /**
   * OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
   *
   * @remarks
   * ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
   * client application.
   *
   * The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
   * from the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from `Authorization` header of the revocation request from the client application.
   *
   * @remarks
   *
   * If the revocation endpoint of the authorization server implementation supports Basic Authentication
   * as a means of client authentication, and the request from the client application contains its client ID in
   * `Authorization` header, the value should be extracted and set to this parameter.
   */
  clientId?: string | undefined;
  /**
   * The client secret extracted from `Authorization` header of the revocation request from the client application.
   *
   * @remarks
   *
   * If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
   * client authentication, and the request from the client application contained its client secret in `Authorization` header,
   * the value should be extracted and set to this parameter.
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate used in the TLS connection between the client application and the revocation endpoint.
   *
   * @remarks
   */
  clientCertificate?: string | undefined;
  /**
   * The certificate path presented by the client during client authentication.
   *
   * @remarks
   */
  clientCertificatePath?: string | undefined;
  /**
   * The value of the `OAuth-Client-Attestation` HTTP header, which is defined in the specification
   *
   * @remarks
   * of [OAuth 2.0 Attestation-Based Client Authentication](https://datatracker.ietf.org/doc/draft-ietf-oauth-attestation-based-client-auth/).
   */
  oauthClientAttestation?: string | undefined;
  /**
   * The value of the `OAuth-Client-Attestation-PoP` HTTP header, which is defined in the specification
   *
   * @remarks
   * of [OAuth 2.0 Attestation-Based Client Authentication](https://datatracker.ietf.org/doc/draft-ietf-oauth-attestation-based-client-auth/).
   */
  oauthClientAttestationPop?: string | undefined;
};

/** @internal */
export const RevocationRequest$inboundSchema: z.ZodType<
  RevocationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  oauthClientAttestation: z.string().optional(),
  oauthClientAttestationPop: z.string().optional(),
});

/** @internal */
export type RevocationRequest$Outbound = {
  parameters: string;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
  oauthClientAttestation?: string | undefined;
  oauthClientAttestationPop?: string | undefined;
};

/** @internal */
export const RevocationRequest$outboundSchema: z.ZodType<
  RevocationRequest$Outbound,
  z.ZodTypeDef,
  RevocationRequest
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  oauthClientAttestation: z.string().optional(),
  oauthClientAttestationPop: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevocationRequest$ {
  /** @deprecated use `RevocationRequest$inboundSchema` instead. */
  export const inboundSchema = RevocationRequest$inboundSchema;
  /** @deprecated use `RevocationRequest$outboundSchema` instead. */
  export const outboundSchema = RevocationRequest$outboundSchema;
  /** @deprecated use `RevocationRequest$Outbound` instead. */
  export type Outbound = RevocationRequest$Outbound;
}

export function revocationRequestToJSON(
  revocationRequest: RevocationRequest,
): string {
  return JSON.stringify(
    RevocationRequest$outboundSchema.parse(revocationRequest),
  );
}

export function revocationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevocationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevocationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevocationRequest' from JSON`,
  );
}
