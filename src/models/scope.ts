/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";
import {
  TaggedValue,
  TaggedValue$inboundSchema,
  TaggedValue$Outbound,
  TaggedValue$outboundSchema,
} from "./taggedvalue.js";

export type Scope = {
  /**
   * The name of the scope.
   */
  name?: string | undefined;
  /**
   * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
   */
  defaultEntry?: boolean | undefined;
  /**
   * The description about the scope.
   */
  description?: string | undefined;
  /**
   * The descriptions about this scope in multiple languages.
   */
  descriptions?: Array<TaggedValue> | undefined;
  /**
   * The attributes of the scope.
   */
  attributes?: Array<Pair> | undefined;
};

/** @internal */
export const Scope$inboundSchema: z.ZodType<Scope, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
    defaultEntry: z.boolean().optional(),
    description: z.string().optional(),
    descriptions: z.array(TaggedValue$inboundSchema).optional(),
    attributes: z.array(Pair$inboundSchema).optional(),
  });

/** @internal */
export type Scope$Outbound = {
  name?: string | undefined;
  defaultEntry?: boolean | undefined;
  description?: string | undefined;
  descriptions?: Array<TaggedValue$Outbound> | undefined;
  attributes?: Array<Pair$Outbound> | undefined;
};

/** @internal */
export const Scope$outboundSchema: z.ZodType<
  Scope$Outbound,
  z.ZodTypeDef,
  Scope
> = z.object({
  name: z.string().optional(),
  defaultEntry: z.boolean().optional(),
  description: z.string().optional(),
  descriptions: z.array(TaggedValue$outboundSchema).optional(),
  attributes: z.array(Pair$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
  /** @deprecated use `Scope$Outbound` instead. */
  export type Outbound = Scope$Outbound;
}

export function scopeToJSON(scope: Scope): string {
  return JSON.stringify(Scope$outboundSchema.parse(scope));
}

export function scopeFromJSON(
  jsonString: string,
): SafeParseResult<Scope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scope' from JSON`,
  );
}
