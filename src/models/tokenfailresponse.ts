/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const TokenFailResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type TokenFailResponseAction = ClosedEnum<
  typeof TokenFailResponseAction
>;

export type TokenFailResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: TokenFailResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter. See description for details.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const TokenFailResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof TokenFailResponseAction
> = z.nativeEnum(TokenFailResponseAction);

/** @internal */
export const TokenFailResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof TokenFailResponseAction
> = TokenFailResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenFailResponseAction$ {
  /** @deprecated use `TokenFailResponseAction$inboundSchema` instead. */
  export const inboundSchema = TokenFailResponseAction$inboundSchema;
  /** @deprecated use `TokenFailResponseAction$outboundSchema` instead. */
  export const outboundSchema = TokenFailResponseAction$outboundSchema;
}

/** @internal */
export const TokenFailResponse$inboundSchema: z.ZodType<
  TokenFailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenFailResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type TokenFailResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const TokenFailResponse$outboundSchema: z.ZodType<
  TokenFailResponse$Outbound,
  z.ZodTypeDef,
  TokenFailResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenFailResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenFailResponse$ {
  /** @deprecated use `TokenFailResponse$inboundSchema` instead. */
  export const inboundSchema = TokenFailResponse$inboundSchema;
  /** @deprecated use `TokenFailResponse$outboundSchema` instead. */
  export const outboundSchema = TokenFailResponse$outboundSchema;
  /** @deprecated use `TokenFailResponse$Outbound` instead. */
  export type Outbound = TokenFailResponse$Outbound;
}

export function tokenFailResponseToJSON(
  tokenFailResponse: TokenFailResponse,
): string {
  return JSON.stringify(
    TokenFailResponse$outboundSchema.parse(tokenFailResponse),
  );
}

export function tokenFailResponseFromJSON(
  jsonString: string,
): SafeParseResult<TokenFailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenFailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenFailResponse' from JSON`,
  );
}
