/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the JWT issuer metadata
 *
 * @remarks
 * endpoint (`/.well-known/jwt-issuer`) should take after getting
 * a response from Authlete's `/vci/jwtissuer` API.
 */
export const VciJwtissuerResponseAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the JWT issuer metadata
 *
 * @remarks
 * endpoint (`/.well-known/jwt-issuer`) should take after getting
 * a response from Authlete's `/vci/jwtissuer` API.
 */
export type VciJwtissuerResponseAction = ClosedEnum<
  typeof VciJwtissuerResponseAction
>;

export type VciJwtissuerResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the JWT issuer metadata
   *
   * @remarks
   * endpoint (`/.well-known/jwt-issuer`) should take after getting
   * a response from Authlete's `/vci/jwtissuer` API.
   */
  action?: VciJwtissuerResponseAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwtissuerResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciJwtissuerResponseAction
> = z.nativeEnum(VciJwtissuerResponseAction);

/** @internal */
export const VciJwtissuerResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciJwtissuerResponseAction
> = VciJwtissuerResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerResponseAction$ {
  /** @deprecated use `VciJwtissuerResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerResponseAction$inboundSchema;
  /** @deprecated use `VciJwtissuerResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerResponseAction$outboundSchema;
}

/** @internal */
export const VciJwtissuerResponse$inboundSchema: z.ZodType<
  VciJwtissuerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwtissuerResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciJwtissuerResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwtissuerResponse$outboundSchema: z.ZodType<
  VciJwtissuerResponse$Outbound,
  z.ZodTypeDef,
  VciJwtissuerResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwtissuerResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwtissuerResponse$ {
  /** @deprecated use `VciJwtissuerResponse$inboundSchema` instead. */
  export const inboundSchema = VciJwtissuerResponse$inboundSchema;
  /** @deprecated use `VciJwtissuerResponse$outboundSchema` instead. */
  export const outboundSchema = VciJwtissuerResponse$outboundSchema;
  /** @deprecated use `VciJwtissuerResponse$Outbound` instead. */
  export type Outbound = VciJwtissuerResponse$Outbound;
}

export function vciJwtissuerResponseToJSON(
  vciJwtissuerResponse: VciJwtissuerResponse,
): string {
  return JSON.stringify(
    VciJwtissuerResponse$outboundSchema.parse(vciJwtissuerResponse),
  );
}

export function vciJwtissuerResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciJwtissuerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwtissuerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwtissuerResponse' from JSON`,
  );
}
