/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

export type VciOfferCreateRequest = {
  /**
   * The flag indicating whether the `authorization_code` object is
   *
   * @remarks
   * included in the `grants` object.
   */
  authorizationCodeGrantIncluded?: boolean | undefined;
  /**
   * The flag indicating whether the `issuer_state` property is
   *
   * @remarks
   * included in the `authorization_code` object in the `grants`
   * object.
   */
  issuerStateIncluded?: boolean | undefined;
  /**
   * The flag to include the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object
   * in the `grants` object.
   */
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  /**
   * The subject associated with the credential offer.
   */
  subject?: string | undefined;
  /**
   * The duration of the credential offer.
   */
  duration?: number | undefined;
  /**
   * The general-purpose arbitrary string.
   */
  context?: string | undefined;
  /**
   * Extra properties to associate with the credential offer.
   */
  properties?: Array<Property> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT
   *
   * @remarks
   * access token.
   */
  jwtAtClaims?: string | undefined;
  /**
   * The time at which the user authentication was performed during
   *
   * @remarks
   * the course of issuing the credential offer.
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication
   *
   * @remarks
   * performed during the course of issuing the credential offer.
   */
  acr?: string | undefined;
  /**
   * The value of the `credential_configuration_ids` array.
   *
   * @remarks
   *
   * ```
   * {
   *   "credential_issuer": "...",
   *   "credential_configuration_ids": [ ... ],
   *   "grants": { ... }
   * }
   * ```
   *
   * This property is mandatory.
   */
  credentialConfigurationIds?: Array<string> | undefined;
  /**
   * The transaction code that should be associated with the credential offer.
   *
   * @remarks
   *
   * If this parameter is not empty and the `preAuthorizedCodeGrantIncluded` parameter is `true`, the
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object will include the `tx_code` object.
   *
   * The length of the value of this parameter will be used as the value of the `length` property in
   * the `tx_code` object.
   *
   * ```
   * {
   *   "credential_issuer": "...",
   *   "credential_configuration_ids": [ ... ],
   *   "grants": {
   *     "urn:ietf:params:oauth:grant-type:pre-authorized_code": {
   *       "pre-authorized_code": "...",
   *       "tx_code": {
   *         "length": length
   *       }
   *     }
   *   }
   * }
   * ```
   */
  txCode?: string | undefined;
  /**
   * The input mode of the transaction code.
   *
   * @remarks
   *
   * The value of this property will be used as the value of the `input_mode` property in the `tx_code`
   * object.
   *
   * ```
   * {
   *   "credential_issuer": "...",
   *   "credential_configuration_ids": [ ... ],
   *   "grants": {
   *     "urn:ietf:params:oauth:grant-type:pre-authorized_code": {
   *       "pre-authorized_code": "...",
   *       "tx_code": {
   *         "length": length,
   *         "input_mode": "..."
   *       }
   *     }
   *   }
   * }
   * ```
   */
  txCodeInputMode?: string | undefined;
  /**
   * The description of the transaction code.
   *
   * @remarks
   *
   * The value of this property will be used as the value of the `description` property in the `tx_code`
   * object.
   *
   * ```
   * {
   *   "credential_issuer": "...",
   *   "credential_configuration_ids": [ ... ],
   *   "grants": {
   *     "urn:ietf:params:oauth:grant-type:pre-authorized_code": {
   *       "pre-authorized_code": "...",
   *       "tx_code": {
   *         "length": length,
   *         "description": "..."
   *       }
   *     }
   *   }
   * }
   * ```
   */
  txCodeDescription?: string | undefined;
};

/** @internal */
export const VciOfferCreateRequest$inboundSchema: z.ZodType<
  VciOfferCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  subject: z.string().optional(),
  duration: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  credentialConfigurationIds: z.array(z.string()).optional(),
  txCode: z.string().optional(),
  txCodeInputMode: z.string().optional(),
  txCodeDescription: z.string().optional(),
});

/** @internal */
export type VciOfferCreateRequest$Outbound = {
  authorizationCodeGrantIncluded?: boolean | undefined;
  issuerStateIncluded?: boolean | undefined;
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  subject?: string | undefined;
  duration?: number | undefined;
  context?: string | undefined;
  properties?: Array<Property$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
  credentialConfigurationIds?: Array<string> | undefined;
  txCode?: string | undefined;
  txCodeInputMode?: string | undefined;
  txCodeDescription?: string | undefined;
};

/** @internal */
export const VciOfferCreateRequest$outboundSchema: z.ZodType<
  VciOfferCreateRequest$Outbound,
  z.ZodTypeDef,
  VciOfferCreateRequest
> = z.object({
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  subject: z.string().optional(),
  duration: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  credentialConfigurationIds: z.array(z.string()).optional(),
  txCode: z.string().optional(),
  txCodeInputMode: z.string().optional(),
  txCodeDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciOfferCreateRequest$ {
  /** @deprecated use `VciOfferCreateRequest$inboundSchema` instead. */
  export const inboundSchema = VciOfferCreateRequest$inboundSchema;
  /** @deprecated use `VciOfferCreateRequest$outboundSchema` instead. */
  export const outboundSchema = VciOfferCreateRequest$outboundSchema;
  /** @deprecated use `VciOfferCreateRequest$Outbound` instead. */
  export type Outbound = VciOfferCreateRequest$Outbound;
}

export function vciOfferCreateRequestToJSON(
  vciOfferCreateRequest: VciOfferCreateRequest,
): string {
  return JSON.stringify(
    VciOfferCreateRequest$outboundSchema.parse(vciOfferCreateRequest),
  );
}

export function vciOfferCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciOfferCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciOfferCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciOfferCreateRequest' from JSON`,
  );
}
