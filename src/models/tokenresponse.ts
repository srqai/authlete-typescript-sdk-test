/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";
import {
  TokenInfo,
  TokenInfo$inboundSchema,
  TokenInfo$Outbound,
  TokenInfo$outboundSchema,
} from "./tokeninfo.js";
import {
  TokenType,
  TokenType$inboundSchema,
  TokenType$outboundSchema,
} from "./tokentype.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const TokenResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidClient: "INVALID_CLIENT",
  BadRequest: "BAD_REQUEST",
  Password: "PASSWORD",
  Ok: "OK",
  TokenExchange: "TOKEN_EXCHANGE",
  JwtBearer: "JWT_BEARER",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type TokenResponseAction = ClosedEnum<typeof TokenResponseAction>;

export type TokenResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: TokenResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The value of `username` request parameter in the token request.
   *
   * @remarks
   * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
   * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  username?: string | undefined;
  /**
   * The value of `password` request parameter in the token request.
   *
   * @remarks
   * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
   * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  password?: string | undefined;
  /**
   * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
   *
   * @remarks
   *
   * This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
   */
  ticket?: string | undefined;
  /**
   * The newly issued access token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued refresh token.
   */
  refreshToken?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued refresh token in seconds.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
   *
   * @remarks
   * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
   */
  idToken?: string | undefined;
  /**
   * The grant type of the token request.
   */
  grantType?: string | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The subject (= resource owner's ID) of the access token.
   *
   * @remarks
   * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
   * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
   * is not associated with any specific end-user.
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   */
  scopes?: Array<string> | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   * This parameter is `null` when no extra property is associated with the issued access token.
   */
  properties?: Array<Property> | undefined;
  /**
   * The newly issued access token in JWT format. If the authorization server is configured
   *
   * @remarks
   * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
   * non-null value), a JWT-based access token is issued along with the original random-string
   * one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters in the token request.
   *
   * @remarks
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
   *
   * @remarks
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<Pair> | undefined;
  /**
   * The client authentication method that was performed at the token endpoint.
   *
   * @remarks
   */
  clientAuthMethod?: string | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The audiences on the token exchange request
   *
   * @remarks
   */
  audiences?: Array<string> | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  requestedTokenType?: TokenType | undefined;
  subjectToken?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  subjectTokenType?: TokenType | undefined;
  subjectTokenInfo?: TokenInfo | undefined;
  actorToken?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  actorTokenType?: TokenType | undefined;
  actorTokenInfo?: TokenInfo | undefined;
  /**
   * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
   *
   * @remarks
   */
  assertion?: string | undefined;
  /**
   * Indicate whether the previous refresh token that had been kept in the database for a short time was used
   *
   * @remarks
   */
  previousRefreshTokenUsed?: boolean | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * Duration of the `c_nonce` in seconds.
   *
   * @remarks
   */
  cnonceDuration?: number | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
  /**
   * Get the `c_nonce`.
   *
   * @remarks
   */
  cnonce?: string | undefined;
  /**
   * Get the time at which the `c_nonce` expires in milliseconds since
   *
   * @remarks
   * the Unix epoch (1970-01-01).
   */
  cnonceExpiresAt?: number | undefined;
  /**
   * Get the names of the claims that the authorization request (which resulted
   *
   * @remarks
   * in generation of the access token) requested to be embedded in ID tokens.
   */
  requestedIdTokenClaims?: Array<string> | undefined;
  /**
   * Scopes associated with the refresh token.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
  /**
   * The session ID, which is the ID of the user's authentication session, associated with a newly
   *
   * @remarks
   * created access token.
   */
  sessionId?: string | undefined;
  /**
   * If the response from the `/auth/token` API contains the `deviceSecret` parameter, its value should
   *
   * @remarks
   * be used as the value of this `deviceSecret` request parameter to the `/nativesso` API. The authorization
   * server may choose to issue a new device secret; in that case, it is free to generate a new device
   * secret and specify the new value.
   *
   * If the response from the `/auth/token` API does not contain the `deviceSecret` parameter, or
   * if its value is invalid, the authorization server must generate a new device secret and specify
   * it in the deviceSecret parameter to the `/nativesso` API.
   *
   * The specified value is used as the value of the `device_secret` property in the token response.
   */
  deviceSecret?: string | undefined;
  /**
   * The authorization server should compute the hash value of the device secret based on its own logic
   *
   * @remarks
   * and specify the computed hash as the value of this `deviceSecretHash` request parameter to the
   * `/nativesso` API.
   *
   * When the `deviceSecretHash` parameter is omitted, the implementation of the `/nativesso` API
   * generates the device secret hash by computing the SHA-256 hash of the device secret and encoding
   * it with base64url. Note that this hash computation logic is not a rule defined in the Native SSO
   * specification; rather, it is Authlete-specific fallback logic used when the `deviceSecretHash`
   * parameter is omitted.
   */
  deviceSecretHash?: string | undefined;
};

/** @internal */
export const TokenResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof TokenResponseAction
> = z.nativeEnum(TokenResponseAction);

/** @internal */
export const TokenResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof TokenResponseAction
> = TokenResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenResponseAction$ {
  /** @deprecated use `TokenResponseAction$inboundSchema` instead. */
  export const inboundSchema = TokenResponseAction$inboundSchema;
  /** @deprecated use `TokenResponseAction$outboundSchema` instead. */
  export const outboundSchema = TokenResponseAction$outboundSchema;
}

/** @internal */
export const TokenResponse$inboundSchema: z.ZodType<
  TokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  ticket: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  grantType: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(Property$inboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  serviceAttributes: z.array(Pair$inboundSchema).optional(),
  clientAttributes: z.array(Pair$inboundSchema).optional(),
  clientAuthMethod: z.string().optional(),
  grantId: z.string().optional(),
  audiences: z.array(z.string()).optional(),
  requestedTokenType: TokenType$inboundSchema.optional(),
  subjectToken: z.string().optional(),
  subjectTokenType: TokenType$inboundSchema.optional(),
  subjectTokenInfo: TokenInfo$inboundSchema.optional(),
  actorToken: z.string().optional(),
  actorTokenType: TokenType$inboundSchema.optional(),
  actorTokenInfo: TokenInfo$inboundSchema.optional(),
  assertion: z.string().optional(),
  previousRefreshTokenUsed: z.boolean().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonce: z.string().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  requestedIdTokenClaims: z.array(z.string()).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
  sessionId: z.string().optional(),
  deviceSecret: z.string().optional(),
  deviceSecretHash: z.string().optional(),
});

/** @internal */
export type TokenResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  username?: string | undefined;
  password?: string | undefined;
  ticket?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  refreshToken?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idToken?: string | undefined;
  grantType?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<Property$Outbound> | undefined;
  jwtAccessToken?: string | undefined;
  resources?: Array<string> | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  serviceAttributes?: Array<Pair$Outbound> | undefined;
  clientAttributes?: Array<Pair$Outbound> | undefined;
  clientAuthMethod?: string | undefined;
  grantId?: string | undefined;
  audiences?: Array<string> | undefined;
  requestedTokenType?: string | undefined;
  subjectToken?: string | undefined;
  subjectTokenType?: string | undefined;
  subjectTokenInfo?: TokenInfo$Outbound | undefined;
  actorToken?: string | undefined;
  actorTokenType?: string | undefined;
  actorTokenInfo?: TokenInfo$Outbound | undefined;
  assertion?: string | undefined;
  previousRefreshTokenUsed?: boolean | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  cnonceDuration?: number | undefined;
  dpopNonce?: string | undefined;
  cnonce?: string | undefined;
  cnonceExpiresAt?: number | undefined;
  requestedIdTokenClaims?: Array<string> | undefined;
  refreshTokenScopes?: Array<string> | undefined;
  sessionId?: string | undefined;
  deviceSecret?: string | undefined;
  deviceSecretHash?: string | undefined;
};

/** @internal */
export const TokenResponse$outboundSchema: z.ZodType<
  TokenResponse$Outbound,
  z.ZodTypeDef,
  TokenResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  username: z.string().optional(),
  password: z.string().optional(),
  ticket: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshToken: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  grantType: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(Property$outboundSchema).optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
  serviceAttributes: z.array(Pair$outboundSchema).optional(),
  clientAttributes: z.array(Pair$outboundSchema).optional(),
  clientAuthMethod: z.string().optional(),
  grantId: z.string().optional(),
  audiences: z.array(z.string()).optional(),
  requestedTokenType: TokenType$outboundSchema.optional(),
  subjectToken: z.string().optional(),
  subjectTokenType: TokenType$outboundSchema.optional(),
  subjectTokenInfo: TokenInfo$outboundSchema.optional(),
  actorToken: z.string().optional(),
  actorTokenType: TokenType$outboundSchema.optional(),
  actorTokenInfo: TokenInfo$outboundSchema.optional(),
  assertion: z.string().optional(),
  previousRefreshTokenUsed: z.boolean().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  cnonceDuration: z.number().int().optional(),
  dpopNonce: z.string().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  requestedIdTokenClaims: z.array(z.string()).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
  sessionId: z.string().optional(),
  deviceSecret: z.string().optional(),
  deviceSecretHash: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenResponse$ {
  /** @deprecated use `TokenResponse$inboundSchema` instead. */
  export const inboundSchema = TokenResponse$inboundSchema;
  /** @deprecated use `TokenResponse$outboundSchema` instead. */
  export const outboundSchema = TokenResponse$outboundSchema;
  /** @deprecated use `TokenResponse$Outbound` instead. */
  export type Outbound = TokenResponse$Outbound;
}

export function tokenResponseToJSON(tokenResponse: TokenResponse): string {
  return JSON.stringify(TokenResponse$outboundSchema.parse(tokenResponse));
}

export function tokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<TokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenResponse' from JSON`,
  );
}
