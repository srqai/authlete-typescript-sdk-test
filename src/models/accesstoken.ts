/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  GrantType,
  GrantType$inboundSchema,
  GrantType$outboundSchema,
} from "./granttype.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

export type AccessToken = {
  /**
   * The hash of the access token.
   */
  accessTokenHash?: string | undefined;
  /**
   * The timestamp at which the access token will expire.
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The hash of the refresh token.
   */
  refreshTokenHash?: string | undefined;
  /**
   * The timestamp at which the refresh token will expire.
   */
  refreshTokenExpiresAt?: number | undefined;
  /**
   * The timestamp at which the access token was first created.
   *
   * @remarks
   */
  createdAt?: number | undefined;
  /**
   * The timestamp at which the access token was last refreshed using the refresh token.
   *
   * @remarks
   */
  lastRefreshedAt?: number | undefined;
  /**
   * The ID of the client associated with the access token.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The subject (= unique user ID) associated with the access token.
   *
   * @remarks
   */
  subject?: string | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  grantType?: GrantType | undefined;
  /**
   * The scopes associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<Property> | undefined;
  /**
   * The scopes associated with the refresh token.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AccessToken$inboundSchema: z.ZodType<
  AccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessTokenHash: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  refreshTokenHash: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  createdAt: z.number().int().optional(),
  lastRefreshedAt: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  grantType: GrantType$inboundSchema.optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(Property$inboundSchema).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/** @internal */
export type AccessToken$Outbound = {
  accessTokenHash?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  refreshTokenHash?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
  createdAt?: number | undefined;
  lastRefreshedAt?: number | undefined;
  clientId?: number | undefined;
  subject?: string | undefined;
  grantType?: string | undefined;
  scopes?: Array<string> | undefined;
  properties?: Array<Property$Outbound> | undefined;
  refreshTokenScopes?: Array<string> | undefined;
};

/** @internal */
export const AccessToken$outboundSchema: z.ZodType<
  AccessToken$Outbound,
  z.ZodTypeDef,
  AccessToken
> = z.object({
  accessTokenHash: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  refreshTokenHash: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
  createdAt: z.number().int().optional(),
  lastRefreshedAt: z.number().int().optional(),
  clientId: z.number().int().optional(),
  subject: z.string().optional(),
  grantType: GrantType$outboundSchema.optional(),
  scopes: z.array(z.string()).optional(),
  properties: z.array(Property$outboundSchema).optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessToken$ {
  /** @deprecated use `AccessToken$inboundSchema` instead. */
  export const inboundSchema = AccessToken$inboundSchema;
  /** @deprecated use `AccessToken$outboundSchema` instead. */
  export const outboundSchema = AccessToken$outboundSchema;
  /** @deprecated use `AccessToken$Outbound` instead. */
  export type Outbound = AccessToken$Outbound;
}

export function accessTokenToJSON(accessToken: AccessToken): string {
  return JSON.stringify(AccessToken$outboundSchema.parse(accessToken));
}

export function accessTokenFromJSON(
  jsonString: string,
): SafeParseResult<AccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessToken' from JSON`,
  );
}
