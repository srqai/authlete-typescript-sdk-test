/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Holds information about a key managed in an HSM (Hardware Security Module)
 *
 * @remarks
 */
export type Hsk = {
  /**
   * The key type (EC or RSA)
   *
   * @remarks
   */
  kty?: string | undefined;
  /**
   * Get the use of the key on the HSM.
   *
   * @remarks
   * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
   * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
   */
  use?: string | undefined;
  /**
   * Key ID for the key on the HSM.
   *
   * @remarks
   */
  kid?: string | undefined;
  /**
   * The name of the HSM.
   *
   * @remarks
   * The identifier for the HSM that sits behind the Authlete server. For example, "google".
   */
  hsmName?: string | undefined;
  /**
   * The handle for the key on the HSM.
   *
   * @remarks
   * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
   */
  handle?: string | undefined;
  /**
   * The public key that corresponds to the key on the HSM.
   *
   * @remarks
   */
  publicKey?: string | undefined;
  /**
   * The algorithm of the key on the HSM. When the key use is `"sig"`, the algorithm represents a
   *
   * @remarks
   * signing algorithm such as `"ES256"`. When the key use is `"enc"`, the algorithm represents an
   * encryption algorithm such as `"RSA-OAEP-256"`.
   */
  alg?: string | undefined;
};

/** @internal */
export const Hsk$inboundSchema: z.ZodType<Hsk, z.ZodTypeDef, unknown> = z
  .object({
    kty: z.string().optional(),
    use: z.string().optional(),
    kid: z.string().optional(),
    hsmName: z.string().optional(),
    handle: z.string().optional(),
    publicKey: z.string().optional(),
    alg: z.string().optional(),
  });

/** @internal */
export type Hsk$Outbound = {
  kty?: string | undefined;
  use?: string | undefined;
  kid?: string | undefined;
  hsmName?: string | undefined;
  handle?: string | undefined;
  publicKey?: string | undefined;
  alg?: string | undefined;
};

/** @internal */
export const Hsk$outboundSchema: z.ZodType<Hsk$Outbound, z.ZodTypeDef, Hsk> = z
  .object({
    kty: z.string().optional(),
    use: z.string().optional(),
    kid: z.string().optional(),
    hsmName: z.string().optional(),
    handle: z.string().optional(),
    publicKey: z.string().optional(),
    alg: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Hsk$ {
  /** @deprecated use `Hsk$inboundSchema` instead. */
  export const inboundSchema = Hsk$inboundSchema;
  /** @deprecated use `Hsk$outboundSchema` instead. */
  export const outboundSchema = Hsk$outboundSchema;
  /** @deprecated use `Hsk$Outbound` instead. */
  export type Outbound = Hsk$Outbound;
}

export function hskToJSON(hsk: Hsk): string {
  return JSON.stringify(Hsk$outboundSchema.parse(hsk));
}

export function hskFromJSON(
  jsonString: string,
): SafeParseResult<Hsk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Hsk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Hsk' from JSON`,
  );
}
