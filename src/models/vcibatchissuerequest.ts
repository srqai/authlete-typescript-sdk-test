/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CredentialIssuanceOrder,
  CredentialIssuanceOrder$inboundSchema,
  CredentialIssuanceOrder$Outbound,
  CredentialIssuanceOrder$outboundSchema,
} from "./credentialissuanceorder.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type VciBatchIssueRequest = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The instructions for issuance of credentials and/or transaction IDs.
   */
  orders?: Array<CredentialIssuanceOrder> | undefined;
};

/** @internal */
export const VciBatchIssueRequest$inboundSchema: z.ZodType<
  VciBatchIssueRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  orders: z.array(CredentialIssuanceOrder$inboundSchema).optional(),
});

/** @internal */
export type VciBatchIssueRequest$Outbound = {
  accessToken?: string | undefined;
  orders?: Array<CredentialIssuanceOrder$Outbound> | undefined;
};

/** @internal */
export const VciBatchIssueRequest$outboundSchema: z.ZodType<
  VciBatchIssueRequest$Outbound,
  z.ZodTypeDef,
  VciBatchIssueRequest
> = z.object({
  accessToken: z.string().optional(),
  orders: z.array(CredentialIssuanceOrder$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueRequest$ {
  /** @deprecated use `VciBatchIssueRequest$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueRequest$inboundSchema;
  /** @deprecated use `VciBatchIssueRequest$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueRequest$outboundSchema;
  /** @deprecated use `VciBatchIssueRequest$Outbound` instead. */
  export type Outbound = VciBatchIssueRequest$Outbound;
}

export function vciBatchIssueRequestToJSON(
  vciBatchIssueRequest: VciBatchIssueRequest,
): string {
  return JSON.stringify(
    VciBatchIssueRequest$outboundSchema.parse(vciBatchIssueRequest),
  );
}

export function vciBatchIssueRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchIssueRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchIssueRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchIssueRequest' from JSON`,
  );
}
