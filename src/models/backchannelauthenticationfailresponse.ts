/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationFailResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationFailResponseAction = ClosedEnum<
  typeof BackchannelAuthenticationFailResponseAction
>;

export type BackchannelAuthenticationFailResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationFailResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailResponseAction> = z
    .nativeEnum(BackchannelAuthenticationFailResponseAction);

/** @internal */
export const BackchannelAuthenticationFailResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationFailResponseAction> =
    BackchannelAuthenticationFailResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailResponseAction$ {
  /** @deprecated use `BackchannelAuthenticationFailResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailResponseAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailResponseAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationFailResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationFailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationFailResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationFailResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationFailResponse$outboundSchema: z.ZodType<
  BackchannelAuthenticationFailResponse$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationFailResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationFailResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationFailResponse$ {
  /** @deprecated use `BackchannelAuthenticationFailResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationFailResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationFailResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationFailResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationFailResponse$Outbound;
}

export function backchannelAuthenticationFailResponseToJSON(
  backchannelAuthenticationFailResponse: BackchannelAuthenticationFailResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationFailResponse$outboundSchema.parse(
      backchannelAuthenticationFailResponse,
    ),
  );
}

export function backchannelAuthenticationFailResponseFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationFailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationFailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationFailResponse' from JSON`,
  );
}
