/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";

/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export const JweEnc = {
  A128CbcHs256: "A128CBC_HS256",
  A192CbcHs384: "A192CBC_HS384",
  A256CbcHs512: "A256CBC_HS512",
  A128Gcm: "A128GCM",
  A192Gcm: "A192GCM",
  A256Gcm: "A256GCM",
} as const;
/**
 * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 *
 * @remarks
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
export type JweEnc = ClosedEnum<typeof JweEnc>;

/** @internal */
export const JweEnc$inboundSchema: z.ZodNativeEnum<typeof JweEnc> = z
  .nativeEnum(JweEnc);

/** @internal */
export const JweEnc$outboundSchema: z.ZodNativeEnum<typeof JweEnc> =
  JweEnc$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JweEnc$ {
  /** @deprecated use `JweEnc$inboundSchema` instead. */
  export const inboundSchema = JweEnc$inboundSchema;
  /** @deprecated use `JweEnc$outboundSchema` instead. */
  export const outboundSchema = JweEnc$outboundSchema;
}
