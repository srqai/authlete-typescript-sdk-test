/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type NativeSsoRequest = {
  /**
   * The value of this parameter should be: (a) the value of the `jwtAccessToken` parameter in a response
   *
   * @remarks
   * from the `/auth/token` API when the value is available, or (b) the value of the `accessToken`
   * parameter in the response from the `/auth/token` API when the `jwtAccessToken` parameter is not
   * available.
   */
  accessToken: string;
  /**
   * The value of this parameter should be the value of the `refreshToken` parameter in a response
   *
   * @remarks
   * from the `/auth/token` API.
   */
  refreshToken?: string | undefined;
  /**
   * The value that should be used as the value of the `sub` claim of the ID token. This parameter
   *
   * @remarks
   * is optional. When omitted, the value of the subject associated with the access token is used.
   */
  sub?: string | undefined;
  /**
   * Additional claims that should be embedded in the payload part of the ID token. The format is a
   *
   * @remarks
   * JSON object. This parameter is optional.
   */
  claims?: string | undefined;
  /**
   * Additional parameters that should be embedded in the JWS header of the ID token. The format is
   *
   * @remarks
   * a JSON object. This parameter is optional.
   */
  idtHeaderParams?: string | undefined;
  /**
   * The type of the `aud` claim of the ID token being issued. Valid values of this parameter are
   *
   * @remarks
   * as follows:
   *
   * - `"array"`
   *   The type of the `aud` claim becomes an array of strings.
   *
   * - `"string"`
   *   The type of the `aud` claim becomes a single string.
   *
   * This parameter is optional, and the default value when omitted is `"array"`. This parameter takes
   * precedence over the `idTokenAudType` property of `Service`.
   */
  idTokenAudType?: string | undefined;
  /**
   * The device secret. The value of this parameter should be the value of the `deviceSecret` parameter
   *
   * @remarks
   * in the response from the `/auth/token` API, if the parameter is present. Otherwise, the authorization
   * server should generate a new device secret and specify it as the value of this parameter.
   *
   * The specified device secret is included as the value of the `device_secret` property in the token
   * response prepared by the `/nativesso` API.
   *
   * Additionally, if the `deviceSecretHash` request parameter is omitted, the device secret is used
   * to compute the value of the `ds_hash` claim. In this case, the `ds_hash` claim will be the
   * base64url-encoded SHA-256 hash of the device secret.
   */
  deviceSecret: string;
  /**
   * The device secret hash. The specified device secret hash is included as the value of the `ds_hash`
   *
   * @remarks
   * claim in the ID token generated by the `/nativesso` API. If the `deviceSecretHash` request parameter
   * is omitted, the value of the `deviceSecret` request parameter is used to compute the hash.
   */
  deviceSecretHash?: string | undefined;
};

/** @internal */
export const NativeSsoRequest$inboundSchema: z.ZodType<
  NativeSsoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  refreshToken: z.string().optional(),
  sub: z.string().optional(),
  claims: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  idTokenAudType: z.string().optional(),
  deviceSecret: z.string(),
  deviceSecretHash: z.string().optional(),
});

/** @internal */
export type NativeSsoRequest$Outbound = {
  accessToken: string;
  refreshToken?: string | undefined;
  sub?: string | undefined;
  claims?: string | undefined;
  idtHeaderParams?: string | undefined;
  idTokenAudType?: string | undefined;
  deviceSecret: string;
  deviceSecretHash?: string | undefined;
};

/** @internal */
export const NativeSsoRequest$outboundSchema: z.ZodType<
  NativeSsoRequest$Outbound,
  z.ZodTypeDef,
  NativeSsoRequest
> = z.object({
  accessToken: z.string(),
  refreshToken: z.string().optional(),
  sub: z.string().optional(),
  claims: z.string().optional(),
  idtHeaderParams: z.string().optional(),
  idTokenAudType: z.string().optional(),
  deviceSecret: z.string(),
  deviceSecretHash: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NativeSsoRequest$ {
  /** @deprecated use `NativeSsoRequest$inboundSchema` instead. */
  export const inboundSchema = NativeSsoRequest$inboundSchema;
  /** @deprecated use `NativeSsoRequest$outboundSchema` instead. */
  export const outboundSchema = NativeSsoRequest$outboundSchema;
  /** @deprecated use `NativeSsoRequest$Outbound` instead. */
  export type Outbound = NativeSsoRequest$Outbound;
}

export function nativeSsoRequestToJSON(
  nativeSsoRequest: NativeSsoRequest,
): string {
  return JSON.stringify(
    NativeSsoRequest$outboundSchema.parse(nativeSsoRequest),
  );
}

export function nativeSsoRequestFromJSON(
  jsonString: string,
): SafeParseResult<NativeSsoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NativeSsoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NativeSsoRequest' from JSON`,
  );
}
