/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TokenRevokeResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The number of tokens revoked
   */
  count?: number | undefined;
};

/** @internal */
export const TokenRevokeResponse$inboundSchema: z.ZodType<
  TokenRevokeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type TokenRevokeResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  count?: number | undefined;
};

/** @internal */
export const TokenRevokeResponse$outboundSchema: z.ZodType<
  TokenRevokeResponse$Outbound,
  z.ZodTypeDef,
  TokenRevokeResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenRevokeResponse$ {
  /** @deprecated use `TokenRevokeResponse$inboundSchema` instead. */
  export const inboundSchema = TokenRevokeResponse$inboundSchema;
  /** @deprecated use `TokenRevokeResponse$outboundSchema` instead. */
  export const outboundSchema = TokenRevokeResponse$outboundSchema;
  /** @deprecated use `TokenRevokeResponse$Outbound` instead. */
  export type Outbound = TokenRevokeResponse$Outbound;
}

export function tokenRevokeResponseToJSON(
  tokenRevokeResponse: TokenRevokeResponse,
): string {
  return JSON.stringify(
    TokenRevokeResponse$outboundSchema.parse(tokenRevokeResponse),
  );
}

export function tokenRevokeResponseFromJSON(
  jsonString: string,
): SafeParseResult<TokenRevokeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenRevokeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenRevokeResponse' from JSON`,
  );
}
