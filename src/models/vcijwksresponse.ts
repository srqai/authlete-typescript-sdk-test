/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the JWK Set document
 *
 * @remarks
 * endpoint of the credential issuer should take after getting a
 * response from Authlete's `/vci/jwks` API.
 */
export const VciJwksResponseAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the implementation of the JWK Set document
 *
 * @remarks
 * endpoint of the credential issuer should take after getting a
 * response from Authlete's `/vci/jwks` API.
 */
export type VciJwksResponseAction = ClosedEnum<typeof VciJwksResponseAction>;

export type VciJwksResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the JWK Set document
   *
   * @remarks
   * endpoint of the credential issuer should take after getting a
   * response from Authlete's `/vci/jwks` API.
   */
  action?: VciJwksResponseAction | undefined;
  /**
   * Get the content that the implementation of the credential issuer
   *
   * @remarks
   * metadata endpoint should use when it constructs a response.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwksResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciJwksResponseAction
> = z.nativeEnum(VciJwksResponseAction);

/** @internal */
export const VciJwksResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciJwksResponseAction
> = VciJwksResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksResponseAction$ {
  /** @deprecated use `VciJwksResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciJwksResponseAction$inboundSchema;
  /** @deprecated use `VciJwksResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciJwksResponseAction$outboundSchema;
}

/** @internal */
export const VciJwksResponse$inboundSchema: z.ZodType<
  VciJwksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwksResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciJwksResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciJwksResponse$outboundSchema: z.ZodType<
  VciJwksResponse$Outbound,
  z.ZodTypeDef,
  VciJwksResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciJwksResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciJwksResponse$ {
  /** @deprecated use `VciJwksResponse$inboundSchema` instead. */
  export const inboundSchema = VciJwksResponse$inboundSchema;
  /** @deprecated use `VciJwksResponse$outboundSchema` instead. */
  export const outboundSchema = VciJwksResponse$outboundSchema;
  /** @deprecated use `VciJwksResponse$Outbound` instead. */
  export type Outbound = VciJwksResponse$Outbound;
}

export function vciJwksResponseToJSON(
  vciJwksResponse: VciJwksResponse,
): string {
  return JSON.stringify(VciJwksResponse$outboundSchema.parse(vciJwksResponse));
}

export function vciJwksResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciJwksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciJwksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciJwksResponse' from JSON`,
  );
}
