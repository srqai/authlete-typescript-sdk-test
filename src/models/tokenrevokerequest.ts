/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TokenRevokeRequest = {
  /**
   * The identifier of an access token to revoke
   *
   * @remarks
   *
   * The hash of an access token is recognized as an identifier as well as the access token itself.
   */
  accessTokenIdentifier?: string | undefined;
  /**
   * The identifier of a refresh token to revoke.
   *
   * @remarks
   *
   * The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
   */
  refreshTokenIdentifier?: string | undefined;
  /**
   * The client ID of the access token to be revoked.
   *
   * @remarks
   *
   * Both the numeric client ID and the alias are recognized as an identifier
   * of a client.
   */
  clientIdentifier?: string | undefined;
  /**
   * The subject of a resource owner.
   *
   * @remarks
   */
  subject?: string | undefined;
};

/** @internal */
export const TokenRevokeRequest$inboundSchema: z.ZodType<
  TokenRevokeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessTokenIdentifier: z.string().optional(),
  refreshTokenIdentifier: z.string().optional(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
});

/** @internal */
export type TokenRevokeRequest$Outbound = {
  accessTokenIdentifier?: string | undefined;
  refreshTokenIdentifier?: string | undefined;
  clientIdentifier?: string | undefined;
  subject?: string | undefined;
};

/** @internal */
export const TokenRevokeRequest$outboundSchema: z.ZodType<
  TokenRevokeRequest$Outbound,
  z.ZodTypeDef,
  TokenRevokeRequest
> = z.object({
  accessTokenIdentifier: z.string().optional(),
  refreshTokenIdentifier: z.string().optional(),
  clientIdentifier: z.string().optional(),
  subject: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenRevokeRequest$ {
  /** @deprecated use `TokenRevokeRequest$inboundSchema` instead. */
  export const inboundSchema = TokenRevokeRequest$inboundSchema;
  /** @deprecated use `TokenRevokeRequest$outboundSchema` instead. */
  export const outboundSchema = TokenRevokeRequest$outboundSchema;
  /** @deprecated use `TokenRevokeRequest$Outbound` instead. */
  export type Outbound = TokenRevokeRequest$Outbound;
}

export function tokenRevokeRequestToJSON(
  tokenRevokeRequest: TokenRevokeRequest,
): string {
  return JSON.stringify(
    TokenRevokeRequest$outboundSchema.parse(tokenRevokeRequest),
  );
}

export function tokenRevokeRequestFromJSON(
  jsonString: string,
): SafeParseResult<TokenRevokeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenRevokeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenRevokeRequest' from JSON`,
  );
}
