/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const GMResponseAction = {
  Ok: "OK",
  NoContent: "NO_CONTENT",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  CallerError: "CALLER_ERROR",
  AuthleteError: "AUTHLETE_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type GMResponseAction = ClosedEnum<typeof GMResponseAction>;

export type GMResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: GMResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const GMResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof GMResponseAction
> = z.nativeEnum(GMResponseAction);

/** @internal */
export const GMResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof GMResponseAction
> = GMResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GMResponseAction$ {
  /** @deprecated use `GMResponseAction$inboundSchema` instead. */
  export const inboundSchema = GMResponseAction$inboundSchema;
  /** @deprecated use `GMResponseAction$outboundSchema` instead. */
  export const outboundSchema = GMResponseAction$outboundSchema;
}

/** @internal */
export const GMResponse$inboundSchema: z.ZodType<
  GMResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: GMResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type GMResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const GMResponse$outboundSchema: z.ZodType<
  GMResponse$Outbound,
  z.ZodTypeDef,
  GMResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: GMResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GMResponse$ {
  /** @deprecated use `GMResponse$inboundSchema` instead. */
  export const inboundSchema = GMResponse$inboundSchema;
  /** @deprecated use `GMResponse$outboundSchema` instead. */
  export const outboundSchema = GMResponse$outboundSchema;
  /** @deprecated use `GMResponse$Outbound` instead. */
  export type Outbound = GMResponse$Outbound;
}

export function gMResponseToJSON(gmResponse: GMResponse): string {
  return JSON.stringify(GMResponse$outboundSchema.parse(gmResponse));
}

export function gMResponseFromJSON(
  jsonString: string,
): SafeParseResult<GMResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GMResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GMResponse' from JSON`,
  );
}
