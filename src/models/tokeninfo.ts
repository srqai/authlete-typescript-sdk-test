/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthorizationDetailsElement,
  AuthorizationDetailsElement$inboundSchema,
  AuthorizationDetailsElement$Outbound,
  AuthorizationDetailsElement$outboundSchema,
} from "./authorizationdetailselement.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

export type TokenInfo = {
  /**
   * The client id.
   */
  clientId?: number | undefined;
  /**
   * The alias of the client.
   */
  clientIdAlias?: string | undefined;
  /**
   * Flag specifying if the alias was used to identify the client
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * the resource owner unique id
   */
  subject?: string | undefined;
  /**
   * The scopes granted on the token
   */
  scopes?: Array<string> | undefined;
  /**
   * time which the token expires.
   */
  expiresAt?: number | undefined;
  /**
   * Extra properties associated with the token
   */
  properties?: Array<Property> | undefined;
  /**
   * The array of the resources of the token.
   */
  resources?: Array<string> | undefined;
  authorizationDetails?: AuthorizationDetailsElement | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const TokenInfo$inboundSchema: z.ZodType<
  TokenInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthorizationDetailsElement$inboundSchema.optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type TokenInfo$Outbound = {
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  expiresAt?: number | undefined;
  properties?: Array<Property$Outbound> | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: AuthorizationDetailsElement$Outbound | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const TokenInfo$outboundSchema: z.ZodType<
  TokenInfo$Outbound,
  z.ZodTypeDef,
  TokenInfo
> = z.object({
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  expiresAt: z.number().int().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthorizationDetailsElement$outboundSchema.optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenInfo$ {
  /** @deprecated use `TokenInfo$inboundSchema` instead. */
  export const inboundSchema = TokenInfo$inboundSchema;
  /** @deprecated use `TokenInfo$outboundSchema` instead. */
  export const outboundSchema = TokenInfo$outboundSchema;
  /** @deprecated use `TokenInfo$Outbound` instead. */
  export type Outbound = TokenInfo$Outbound;
}

export function tokenInfoToJSON(tokenInfo: TokenInfo): string {
  return JSON.stringify(TokenInfo$outboundSchema.parse(tokenInfo));
}

export function tokenInfoFromJSON(
  jsonString: string,
): SafeParseResult<TokenInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenInfo' from JSON`,
  );
}
