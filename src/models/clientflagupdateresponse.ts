/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientFlagUpdateResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode: string;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage: string;
};

/** @internal */
export const ClientFlagUpdateResponse$inboundSchema: z.ZodType<
  ClientFlagUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string(),
  resultMessage: z.string(),
});

/** @internal */
export type ClientFlagUpdateResponse$Outbound = {
  resultCode: string;
  resultMessage: string;
};

/** @internal */
export const ClientFlagUpdateResponse$outboundSchema: z.ZodType<
  ClientFlagUpdateResponse$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateResponse
> = z.object({
  resultCode: z.string(),
  resultMessage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateResponse$ {
  /** @deprecated use `ClientFlagUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateResponse$inboundSchema;
  /** @deprecated use `ClientFlagUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateResponse$outboundSchema;
  /** @deprecated use `ClientFlagUpdateResponse$Outbound` instead. */
  export type Outbound = ClientFlagUpdateResponse$Outbound;
}

export function clientFlagUpdateResponseToJSON(
  clientFlagUpdateResponse: ClientFlagUpdateResponse,
): string {
  return JSON.stringify(
    ClientFlagUpdateResponse$outboundSchema.parse(clientFlagUpdateResponse),
  );
}

export function clientFlagUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateResponse' from JSON`,
  );
}
