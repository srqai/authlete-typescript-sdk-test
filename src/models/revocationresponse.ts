/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const RevocationResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidClient: "INVALID_CLIENT",
  BadRequest: "BAD_REQUEST",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type RevocationResponseAction = ClosedEnum<
  typeof RevocationResponseAction
>;

export type RevocationResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: RevocationResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const RevocationResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof RevocationResponseAction
> = z.nativeEnum(RevocationResponseAction);

/** @internal */
export const RevocationResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof RevocationResponseAction
> = RevocationResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevocationResponseAction$ {
  /** @deprecated use `RevocationResponseAction$inboundSchema` instead. */
  export const inboundSchema = RevocationResponseAction$inboundSchema;
  /** @deprecated use `RevocationResponseAction$outboundSchema` instead. */
  export const outboundSchema = RevocationResponseAction$outboundSchema;
}

/** @internal */
export const RevocationResponse$inboundSchema: z.ZodType<
  RevocationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: RevocationResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type RevocationResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const RevocationResponse$outboundSchema: z.ZodType<
  RevocationResponse$Outbound,
  z.ZodTypeDef,
  RevocationResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: RevocationResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevocationResponse$ {
  /** @deprecated use `RevocationResponse$inboundSchema` instead. */
  export const inboundSchema = RevocationResponse$inboundSchema;
  /** @deprecated use `RevocationResponse$outboundSchema` instead. */
  export const outboundSchema = RevocationResponse$outboundSchema;
  /** @deprecated use `RevocationResponse$Outbound` instead. */
  export type Outbound = RevocationResponse$Outbound;
}

export function revocationResponseToJSON(
  revocationResponse: RevocationResponse,
): string {
  return JSON.stringify(
    RevocationResponse$outboundSchema.parse(revocationResponse),
  );
}

export function revocationResponseFromJSON(
  jsonString: string,
): SafeParseResult<RevocationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevocationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevocationResponse' from JSON`,
  );
}
