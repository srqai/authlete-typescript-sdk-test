/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type VciSingleParseRequest = {
  /**
   * The access token that came along with the credential request.
   */
  accessToken?: string | undefined;
  /**
   * The message body of the credential request.
   */
  requestContent?: string | undefined;
};

/** @internal */
export const VciSingleParseRequest$inboundSchema: z.ZodType<
  VciSingleParseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/** @internal */
export type VciSingleParseRequest$Outbound = {
  accessToken?: string | undefined;
  requestContent?: string | undefined;
};

/** @internal */
export const VciSingleParseRequest$outboundSchema: z.ZodType<
  VciSingleParseRequest$Outbound,
  z.ZodTypeDef,
  VciSingleParseRequest
> = z.object({
  accessToken: z.string().optional(),
  requestContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleParseRequest$ {
  /** @deprecated use `VciSingleParseRequest$inboundSchema` instead. */
  export const inboundSchema = VciSingleParseRequest$inboundSchema;
  /** @deprecated use `VciSingleParseRequest$outboundSchema` instead. */
  export const outboundSchema = VciSingleParseRequest$outboundSchema;
  /** @deprecated use `VciSingleParseRequest$Outbound` instead. */
  export type Outbound = VciSingleParseRequest$Outbound;
}

export function vciSingleParseRequestToJSON(
  vciSingleParseRequest: VciSingleParseRequest,
): string {
  return JSON.stringify(
    VciSingleParseRequest$outboundSchema.parse(vciSingleParseRequest),
  );
}

export function vciSingleParseRequestFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleParseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleParseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleParseRequest' from JSON`,
  );
}
