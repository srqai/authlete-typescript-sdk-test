/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Hsk,
  Hsk$inboundSchema,
  Hsk$Outbound,
  Hsk$outboundSchema,
} from "./hsk.js";

/**
 * Result of the API call
 */
export const HskGetResponseAction = {
  Success: "SUCCESS",
  InvalidRequest: "INVALID_REQUEST",
  NotFound: "NOT_FOUND",
  ServerError: "SERVER_ERROR",
} as const;
/**
 * Result of the API call
 */
export type HskGetResponseAction = ClosedEnum<typeof HskGetResponseAction>;

export type HskGetResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * Result of the API call
   */
  action?: HskGetResponseAction | undefined;
  /**
   * Holds information about a key managed in an HSM (Hardware Security Module)
   *
   * @remarks
   */
  hsk?: Hsk | undefined;
};

/** @internal */
export const HskGetResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof HskGetResponseAction
> = z.nativeEnum(HskGetResponseAction);

/** @internal */
export const HskGetResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof HskGetResponseAction
> = HskGetResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetResponseAction$ {
  /** @deprecated use `HskGetResponseAction$inboundSchema` instead. */
  export const inboundSchema = HskGetResponseAction$inboundSchema;
  /** @deprecated use `HskGetResponseAction$outboundSchema` instead. */
  export const outboundSchema = HskGetResponseAction$outboundSchema;
}

/** @internal */
export const HskGetResponse$inboundSchema: z.ZodType<
  HskGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskGetResponseAction$inboundSchema.optional(),
  hsk: Hsk$inboundSchema.optional(),
});

/** @internal */
export type HskGetResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  hsk?: Hsk$Outbound | undefined;
};

/** @internal */
export const HskGetResponse$outboundSchema: z.ZodType<
  HskGetResponse$Outbound,
  z.ZodTypeDef,
  HskGetResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: HskGetResponseAction$outboundSchema.optional(),
  hsk: Hsk$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HskGetResponse$ {
  /** @deprecated use `HskGetResponse$inboundSchema` instead. */
  export const inboundSchema = HskGetResponse$inboundSchema;
  /** @deprecated use `HskGetResponse$outboundSchema` instead. */
  export const outboundSchema = HskGetResponse$outboundSchema;
  /** @deprecated use `HskGetResponse$Outbound` instead. */
  export type Outbound = HskGetResponse$Outbound;
}

export function hskGetResponseToJSON(hskGetResponse: HskGetResponse): string {
  return JSON.stringify(HskGetResponse$outboundSchema.parse(hskGetResponse));
}

export function hskGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<HskGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HskGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HskGetResponse' from JSON`,
  );
}
