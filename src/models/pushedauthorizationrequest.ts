/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PushedAuthorizationRequest = {
  /**
   * The pushed authorization request body received from the client application.
   *
   * @remarks
   *
   * The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
   * the client application.
   */
  parameters: string;
  /**
   * The client ID extracted from `Authorization` header of the pushed request from the client application.
   *
   * @remarks
   */
  clientId?: string | undefined;
  /**
   * The client secret extracted from `Authorization` header of the pushed authorization request from the client application.
   *
   * @remarks
   */
  clientSecret?: string | undefined;
  /**
   * The client certificate from the MTLS connection to pushed authorization endpoint from the client application.
   */
  clientCertificate?: string | undefined;
  /**
   * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
   *
   * @remarks
   */
  clientCertificatePath?: string | undefined;
  /**
   * DPoP Header
   *
   * @remarks
   */
  dpop?: string | undefined;
  /**
   * HTTP Method (for DPoP validation).
   *
   * @remarks
   */
  htm?: string | undefined;
  /**
   * HTTP URL base (for DPoP validation).
   *
   * @remarks
   */
  htu?: string | undefined;
  /**
   * The value of the `OAuth-Client-Attestation` HTTP header, which is defined in the specification
   *
   * @remarks
   * of [OAuth 2.0 Attestation-Based Client Authentication](https://datatracker.ietf.org/doc/draft-ietf-oauth-attestation-based-client-auth/).
   */
  oauthClientAttestation?: string | undefined;
  /**
   * The value of the `OAuth-Client-Attestation-PoP` HTTP header, which is defined in the specification
   *
   * @remarks
   * of [OAuth 2.0 Attestation-Based Client Authentication](https://datatracker.ietf.org/doc/draft-ietf-oauth-attestation-based-client-auth/).
   */
  oauthClientAttestationPop?: string | undefined;
  /**
   * The flag indicating whether to require the DPoP proof JWT to include the `nonce` claim. Even if
   *
   * @remarks
   * the service's `dpopNonceRequired` property is `false`, calling the `/pushed_auth_req` API with
   * this `dpopNonceRequired` parameter `true` will force the Authlete API to check whether the DPoP
   * proof JWT includes the expected `nonce` value.
   */
  dpopNonceRequired?: boolean | undefined;
};

/** @internal */
export const PushedAuthorizationRequest$inboundSchema: z.ZodType<
  PushedAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  oauthClientAttestation: z.string().optional(),
  oauthClientAttestationPop: z.string().optional(),
  dpopNonceRequired: z.boolean().optional(),
});

/** @internal */
export type PushedAuthorizationRequest$Outbound = {
  parameters: string;
  clientId?: string | undefined;
  clientSecret?: string | undefined;
  clientCertificate?: string | undefined;
  clientCertificatePath?: string | undefined;
  dpop?: string | undefined;
  htm?: string | undefined;
  htu?: string | undefined;
  oauthClientAttestation?: string | undefined;
  oauthClientAttestationPop?: string | undefined;
  dpopNonceRequired?: boolean | undefined;
};

/** @internal */
export const PushedAuthorizationRequest$outboundSchema: z.ZodType<
  PushedAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  PushedAuthorizationRequest
> = z.object({
  parameters: z.string(),
  clientId: z.string().optional(),
  clientSecret: z.string().optional(),
  clientCertificate: z.string().optional(),
  clientCertificatePath: z.string().optional(),
  dpop: z.string().optional(),
  htm: z.string().optional(),
  htu: z.string().optional(),
  oauthClientAttestation: z.string().optional(),
  oauthClientAttestationPop: z.string().optional(),
  dpopNonceRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthorizationRequest$ {
  /** @deprecated use `PushedAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = PushedAuthorizationRequest$inboundSchema;
  /** @deprecated use `PushedAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = PushedAuthorizationRequest$outboundSchema;
  /** @deprecated use `PushedAuthorizationRequest$Outbound` instead. */
  export type Outbound = PushedAuthorizationRequest$Outbound;
}

export function pushedAuthorizationRequestToJSON(
  pushedAuthorizationRequest: PushedAuthorizationRequest,
): string {
  return JSON.stringify(
    PushedAuthorizationRequest$outboundSchema.parse(pushedAuthorizationRequest),
  );
}

export function pushedAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthorizationRequest' from JSON`,
  );
}
