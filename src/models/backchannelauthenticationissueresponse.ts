/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const BackchannelAuthenticationIssueResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  InvalidTicket: "INVALID_TICKET",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type BackchannelAuthenticationIssueResponseAction = ClosedEnum<
  typeof BackchannelAuthenticationIssueResponseAction
>;

export type BackchannelAuthenticationIssueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: BackchannelAuthenticationIssueResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued authentication request ID.
   *
   * @remarks
   */
  authReqId?: string | undefined;
  /**
   * The duration of the issued authentication request ID in seconds.
   *
   * @remarks
   */
  expiresIn?: number | undefined;
  /**
   * The minimum amount of time in seconds that the client must wait for between polling
   *
   * @remarks
   * requests to the token endpoint.
   */
  interval?: number | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationIssueResponseAction> = z
    .nativeEnum(BackchannelAuthenticationIssueResponseAction);

/** @internal */
export const BackchannelAuthenticationIssueResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationIssueResponseAction> =
    BackchannelAuthenticationIssueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueResponseAction$ {
  /** @deprecated use `BackchannelAuthenticationIssueResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueResponseAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueResponseAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationIssueResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationIssueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationIssueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  authReqId: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
});

/** @internal */
export type BackchannelAuthenticationIssueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  authReqId?: string | undefined;
  expiresIn?: number | undefined;
  interval?: number | undefined;
};

/** @internal */
export const BackchannelAuthenticationIssueResponse$outboundSchema: z.ZodType<
  BackchannelAuthenticationIssueResponse$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationIssueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationIssueResponseAction$outboundSchema
    .optional(),
  responseContent: z.string().optional(),
  authReqId: z.string().optional(),
  expiresIn: z.number().int().optional(),
  interval: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationIssueResponse$ {
  /** @deprecated use `BackchannelAuthenticationIssueResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationIssueResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationIssueResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationIssueResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationIssueResponse$Outbound;
}

export function backchannelAuthenticationIssueResponseToJSON(
  backchannelAuthenticationIssueResponse:
    BackchannelAuthenticationIssueResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationIssueResponse$outboundSchema.parse(
      backchannelAuthenticationIssueResponse,
    ),
  );
}

export function backchannelAuthenticationIssueResponseFromJSON(
  jsonString: string,
): SafeParseResult<BackchannelAuthenticationIssueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationIssueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BackchannelAuthenticationIssueResponse' from JSON`,
  );
}
