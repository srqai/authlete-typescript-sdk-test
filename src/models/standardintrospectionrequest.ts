/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type StandardIntrospectionRequest = {
  /**
   * Request parameters which comply with the introspection request defined
   *
   * @remarks
   * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
   * RFC 7662.
   *
   * The implementation of the introspection endpoint of your authorization server will receive an
   * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
   * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
   * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
   */
  parameters: string;
  /**
   * Flag indicating whether to include hidden properties in the output.
   *
   * @remarks
   *
   * Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
   * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
   * is set to `true` are not embedded in the standard introspection output.
   *
   * If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
   * API includes all the associated key-value pairs into the output regardless of the value of the
   * hidden attribute.
   */
  withHiddenProperties?: string | undefined;
  /**
   * The URI of the resource server making the introspection request.
   *
   * @remarks
   *
   * If the `rsUri` request parameter is given and the token has audience values, Authlete checks if
   * the value of the `rsUri` request parameter is contained in the audience values. If not contained,
   * Authlete generates an introspection response with the `active` property set to `false`.
   *
   * The `rsUri` request parameter is required when the resource server requests a JWT introspection
   * response, i.e., when the value of the `httpAcceptHeader` request parameter is set to `"application/token-introspection+jwt"`.
   */
  rsUri?: string | undefined;
  /**
   * The value of the `HTTP Accept` header in the introspection request.
   *
   * @remarks
   *
   * If the value of the `httpAcceptHeader` request parameter is `"application/token-introspection+jwt"`,
   * Authlete generates a JWT introspection response. See "[4. Requesting a JWT Response](https://www.rfc-editor.org/rfc/rfc9701.html#section-4)"
   * of "[RFC 9701: JWT Response for OAuth Token Introspection](https://www.rfc-editor.org/rfc/rfc9701.html)"
   * for more details.
   */
  httpAcceptHeader?: string | undefined;
  /**
   * The JWS `alg` algorithm for signing the introspection response. This parameter corresponds to
   *
   * @remarks
   * `introspection_signed_response_alg` defined in "[6. Client Metadata](https://www.rfc-editor.org/rfc/rfc9701.html#section-6)"
   * of "[RFC 9701: JWT Response for OAuth Token Introspection](https://www.rfc-editor.org/rfc/rfc9701.html)".
   *
   * The default value is `RS256`.
   */
  introspectionSignAlg?: string | undefined;
  /**
   * The JWE `alg` algorithm for encrypting the introspection response. This parameter corresponds
   *
   * @remarks
   * to `introspection_encrypted_response_alg` defined in "[6. Client Metadata](https://www.rfc-editor.org/rfc/rfc9701.html#section-6)"
   * of "[RFC 9701: JWT Response for OAuth Token Introspection](https://www.rfc-editor.org/rfc/rfc9701.html)".
   *
   * If the `introspectionEncryptionAlg` request parameter is specified, Authlete generates a JWT
   * introspection response encrypted with the algorithm by this property and the algorithm specified by
   * the `introspectionEncryptionEnc` request parameter.
   */
  introspectionEncryptionAlg?: string | undefined;
  /**
   * The JWE `enc` algorithm for encrypting the introspection response. This parameter corresponds
   *
   * @remarks
   * to `introspection_encrypted_response_enc` defined in "[6. Client Metadata](https://www.rfc-editor.org/rfc/rfc9701.html#section-6)"
   * of "[RFC 9701: JWT Response for OAuth Token Introspection](https://www.rfc-editor.org/rfc/rfc9701.html)".
   *
   * The default value is `A128CBC_HS256`.
   */
  introspectionEncryptionEnc?: string | undefined;
  /**
   * The shared key for signing the introspection response with a symmetric algorithm.
   *
   * @remarks
   *
   * The `sharedKeyForSign` request parameter is required when the introspection response is requested
   * to be signed with a symmetric algorithm.
   */
  sharedKeyForSign?: string | undefined;
  /**
   * The shared key for encrypting the introspection response with a symmetric algorithm.
   *
   * @remarks
   *
   * The `sharedKeyForEncryption` request parameter is required when the introspection response is
   * requested to be encrypted with a symmetric algorithm.
   */
  sharedKeyForEncryption?: string | undefined;
  /**
   * The public key for signing the introspection response with an asymmetric algorithm.
   *
   * @remarks
   *
   * The `publicKeyForEncryption` request parameter is required when the introspection response is
   * requested to be encrypted with an asymmetric algorithm.
   */
  publicKeyForEncryption?: string | undefined;
};

/** @internal */
export const StandardIntrospectionRequest$inboundSchema: z.ZodType<
  StandardIntrospectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  withHiddenProperties: z.string().optional(),
  rsUri: z.string().optional(),
  httpAcceptHeader: z.string().optional(),
  introspectionSignAlg: z.string().optional(),
  introspectionEncryptionAlg: z.string().optional(),
  introspectionEncryptionEnc: z.string().optional(),
  sharedKeyForSign: z.string().optional(),
  sharedKeyForEncryption: z.string().optional(),
  publicKeyForEncryption: z.string().optional(),
});

/** @internal */
export type StandardIntrospectionRequest$Outbound = {
  parameters: string;
  withHiddenProperties?: string | undefined;
  rsUri?: string | undefined;
  httpAcceptHeader?: string | undefined;
  introspectionSignAlg?: string | undefined;
  introspectionEncryptionAlg?: string | undefined;
  introspectionEncryptionEnc?: string | undefined;
  sharedKeyForSign?: string | undefined;
  sharedKeyForEncryption?: string | undefined;
  publicKeyForEncryption?: string | undefined;
};

/** @internal */
export const StandardIntrospectionRequest$outboundSchema: z.ZodType<
  StandardIntrospectionRequest$Outbound,
  z.ZodTypeDef,
  StandardIntrospectionRequest
> = z.object({
  parameters: z.string(),
  withHiddenProperties: z.string().optional(),
  rsUri: z.string().optional(),
  httpAcceptHeader: z.string().optional(),
  introspectionSignAlg: z.string().optional(),
  introspectionEncryptionAlg: z.string().optional(),
  introspectionEncryptionEnc: z.string().optional(),
  sharedKeyForSign: z.string().optional(),
  sharedKeyForEncryption: z.string().optional(),
  publicKeyForEncryption: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StandardIntrospectionRequest$ {
  /** @deprecated use `StandardIntrospectionRequest$inboundSchema` instead. */
  export const inboundSchema = StandardIntrospectionRequest$inboundSchema;
  /** @deprecated use `StandardIntrospectionRequest$outboundSchema` instead. */
  export const outboundSchema = StandardIntrospectionRequest$outboundSchema;
  /** @deprecated use `StandardIntrospectionRequest$Outbound` instead. */
  export type Outbound = StandardIntrospectionRequest$Outbound;
}

export function standardIntrospectionRequestToJSON(
  standardIntrospectionRequest: StandardIntrospectionRequest,
): string {
  return JSON.stringify(
    StandardIntrospectionRequest$outboundSchema.parse(
      standardIntrospectionRequest,
    ),
  );
}

export function standardIntrospectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<StandardIntrospectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StandardIntrospectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StandardIntrospectionRequest' from JSON`,
  );
}
