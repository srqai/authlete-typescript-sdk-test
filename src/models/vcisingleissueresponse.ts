/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the credential endpoint
 *
 * @remarks
 * should take.
 */
export const VciSingleIssueResponseAction = {
  Ok: "OK",
  Accepted: "ACCEPTED",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  CallerError: "CALLER_ERROR",
} as const;
/**
 * The next action that the implementation of the credential endpoint
 *
 * @remarks
 * should take.
 */
export type VciSingleIssueResponseAction = ClosedEnum<
  typeof VciSingleIssueResponseAction
>;

export type VciSingleIssueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the credential endpoint
   *
   * @remarks
   * should take.
   */
  action?: VciSingleIssueResponseAction | undefined;
  /**
   * The content of the response that the implementation of the credential
   *
   * @remarks
   * endpoint should return.
   */
  responseContent?: string | undefined;
  /**
   * The issued transaction ID.
   *
   * @remarks
   */
  transactionId?: string | undefined;
};

/** @internal */
export const VciSingleIssueResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciSingleIssueResponseAction
> = z.nativeEnum(VciSingleIssueResponseAction);

/** @internal */
export const VciSingleIssueResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciSingleIssueResponseAction
> = VciSingleIssueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueResponseAction$ {
  /** @deprecated use `VciSingleIssueResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueResponseAction$inboundSchema;
  /** @deprecated use `VciSingleIssueResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueResponseAction$outboundSchema;
}

/** @internal */
export const VciSingleIssueResponse$inboundSchema: z.ZodType<
  VciSingleIssueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleIssueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  transactionId: z.string().optional(),
});

/** @internal */
export type VciSingleIssueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  transactionId?: string | undefined;
};

/** @internal */
export const VciSingleIssueResponse$outboundSchema: z.ZodType<
  VciSingleIssueResponse$Outbound,
  z.ZodTypeDef,
  VciSingleIssueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciSingleIssueResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  transactionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciSingleIssueResponse$ {
  /** @deprecated use `VciSingleIssueResponse$inboundSchema` instead. */
  export const inboundSchema = VciSingleIssueResponse$inboundSchema;
  /** @deprecated use `VciSingleIssueResponse$outboundSchema` instead. */
  export const outboundSchema = VciSingleIssueResponse$outboundSchema;
  /** @deprecated use `VciSingleIssueResponse$Outbound` instead. */
  export type Outbound = VciSingleIssueResponse$Outbound;
}

export function vciSingleIssueResponseToJSON(
  vciSingleIssueResponse: VciSingleIssueResponse,
): string {
  return JSON.stringify(
    VciSingleIssueResponse$outboundSchema.parse(vciSingleIssueResponse),
  );
}

export function vciSingleIssueResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciSingleIssueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciSingleIssueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciSingleIssueResponse' from JSON`,
  );
}
