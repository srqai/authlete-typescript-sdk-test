/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
 */
export const PushedAuthorizationResponseAction = {
  Created: "CREATED",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  PayloadTooLarge: "PAYLOAD_TOO_LARGE",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
 */
export type PushedAuthorizationResponseAction = ClosedEnum<
  typeof PushedAuthorizationResponseAction
>;

/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export const PushedAuthorizationResponseClientAuthMethod = {
  None: "NONE",
  ClientSecretBasic: "CLIENT_SECRET_BASIC",
  ClientSecretPost: "CLIENT_SECRET_POST",
  ClientSecretJwt: "CLIENT_SECRET_JWT",
  PrivateKeyJwt: "PRIVATE_KEY_JWT",
  TlsClientAuth: "TLS_CLIENT_AUTH",
  SelfSignedTlsClientAuth: "SELF_SIGNED_TLS_CLIENT_AUTH",
} as const;
/**
 * The client authentication method that the client application declares that it uses at the token
 *
 * @remarks
 * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
 * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
 */
export type PushedAuthorizationResponseClientAuthMethod = ClosedEnum<
  typeof PushedAuthorizationResponseClientAuthMethod
>;

export type PushedAuthorizationResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take. Any other value other than "CREATED" should be handled as unsuccessful result.
   */
  action?: PushedAuthorizationResponseAction | undefined;
  /**
   * The request_uri created to the client to be used as request_uri on the authorize call.
   *
   * @remarks
   */
  requestUri?: string | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application.
   */
  responseContent?: string | undefined;
  /**
   * The client authentication method that the client application declares that it uses at the token
   *
   * @remarks
   * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
   * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
   */
  clientAuthMethod?: PushedAuthorizationResponseClientAuthMethod | undefined;
  /**
   * Get the expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
};

/** @internal */
export const PushedAuthorizationResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof PushedAuthorizationResponseAction
> = z.nativeEnum(PushedAuthorizationResponseAction);

/** @internal */
export const PushedAuthorizationResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof PushedAuthorizationResponseAction
> = PushedAuthorizationResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthorizationResponseAction$ {
  /** @deprecated use `PushedAuthorizationResponseAction$inboundSchema` instead. */
  export const inboundSchema = PushedAuthorizationResponseAction$inboundSchema;
  /** @deprecated use `PushedAuthorizationResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthorizationResponseAction$outboundSchema;
}

/** @internal */
export const PushedAuthorizationResponseClientAuthMethod$inboundSchema:
  z.ZodNativeEnum<typeof PushedAuthorizationResponseClientAuthMethod> = z
    .nativeEnum(PushedAuthorizationResponseClientAuthMethod);

/** @internal */
export const PushedAuthorizationResponseClientAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof PushedAuthorizationResponseClientAuthMethod> =
    PushedAuthorizationResponseClientAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthorizationResponseClientAuthMethod$ {
  /** @deprecated use `PushedAuthorizationResponseClientAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    PushedAuthorizationResponseClientAuthMethod$inboundSchema;
  /** @deprecated use `PushedAuthorizationResponseClientAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    PushedAuthorizationResponseClientAuthMethod$outboundSchema;
}

/** @internal */
export const PushedAuthorizationResponse$inboundSchema: z.ZodType<
  PushedAuthorizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: PushedAuthorizationResponseAction$inboundSchema.optional(),
  requestUri: z.string().optional(),
  responseContent: z.string().optional(),
  clientAuthMethod: PushedAuthorizationResponseClientAuthMethod$inboundSchema
    .optional(),
  dpopNonce: z.string().optional(),
});

/** @internal */
export type PushedAuthorizationResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  requestUri?: string | undefined;
  responseContent?: string | undefined;
  clientAuthMethod?: string | undefined;
  dpopNonce?: string | undefined;
};

/** @internal */
export const PushedAuthorizationResponse$outboundSchema: z.ZodType<
  PushedAuthorizationResponse$Outbound,
  z.ZodTypeDef,
  PushedAuthorizationResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: PushedAuthorizationResponseAction$outboundSchema.optional(),
  requestUri: z.string().optional(),
  responseContent: z.string().optional(),
  clientAuthMethod: PushedAuthorizationResponseClientAuthMethod$outboundSchema
    .optional(),
  dpopNonce: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushedAuthorizationResponse$ {
  /** @deprecated use `PushedAuthorizationResponse$inboundSchema` instead. */
  export const inboundSchema = PushedAuthorizationResponse$inboundSchema;
  /** @deprecated use `PushedAuthorizationResponse$outboundSchema` instead. */
  export const outboundSchema = PushedAuthorizationResponse$outboundSchema;
  /** @deprecated use `PushedAuthorizationResponse$Outbound` instead. */
  export type Outbound = PushedAuthorizationResponse$Outbound;
}

export function pushedAuthorizationResponseToJSON(
  pushedAuthorizationResponse: PushedAuthorizationResponse,
): string {
  return JSON.stringify(
    PushedAuthorizationResponse$outboundSchema.parse(
      pushedAuthorizationResponse,
    ),
  );
}

export function pushedAuthorizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<PushedAuthorizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushedAuthorizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushedAuthorizationResponse' from JSON`,
  );
}
