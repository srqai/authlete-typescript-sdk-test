/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Grant,
  Grant$inboundSchema,
  Grant$Outbound,
  Grant$outboundSchema,
} from "./grant.js";
import {
  GrantType,
  GrantType$inboundSchema,
  GrantType$outboundSchema,
} from "./granttype.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";
import {
  Scope,
  Scope$inboundSchema,
  Scope$Outbound,
  Scope$outboundSchema,
} from "./scope.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const IntrospectionResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type IntrospectionResponseAction = ClosedEnum<
  typeof IntrospectionResponseAction
>;

export type IntrospectionResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: IntrospectionResponseAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
   *
   * @remarks
   */
  responseContent?: string | undefined;
  /**
   * The client ID.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
   *
   * @remarks
   * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
   */
  clientIdAlias?: string | undefined;
  /**
   * The flag which indicates whether the client ID alias was used when the token request was made.
   *
   * @remarks
   * `true` if the client ID alias was used when the token request was made.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The time at which the access token expires.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  expiresAt?: number | undefined;
  /**
   * The subject who is associated with the access token.
   *
   * @remarks
   * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
   */
  subject?: string | undefined;
  /**
   * The scopes covered by the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * `true` if the access token exists.
   *
   * @remarks
   */
  existent?: boolean | undefined;
  /**
   * true` if the access token is usable (= exists and has not expired).
   *
   * @remarks
   */
  usable?: boolean | undefined;
  /**
   * `true` if the access token exists.
   *
   * @remarks
   */
  sufficient?: boolean | undefined;
  /**
   * `true` if the access token can be refreshed using the associated refresh token which had been issued
   *
   * @remarks
   * along with the access token. `false` if the refresh token for the access token has expired or the access
   * token has no associated refresh token.
   */
  refreshable?: boolean | undefined;
  /**
   * The extra properties associated with the access token.
   */
  properties?: Array<Property> | undefined;
  /**
   * The client certificate thumbprint used to validate the access token.
   *
   * @remarks
   */
  certificateThumbprint?: string | undefined;
  /**
   * The target resources. This represents the resources specified by the `resource` request parameters
   *
   * @remarks
   * or by the `resource` property in the request object.
   *
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
   *
   * @remarks
   *
   * In some flows, the initial request and the subsequent token request are sent to different endpoints.
   * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
   * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
   * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
   * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
   * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
   *
   * See "Resource Indicators for OAuth 2.0" for details.
   */
  accessTokenResources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<Pair> | undefined;
  /**
   * The scopes property of this class is a list of scope names. The property does not hold information
   *
   * @remarks
   * about scope attributes. This scopeDetails property was newly created to convey information about
   * scope attributes.
   */
  scopeDetails?: Array<Scope> | undefined;
  /**
   * The value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: Grant | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * The grant type of the access token when the access token was created.
   *
   * @remarks
   */
  grantType?: GrantType | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication that the authorization server performed
   *
   * @remarks
   * during the course of issuing the access token.
   */
  acr?: string | undefined;
  /**
   * The time when the user authentication was performed during the course of issuing the access token.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The flag indicating whether the token is for credential issuance.
   */
  forCredentialIssuance?: boolean | undefined;
  /**
   * The c_nonce
   */
  cnonce?: string | undefined;
  /**
   * The time at which the `c_nonce` expires.
   */
  cnonceExpiresAt?: number | undefined;
  /**
   * The credentials that can be obtained by presenting the access token.
   */
  issuableCredentials?: string | undefined;
  /**
   * The expected nonce value for DPoP proof JWT, which should be used
   *
   * @remarks
   * as the value of the `DPoP-Nonce` HTTP header.
   */
  dpopNonce?: string | undefined;
  /**
   * The flag indicating whether the HTTP response from the protected resource endpoint must include
   *
   * @remarks
   * an HTTP message signature ([RFC 9421 HTTP Message Signatures](https://www.rfc-editor.org/rfc/rfc9421.html))
   * in compliance with [FAPI 2.0 Message Signing](https://openid.bitbucket.io/fapi/fapi-2_0-message-signing.html).
   *
   * When this response parameter is `true`, the HTTP response from the protected resource endpoint
   * must include the `Signature` and `Signature-Input` HTTP fields.
   */
  responseSigningRequired?: boolean | undefined;
};

/** @internal */
export const IntrospectionResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof IntrospectionResponseAction
> = z.nativeEnum(IntrospectionResponseAction);

/** @internal */
export const IntrospectionResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof IntrospectionResponseAction
> = IntrospectionResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntrospectionResponseAction$ {
  /** @deprecated use `IntrospectionResponseAction$inboundSchema` instead. */
  export const inboundSchema = IntrospectionResponseAction$inboundSchema;
  /** @deprecated use `IntrospectionResponseAction$outboundSchema` instead. */
  export const outboundSchema = IntrospectionResponseAction$outboundSchema;
}

/** @internal */
export const IntrospectionResponse$inboundSchema: z.ZodType<
  IntrospectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: IntrospectionResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  expiresAt: z.number().int().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  existent: z.boolean().optional(),
  usable: z.boolean().optional(),
  sufficient: z.boolean().optional(),
  refreshable: z.boolean().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  certificateThumbprint: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  serviceAttributes: z.array(Pair$inboundSchema).optional(),
  clientAttributes: z.array(Pair$inboundSchema).optional(),
  scopeDetails: z.array(Scope$inboundSchema).optional(),
  grantId: z.string().optional(),
  grant: Grant$inboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
  consentedClaims: z.array(z.string()).optional(),
  grantType: GrantType$inboundSchema.optional(),
  acr: z.string().optional(),
  authTime: z.number().int().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  forCredentialIssuance: z.boolean().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  issuableCredentials: z.string().optional(),
  dpopNonce: z.string().optional(),
  responseSigningRequired: z.boolean().optional(),
});

/** @internal */
export type IntrospectionResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  expiresAt?: number | undefined;
  subject?: string | undefined;
  scopes?: Array<string> | undefined;
  existent?: boolean | undefined;
  usable?: boolean | undefined;
  sufficient?: boolean | undefined;
  refreshable?: boolean | undefined;
  properties?: Array<Property$Outbound> | undefined;
  certificateThumbprint?: string | undefined;
  resources?: Array<string> | undefined;
  accessTokenResources?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  serviceAttributes?: Array<Pair$Outbound> | undefined;
  clientAttributes?: Array<Pair$Outbound> | undefined;
  scopeDetails?: Array<Scope$Outbound> | undefined;
  grantId?: string | undefined;
  grant?: Grant$Outbound | undefined;
  forExternalAttachment?: boolean | undefined;
  consentedClaims?: Array<string> | undefined;
  grantType?: string | undefined;
  acr?: string | undefined;
  authTime?: number | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  forCredentialIssuance?: boolean | undefined;
  cnonce?: string | undefined;
  cnonceExpiresAt?: number | undefined;
  issuableCredentials?: string | undefined;
  dpopNonce?: string | undefined;
  responseSigningRequired?: boolean | undefined;
};

/** @internal */
export const IntrospectionResponse$outboundSchema: z.ZodType<
  IntrospectionResponse$Outbound,
  z.ZodTypeDef,
  IntrospectionResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: IntrospectionResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  expiresAt: z.number().int().optional(),
  subject: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  existent: z.boolean().optional(),
  usable: z.boolean().optional(),
  sufficient: z.boolean().optional(),
  refreshable: z.boolean().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  certificateThumbprint: z.string().optional(),
  resources: z.array(z.string()).optional(),
  accessTokenResources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
  serviceAttributes: z.array(Pair$outboundSchema).optional(),
  clientAttributes: z.array(Pair$outboundSchema).optional(),
  scopeDetails: z.array(Scope$outboundSchema).optional(),
  grantId: z.string().optional(),
  grant: Grant$outboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
  consentedClaims: z.array(z.string()).optional(),
  grantType: GrantType$outboundSchema.optional(),
  acr: z.string().optional(),
  authTime: z.number().int().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  forCredentialIssuance: z.boolean().optional(),
  cnonce: z.string().optional(),
  cnonceExpiresAt: z.number().int().optional(),
  issuableCredentials: z.string().optional(),
  dpopNonce: z.string().optional(),
  responseSigningRequired: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntrospectionResponse$ {
  /** @deprecated use `IntrospectionResponse$inboundSchema` instead. */
  export const inboundSchema = IntrospectionResponse$inboundSchema;
  /** @deprecated use `IntrospectionResponse$outboundSchema` instead. */
  export const outboundSchema = IntrospectionResponse$outboundSchema;
  /** @deprecated use `IntrospectionResponse$Outbound` instead. */
  export type Outbound = IntrospectionResponse$Outbound;
}

export function introspectionResponseToJSON(
  introspectionResponse: IntrospectionResponse,
): string {
  return JSON.stringify(
    IntrospectionResponse$outboundSchema.parse(introspectionResponse),
  );
}

export function introspectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<IntrospectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntrospectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntrospectionResponse' from JSON`,
  );
}
