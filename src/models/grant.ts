/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  GrantScope,
  GrantScope$inboundSchema,
  GrantScope$Outbound,
  GrantScope$outboundSchema,
} from "./grantscope.js";

export type Grant = {
  scopes?: Array<GrantScope> | undefined;
  /**
   * The claims associated with the Grant.
   *
   * @remarks
   */
  claims?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
};

/** @internal */
export const Grant$inboundSchema: z.ZodType<Grant, z.ZodTypeDef, unknown> = z
  .object({
    scopes: z.array(GrantScope$inboundSchema).optional(),
    claims: z.array(z.string()).optional(),
    authorizationDetails: AuthzDetails$inboundSchema.optional(),
  });

/** @internal */
export type Grant$Outbound = {
  scopes?: Array<GrantScope$Outbound> | undefined;
  claims?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
};

/** @internal */
export const Grant$outboundSchema: z.ZodType<
  Grant$Outbound,
  z.ZodTypeDef,
  Grant
> = z.object({
  scopes: z.array(GrantScope$outboundSchema).optional(),
  claims: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Grant$ {
  /** @deprecated use `Grant$inboundSchema` instead. */
  export const inboundSchema = Grant$inboundSchema;
  /** @deprecated use `Grant$outboundSchema` instead. */
  export const outboundSchema = Grant$outboundSchema;
  /** @deprecated use `Grant$Outbound` instead. */
  export type Outbound = Grant$Outbound;
}

export function grantToJSON(grant: Grant): string {
  return JSON.stringify(Grant$outboundSchema.parse(grant));
}

export function grantFromJSON(
  jsonString: string,
): SafeParseResult<Grant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Grant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Grant' from JSON`,
  );
}
