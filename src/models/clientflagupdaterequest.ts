/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientFlagUpdateRequest = {
  /**
   * The flag value to be set
   *
   * @remarks
   */
  clientLocked: boolean;
};

/** @internal */
export const ClientFlagUpdateRequest$inboundSchema: z.ZodType<
  ClientFlagUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientLocked: z.boolean(),
});

/** @internal */
export type ClientFlagUpdateRequest$Outbound = {
  clientLocked: boolean;
};

/** @internal */
export const ClientFlagUpdateRequest$outboundSchema: z.ZodType<
  ClientFlagUpdateRequest$Outbound,
  z.ZodTypeDef,
  ClientFlagUpdateRequest
> = z.object({
  clientLocked: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientFlagUpdateRequest$ {
  /** @deprecated use `ClientFlagUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ClientFlagUpdateRequest$inboundSchema;
  /** @deprecated use `ClientFlagUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ClientFlagUpdateRequest$outboundSchema;
  /** @deprecated use `ClientFlagUpdateRequest$Outbound` instead. */
  export type Outbound = ClientFlagUpdateRequest$Outbound;
}

export function clientFlagUpdateRequestToJSON(
  clientFlagUpdateRequest: ClientFlagUpdateRequest,
): string {
  return JSON.stringify(
    ClientFlagUpdateRequest$outboundSchema.parse(clientFlagUpdateRequest),
  );
}

export function clientFlagUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientFlagUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientFlagUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientFlagUpdateRequest' from JSON`,
  );
}
