/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientExtensionRequestableScopesGetResponse = {
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestableScopesGetResponse$inboundSchema:
  z.ZodType<
    ClientExtensionRequestableScopesGetResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/** @internal */
export type ClientExtensionRequestableScopesGetResponse$Outbound = {
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestableScopesGetResponse$outboundSchema:
  z.ZodType<
    ClientExtensionRequestableScopesGetResponse$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestableScopesGetResponse
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestableScopesGetResponse$ {
  /** @deprecated use `ClientExtensionRequestableScopesGetResponse$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestableScopesGetResponse$inboundSchema;
  /** @deprecated use `ClientExtensionRequestableScopesGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestableScopesGetResponse$outboundSchema;
  /** @deprecated use `ClientExtensionRequestableScopesGetResponse$Outbound` instead. */
  export type Outbound = ClientExtensionRequestableScopesGetResponse$Outbound;
}

export function clientExtensionRequestableScopesGetResponseToJSON(
  clientExtensionRequestableScopesGetResponse:
    ClientExtensionRequestableScopesGetResponse,
): string {
  return JSON.stringify(
    ClientExtensionRequestableScopesGetResponse$outboundSchema.parse(
      clientExtensionRequestableScopesGetResponse,
    ),
  );
}

export function clientExtensionRequestableScopesGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientExtensionRequestableScopesGetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientExtensionRequestableScopesGetResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientExtensionRequestableScopesGetResponse' from JSON`,
  );
}
