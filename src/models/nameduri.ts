/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type NamedUri = {
  name?: string | undefined;
  uri?: string | undefined;
};

/** @internal */
export const NamedUri$inboundSchema: z.ZodType<
  NamedUri,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  uri: z.string().optional(),
});

/** @internal */
export type NamedUri$Outbound = {
  name?: string | undefined;
  uri?: string | undefined;
};

/** @internal */
export const NamedUri$outboundSchema: z.ZodType<
  NamedUri$Outbound,
  z.ZodTypeDef,
  NamedUri
> = z.object({
  name: z.string().optional(),
  uri: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NamedUri$ {
  /** @deprecated use `NamedUri$inboundSchema` instead. */
  export const inboundSchema = NamedUri$inboundSchema;
  /** @deprecated use `NamedUri$outboundSchema` instead. */
  export const outboundSchema = NamedUri$outboundSchema;
  /** @deprecated use `NamedUri$Outbound` instead. */
  export type Outbound = NamedUri$Outbound;
}

export function namedUriToJSON(namedUri: NamedUri): string {
  return JSON.stringify(NamedUri$outboundSchema.parse(namedUri));
}

export function namedUriFromJSON(
  jsonString: string,
): SafeParseResult<NamedUri, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NamedUri$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NamedUri' from JSON`,
  );
}
