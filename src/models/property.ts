/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Property = {
  /**
   * The key part.
   */
  key?: string | undefined;
  /**
   * The value part.
   */
  value?: string | undefined;
  /**
   * The flag to indicate whether this property hidden from or visible to client applications.
   *
   * @remarks
   * If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
   */
  hidden?: boolean | undefined;
};

/** @internal */
export const Property$inboundSchema: z.ZodType<
  Property,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/** @internal */
export type Property$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  hidden?: boolean | undefined;
};

/** @internal */
export const Property$outboundSchema: z.ZodType<
  Property$Outbound,
  z.ZodTypeDef,
  Property
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  hidden: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Property$ {
  /** @deprecated use `Property$inboundSchema` instead. */
  export const inboundSchema = Property$inboundSchema;
  /** @deprecated use `Property$outboundSchema` instead. */
  export const outboundSchema = Property$outboundSchema;
  /** @deprecated use `Property$Outbound` instead. */
  export type Outbound = Property$Outbound;
}

export function propertyToJSON(property: Property): string {
  return JSON.stringify(Property$outboundSchema.parse(property));
}

export function propertyFromJSON(
  jsonString: string,
): SafeParseResult<Property, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Property$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Property' from JSON`,
  );
}
