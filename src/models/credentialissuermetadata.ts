/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CredentialIssuerMetadata = {
  /**
   * The identifiers of the authorization servers that the credential issuer relies on for authorization.
   *
   * @remarks
   * This property corresponds to the authorization_servers metadata. When the credential issuer works
   * as an authorization server for itself, this property should be omitted.
   */
  authorizationServers?: Array<string> | undefined;
  /**
   * The identifier of a credential request.
   */
  credentialIssuer?: string | undefined;
  /**
   * The URL of the credential endpoint of the credential issuer.
   */
  credentialEndpoint?: boolean | undefined;
  /**
   * The URL of the batch credential endpoint of the credential issuer.
   */
  batchCredentialEndpoint?: number | undefined;
  /**
   * The URL of the deferred credential endpoint of the credential issuer.
   */
  deferredCredentialEndpoint?: string | undefined;
  /**
   * A JSON array describing supported credentials.
   */
  credentialsSupported?: boolean | undefined;
  /**
   * The supported JWE `alg` algorithms for credential response encryption. This property corresponds
   *
   * @remarks
   * to the `credential_response_encryption.alg_values_supported` metadata.
   */
  credentialResponseEncryptionAlgValuesSupported?: Array<string> | undefined;
  /**
   * The supported JWE `enc` algorithms for credential response encryption. This property corresponds
   *
   * @remarks
   * to the `credential_response_encryption.enc_values_supported` metadata.
   */
  credentialResponseEncryptionEncValuesSupported?: Array<string> | undefined;
  /**
   * The boolean flag indicating whether credential response encryption is required. This property
   *
   * @remarks
   * corresponds to the `credential_response_encryption.encryption_required metadata`. If this flag
   * is `true`, every credential request to the credential issuer must include the `credential_response_encryption`
   * property.
   */
  requireCredentialResponseEncryption?: boolean | undefined;
};

/** @internal */
export const CredentialIssuerMetadata$inboundSchema: z.ZodType<
  CredentialIssuerMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  authorizationServers: z.array(z.string()).optional(),
  credentialIssuer: z.string().optional(),
  credentialEndpoint: z.boolean().optional(),
  batchCredentialEndpoint: z.number().int().optional(),
  deferredCredentialEndpoint: z.string().optional(),
  credentialsSupported: z.boolean().optional(),
  credentialResponseEncryptionAlgValuesSupported: z.array(z.string())
    .optional(),
  credentialResponseEncryptionEncValuesSupported: z.array(z.string())
    .optional(),
  requireCredentialResponseEncryption: z.boolean().optional(),
});

/** @internal */
export type CredentialIssuerMetadata$Outbound = {
  authorizationServers?: Array<string> | undefined;
  credentialIssuer?: string | undefined;
  credentialEndpoint?: boolean | undefined;
  batchCredentialEndpoint?: number | undefined;
  deferredCredentialEndpoint?: string | undefined;
  credentialsSupported?: boolean | undefined;
  credentialResponseEncryptionAlgValuesSupported?: Array<string> | undefined;
  credentialResponseEncryptionEncValuesSupported?: Array<string> | undefined;
  requireCredentialResponseEncryption?: boolean | undefined;
};

/** @internal */
export const CredentialIssuerMetadata$outboundSchema: z.ZodType<
  CredentialIssuerMetadata$Outbound,
  z.ZodTypeDef,
  CredentialIssuerMetadata
> = z.object({
  authorizationServers: z.array(z.string()).optional(),
  credentialIssuer: z.string().optional(),
  credentialEndpoint: z.boolean().optional(),
  batchCredentialEndpoint: z.number().int().optional(),
  deferredCredentialEndpoint: z.string().optional(),
  credentialsSupported: z.boolean().optional(),
  credentialResponseEncryptionAlgValuesSupported: z.array(z.string())
    .optional(),
  credentialResponseEncryptionEncValuesSupported: z.array(z.string())
    .optional(),
  requireCredentialResponseEncryption: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CredentialIssuerMetadata$ {
  /** @deprecated use `CredentialIssuerMetadata$inboundSchema` instead. */
  export const inboundSchema = CredentialIssuerMetadata$inboundSchema;
  /** @deprecated use `CredentialIssuerMetadata$outboundSchema` instead. */
  export const outboundSchema = CredentialIssuerMetadata$outboundSchema;
  /** @deprecated use `CredentialIssuerMetadata$Outbound` instead. */
  export type Outbound = CredentialIssuerMetadata$Outbound;
}

export function credentialIssuerMetadataToJSON(
  credentialIssuerMetadata: CredentialIssuerMetadata,
): string {
  return JSON.stringify(
    CredentialIssuerMetadata$outboundSchema.parse(credentialIssuerMetadata),
  );
}

export function credentialIssuerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CredentialIssuerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CredentialIssuerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CredentialIssuerMetadata' from JSON`,
  );
}
