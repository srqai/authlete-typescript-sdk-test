/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthorizationIssueResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthorizationIssueResponseAction = ClosedEnum<
  typeof AuthorizationIssueResponseAction
>;

export type AuthorizationIssueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthorizationIssueResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The newly issued access token. Note that an access token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains token.
   */
  accessToken?: string | undefined;
  /**
   * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
   *
   * @remarks
   * since the Unix epoch (1970-01-01).
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
   *
   * @remarks
   * when `response_type` contains `id_token`.
   */
  idToken?: string | undefined;
  /**
   * The newly issued authorization code. Note that an authorization code is issued only
   *
   * @remarks
   * when `response_type` contains code.
   */
  authorizationCode?: string | undefined;
  /**
   * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
   *
   * @remarks
   * this property is always set to `null`.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The information about the ticket.
   *
   * @remarks
   */
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthorizationIssueResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthorizationIssueResponseAction
> = z.nativeEnum(AuthorizationIssueResponseAction);

/** @internal */
export const AuthorizationIssueResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthorizationIssueResponseAction
> = AuthorizationIssueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationIssueResponseAction$ {
  /** @deprecated use `AuthorizationIssueResponseAction$inboundSchema` instead. */
  export const inboundSchema = AuthorizationIssueResponseAction$inboundSchema;
  /** @deprecated use `AuthorizationIssueResponseAction$outboundSchema` instead. */
  export const outboundSchema = AuthorizationIssueResponseAction$outboundSchema;
}

/** @internal */
export const AuthorizationIssueResponse$inboundSchema: z.ZodType<
  AuthorizationIssueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthorizationIssueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/** @internal */
export type AuthorizationIssueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  accessTokenDuration?: number | undefined;
  idToken?: string | undefined;
  authorizationCode?: string | undefined;
  jwtAccessToken?: string | undefined;
  ticketInfo?: string | undefined;
};

/** @internal */
export const AuthorizationIssueResponse$outboundSchema: z.ZodType<
  AuthorizationIssueResponse$Outbound,
  z.ZodTypeDef,
  AuthorizationIssueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthorizationIssueResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  accessTokenDuration: z.number().int().optional(),
  idToken: z.string().optional(),
  authorizationCode: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  ticketInfo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationIssueResponse$ {
  /** @deprecated use `AuthorizationIssueResponse$inboundSchema` instead. */
  export const inboundSchema = AuthorizationIssueResponse$inboundSchema;
  /** @deprecated use `AuthorizationIssueResponse$outboundSchema` instead. */
  export const outboundSchema = AuthorizationIssueResponse$outboundSchema;
  /** @deprecated use `AuthorizationIssueResponse$Outbound` instead. */
  export type Outbound = AuthorizationIssueResponse$Outbound;
}

export function authorizationIssueResponseToJSON(
  authorizationIssueResponse: AuthorizationIssueResponse,
): string {
  return JSON.stringify(
    AuthorizationIssueResponse$outboundSchema.parse(authorizationIssueResponse),
  );
}

export function authorizationIssueResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationIssueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationIssueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationIssueResponse' from JSON`,
  );
}
