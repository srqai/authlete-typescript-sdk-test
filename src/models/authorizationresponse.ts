/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import {
  ClientLimitedAuthorization,
  ClientLimitedAuthorization$inboundSchema,
  ClientLimitedAuthorization$Outbound,
  ClientLimitedAuthorization$outboundSchema,
} from "./clientlimitedauthorization.js";
import {
  CredentialOfferInfo,
  CredentialOfferInfo$inboundSchema,
  CredentialOfferInfo$Outbound,
  CredentialOfferInfo$outboundSchema,
} from "./credentialofferinfo.js";
import {
  Display,
  Display$inboundSchema,
  Display$outboundSchema,
} from "./display.js";
import {
  DynamicScope,
  DynamicScope$inboundSchema,
  DynamicScope$Outbound,
  DynamicScope$outboundSchema,
} from "./dynamicscope.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Grant,
  Grant$inboundSchema,
  Grant$Outbound,
  Grant$outboundSchema,
} from "./grant.js";
import {
  GrantManagementAction,
  GrantManagementAction$inboundSchema,
  GrantManagementAction$outboundSchema,
} from "./grantmanagementaction.js";
import {
  Prompt,
  Prompt$inboundSchema,
  Prompt$outboundSchema,
} from "./prompt.js";
import {
  Scope,
  Scope$inboundSchema,
  Scope$Outbound,
  Scope$outboundSchema,
} from "./scope.js";
import {
  Service,
  Service$inboundSchema,
  Service$Outbound,
  Service$outboundSchema,
} from "./service.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const AuthorizationResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Location: "LOCATION",
  Form: "FORM",
  NoInteraction: "NO_INTERACTION",
  Interaction: "INTERACTION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type AuthorizationResponseAction = ClosedEnum<
  typeof AuthorizationResponseAction
>;

export type AuthorizationResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: AuthorizationResponseAction | undefined;
  client?: ClientLimitedAuthorization | undefined;
  /**
   * The display mode which the client application requests by `display` request parameter.
   *
   * @remarks
   * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
   *
   * It is ensured that the value of `display` is one of the supported display modes which are specified
   * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
   * authorization request is not supported, an error is raised.
   *
   * Values for this property correspond to the values listed in
   * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
   */
  display?: Display | undefined;
  /**
   * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
   *
   * @remarks
   * of the client application when the authorization request does not contain `max_age` request parameter.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
   * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
   * for `defaultMaxAge` configuration parameter.
   */
  maxAge?: number | undefined;
  service?: Service | undefined;
  /**
   * The scopes that the client application requests. This value comes from `scope` request parameter.
   *
   * @remarks
   * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
   * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
   * the value of this parameter is `null`.
   *
   * It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
   * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
   * an error and are just ignored.
   *
   * OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
   *
   * | Name | Description |
   * | --- | --- |
   * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
   * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
   * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
   * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
   * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
   * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |
   *
   * Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
   * when scope request parameter contains `offline_access`. This behavior is a requirement written in
   * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
   */
  scopes?: Array<Scope> | undefined;
  /**
   * The locales that the client application presented as candidates to be used for UI.
   *
   * @remarks
   * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
   * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
   *
   * It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
   * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
   * cause an error and are just ignored.
   */
  uiLocales?: Array<string> | undefined;
  /**
   * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
   *
   * @remarks
   * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
   * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
   *
   * It is ensured that locales listed by this parameters are contained in the list of supported claim locales
   * which are specified by `supportedClaimsLocales` configuration parameter of the service.
   * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
   */
  claimsLocales?: Array<string> | undefined;
  /**
   * The list of claims that the client application requests to be embedded in the ID token.
   *
   * @remarks
   * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
   * which are expanded to claims.
   *
   * See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
   * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
   * for the special scopes.
   */
  claims?: Array<string> | undefined;
  /**
   * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
   *
   * @remarks
   * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
   * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
   */
  acrEssential?: boolean | undefined;
  /**
   * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
   *
   * @remarks
   * `false` if the value is the original numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
   *
   * @remarks
   * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
   * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
   * default_acr_values" for `defaultAcrs` configuration parameter.
   */
  acrs?: Array<string> | undefined;
  /**
   * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
   *
   * @remarks
   * The value comes from `sub` claim in `claims` request parameter.
   */
  subject?: string | undefined;
  /**
   * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
   */
  loginHint?: string | undefined;
  /**
   * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
   */
  prompts?: Array<Prompt> | undefined;
  /**
   * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
   *
   * @remarks
   *
   * When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
   *
   * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
   */
  lowestPrompt?: Prompt | undefined;
  /**
   * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
   *
   * @remarks
   */
  requestObjectPayload?: string | undefined;
  /**
   * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
   *
   * @remarks
   *
   * A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
   * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
   * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
   * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
   *
   * The following is an excerpt from the specification.
   * You can find `userinfo` and `id_token` are top-level properties.
   *
   * ```json
   * {
   *   "userinfo":
   *   {
   *     "given_name": { "essential": true },
   *     "nickname": null,
   *     "email": { "essential": true },
   *     "email_verified": { "essential": true },
   *     "picture": null,
   *     "http://example.info/claims/groups": null
   *   },
   *   "id_token":
   *   {
   *     "auth_time": { "essential": true },
   *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   *   }
   * }
   * ```
   *
   * This value of this property is the value of the `id_token` property in JSON format.
   * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
   *
   * ```json
   * {
   *   "auth_time": { "essential": true },
   *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   * }
   * ```
   *
   * Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
   * this property holds the former value.
   */
  idTokenClaims?: string | undefined;
  /**
   * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
   *
   * @remarks
   *
   * A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
   * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
   * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
   * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
   *
   * The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
   *
   * ```json
   * {
   *   "userinfo":
   *   {
   *     "given_name": { "essential": true },
   *     "nickname": null,
   *     "email": { "essential": true },
   *     "email_verified": { "essential": true },
   *     "picture": null,
   *     "http://example.info/claims/groups": null
   *   },
   *   "id_token":
   *   {
   *     "auth_time": { "essential": true },
   *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
   *   }
   * }
   * ````
   *
   * The value of this property is the value of the `userinfo` property in JSON format.
   * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
   *
   * ```json
   * {
   *   "given_name": { "essential": true },
   *   "nickname": null,
   *   "email": { "essential": true },
   *   "email_verified": { "essential": true },
   *   "picture": null,
   *   "http://example.info/claims/groups": null
   * }
   * ```
   *
   * Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
   * the value of this property holds the former value.
   */
  userInfoClaims?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
   *
   * @remarks
   * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
   *
   * @remarks
   * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
   *
   * > purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
   * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
   */
  purpose?: string | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * A ticket issued by Authlete to the service implementation. This is needed when the service
   *
   * @remarks
   * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
   * API.
   */
  ticket?: string | undefined;
  /**
   * The dynamic scopes which the client application requested by the scope request parameter.
   *
   * @remarks
   */
  dynamicScopes?: Array<DynamicScope> | undefined;
  /**
   * The grant management action of the device authorization request.
   *
   * @remarks
   *
   * The `grant_management_action` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
   */
  gmAction?: GrantManagementAction | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  grant?: Grant | undefined;
  /**
   * The subject identifying the user who has given the grant identified
   *
   * @remarks
   * by the `grant_id` request parameter of the device authorization
   * request.
   *
   * Authlete 2.3 and newer versions support <a href=
   * "https://openid.net/specs/fapi-grant-management.html">Grant Management
   * for OAuth 2.0</a>. An authorization request may contain a `grant_id`
   * request parameter which is defined in the specification. If the value of
   * the request parameter is valid, {@link #getGrantSubject()} will return
   * the subject of the user who has given the grant to the client application.
   * Authorization server implementations may use the value returned from
   * {@link #getGrantSubject()} in order to determine the user to authenticate.
   *
   * The user your system will authenticate during the authorization process
   * (or has already authenticated) may be different from the user of the
   * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
   * does not mention anything about the case, so the behavior in the case is
   * left to implementations. Authlete will not perform the grant management
   * action when the `subject` passed to Authlete does not match the
   * user of the grant.
   */
  grantSubject?: string | undefined;
  /**
   * Names of claims that are requested indirectly by <i>"transformed
   *
   * @remarks
   * claims"</i>.
   *
   * <p>
   * A client application can request <i>"transformed claims"</i> by adding
   * names of transformed claims in the `claims` request parameter.
   * The following is an example of the `claims` request parameter
   * that requests a predefined transformed claim named `18_or_over`
   * and a transformed claim named `nationality_usa` to be embedded
   * in the response from the userinfo endpoint.
   * </p>
   *
   * ```json
   * {
   *   "transformed_claims": {
   *     "nationality_usa": {
   *       "claim": "nationalities",
   *       "fn": [
   *         [ "eq", "USA" ],
   *         "any"
   *       ]
   *     }
   *   },
   *   "userinfo": {
   *     "::18_or_over": null,
   *     ":nationality_usa": null
   *   }
   * }
   * ```
   *
   * The example above assumes that a transformed claim named `18_or_over`
   * is predefined by the authorization server like below.
   *
   * ```json
   * {
   *   "18_or_over": {
   *     "claim": "birthdate",
   *     "fn": [
   *       "years_ago",
   *       [ "gte", 18 ]
   *     ]
   *   }
   * }
   * ```
   *
   * In the example, the `nationalities` claim is requested indirectly
   * by the `nationality_usa` transformed claim. Likewise, the
   * `birthdate` claim is requested indirectly by the `18_or_over`
   * transformed claim.
   *
   * When the `claims` request parameter of an authorization request is
   * like the example above, this `requestedClaimsForTx` property will
   * hold the following value.
   *
   * ```json
   * [ "birthdate", "nationalities" ]
   * ```
   *
   * It is expected that the authorization server implementation prepares values
   * of the listed claims and passes them as the value of the `claimsForTx`
   * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
   * is an example of the value of the `claimsForTx` request parameter.
   *
   * ```json
   * {
   *   "birthdate": "1970-01-23",
   *   "nationalities": [ "DEU", "USA" ]
   * }
   * ```
   */
  requestedClaimsForTx?: Array<string> | undefined;
  /**
   * Names of verified claims that will be referenced when transformed claims are computed.
   *
   * @remarks
   */
  requestedVerifiedClaimsForTx?: Array<Array<string>> | undefined;
  /**
   * the value of the `transformed_claims` property in the `claims` request
   *
   * @remarks
   * parameter of an authorization request or in the `claims` property in a
   * request object.
   */
  transformedClaims?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
  /**
   * The list of claims that the client application requests to be
   *
   * @remarks
   * embedded in userinfo responses. The value comes from the `"scope"`
   * and `"claims"` request parameters of the original authorization
   * request.
   */
  claimsAtUserInfo?: Array<string> | undefined;
  credentialOfferInfo?: CredentialOfferInfo | undefined;
  /**
   * The information about the <b>issuable credentials</b> that can
   *
   * @remarks
   * be obtained by presenting the access token that will be issued as a
   * result of the authorization request.
   */
  issuableCredentials?: string | undefined;
  /**
   * Flag which indicates whether [Native SSO](https://openid.net/specs/openid-connect-native-sso-1_0.html)
   *
   * @remarks
   * is requested. This property should be set to `true` when all the following conditions are satisfied:
   *
   * - The service supports Native SSO (see `nativeSsoSupported` property of Service).
   * - The service supports the `openid` and `device_sso` scopes.
   * - The client is allowed to request the `openid` and `device_sso` scopes.
   * - The authorization request includes the `openid` and `device_sso` scopes.
   * - The authorization request's `response_type` includes `code`.
   *
   * NOTE: If this property is set to `true`, the `sessionId` request parameter must be provided
   * to the `/auth/authorization/issue` API.
   */
  nativeSsoRequested?: boolean | undefined;
};

/** @internal */
export const AuthorizationResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof AuthorizationResponseAction
> = z.nativeEnum(AuthorizationResponseAction);

/** @internal */
export const AuthorizationResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof AuthorizationResponseAction
> = AuthorizationResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationResponseAction$ {
  /** @deprecated use `AuthorizationResponseAction$inboundSchema` instead. */
  export const inboundSchema = AuthorizationResponseAction$inboundSchema;
  /** @deprecated use `AuthorizationResponseAction$outboundSchema` instead. */
  export const outboundSchema = AuthorizationResponseAction$outboundSchema;
}

/** @internal */
export const AuthorizationResponse$inboundSchema: z.ZodType<
  AuthorizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthorizationResponseAction$inboundSchema.optional(),
  client: ClientLimitedAuthorization$inboundSchema.optional(),
  display: Display$inboundSchema.optional(),
  maxAge: z.number().int().optional(),
  service: Service$inboundSchema.optional(),
  scopes: z.array(Scope$inboundSchema).optional(),
  uiLocales: z.array(z.string()).optional(),
  claimsLocales: z.array(z.string()).optional(),
  claims: z.array(z.string()).optional(),
  acrEssential: z.boolean().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  acrs: z.array(z.string()).optional(),
  subject: z.string().optional(),
  loginHint: z.string().optional(),
  prompts: z.array(Prompt$inboundSchema).optional(),
  lowestPrompt: Prompt$inboundSchema.optional(),
  requestObjectPayload: z.string().optional(),
  idTokenClaims: z.string().optional(),
  userInfoClaims: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  purpose: z.string().optional(),
  responseContent: z.string().optional(),
  ticket: z.string().optional(),
  dynamicScopes: z.array(DynamicScope$inboundSchema).optional(),
  gmAction: GrantManagementAction$inboundSchema.optional(),
  grantId: z.string().optional(),
  grant: Grant$inboundSchema.optional(),
  grantSubject: z.string().optional(),
  requestedClaimsForTx: z.array(z.string()).optional(),
  requestedVerifiedClaimsForTx: z.array(z.array(z.string())).optional(),
  transformedClaims: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  claimsAtUserInfo: z.array(z.string()).optional(),
  credentialOfferInfo: CredentialOfferInfo$inboundSchema.optional(),
  issuableCredentials: z.string().optional(),
  nativeSsoRequested: z.boolean().optional(),
});

/** @internal */
export type AuthorizationResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  client?: ClientLimitedAuthorization$Outbound | undefined;
  display?: string | undefined;
  maxAge?: number | undefined;
  service?: Service$Outbound | undefined;
  scopes?: Array<Scope$Outbound> | undefined;
  uiLocales?: Array<string> | undefined;
  claimsLocales?: Array<string> | undefined;
  claims?: Array<string> | undefined;
  acrEssential?: boolean | undefined;
  clientIdAliasUsed?: boolean | undefined;
  acrs?: Array<string> | undefined;
  subject?: string | undefined;
  loginHint?: string | undefined;
  prompts?: Array<string> | undefined;
  lowestPrompt?: string | undefined;
  requestObjectPayload?: string | undefined;
  idTokenClaims?: string | undefined;
  userInfoClaims?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  purpose?: string | undefined;
  responseContent?: string | undefined;
  ticket?: string | undefined;
  dynamicScopes?: Array<DynamicScope$Outbound> | undefined;
  gmAction?: string | undefined;
  grantId?: string | undefined;
  grant?: Grant$Outbound | undefined;
  grantSubject?: string | undefined;
  requestedClaimsForTx?: Array<string> | undefined;
  requestedVerifiedClaimsForTx?: Array<Array<string>> | undefined;
  transformedClaims?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
  claimsAtUserInfo?: Array<string> | undefined;
  credentialOfferInfo?: CredentialOfferInfo$Outbound | undefined;
  issuableCredentials?: string | undefined;
  nativeSsoRequested?: boolean | undefined;
};

/** @internal */
export const AuthorizationResponse$outboundSchema: z.ZodType<
  AuthorizationResponse$Outbound,
  z.ZodTypeDef,
  AuthorizationResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: AuthorizationResponseAction$outboundSchema.optional(),
  client: ClientLimitedAuthorization$outboundSchema.optional(),
  display: Display$outboundSchema.optional(),
  maxAge: z.number().int().optional(),
  service: Service$outboundSchema.optional(),
  scopes: z.array(Scope$outboundSchema).optional(),
  uiLocales: z.array(z.string()).optional(),
  claimsLocales: z.array(z.string()).optional(),
  claims: z.array(z.string()).optional(),
  acrEssential: z.boolean().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  acrs: z.array(z.string()).optional(),
  subject: z.string().optional(),
  loginHint: z.string().optional(),
  prompts: z.array(Prompt$outboundSchema).optional(),
  lowestPrompt: Prompt$outboundSchema.optional(),
  requestObjectPayload: z.string().optional(),
  idTokenClaims: z.string().optional(),
  userInfoClaims: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
  purpose: z.string().optional(),
  responseContent: z.string().optional(),
  ticket: z.string().optional(),
  dynamicScopes: z.array(DynamicScope$outboundSchema).optional(),
  gmAction: GrantManagementAction$outboundSchema.optional(),
  grantId: z.string().optional(),
  grant: Grant$outboundSchema.optional(),
  grantSubject: z.string().optional(),
  requestedClaimsForTx: z.array(z.string()).optional(),
  requestedVerifiedClaimsForTx: z.array(z.array(z.string())).optional(),
  transformedClaims: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
  claimsAtUserInfo: z.array(z.string()).optional(),
  credentialOfferInfo: CredentialOfferInfo$outboundSchema.optional(),
  issuableCredentials: z.string().optional(),
  nativeSsoRequested: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationResponse$ {
  /** @deprecated use `AuthorizationResponse$inboundSchema` instead. */
  export const inboundSchema = AuthorizationResponse$inboundSchema;
  /** @deprecated use `AuthorizationResponse$outboundSchema` instead. */
  export const outboundSchema = AuthorizationResponse$outboundSchema;
  /** @deprecated use `AuthorizationResponse$Outbound` instead. */
  export type Outbound = AuthorizationResponse$Outbound;
}

export function authorizationResponseToJSON(
  authorizationResponse: AuthorizationResponse,
): string {
  return JSON.stringify(
    AuthorizationResponse$outboundSchema.parse(authorizationResponse),
  );
}

export function authorizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationResponse' from JSON`,
  );
}
