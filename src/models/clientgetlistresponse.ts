/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Client,
  Client$inboundSchema,
  Client$Outbound,
  Client$outboundSchema,
} from "./client.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientGetListResponse = {
  /**
   * Start index (inclusive) of the result set of the query.
   *
   * @remarks
   */
  start?: number | undefined;
  /**
   * End index (exclusive) of the result set of the query.
   *
   * @remarks
   */
  end?: number | undefined;
  /**
   * Total number of clients that belong to the service. This doesn't mean the number of clients
   *
   * @remarks
   * contained in the response.
   */
  totalCount?: number | undefined;
  /**
   * An array of clients.
   *
   * @remarks
   */
  clients?: Array<Client> | undefined;
};

/** @internal */
export const ClientGetListResponse$inboundSchema: z.ZodType<
  ClientGetListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(Client$inboundSchema).optional(),
});

/** @internal */
export type ClientGetListResponse$Outbound = {
  start?: number | undefined;
  end?: number | undefined;
  totalCount?: number | undefined;
  clients?: Array<Client$Outbound> | undefined;
};

/** @internal */
export const ClientGetListResponse$outboundSchema: z.ZodType<
  ClientGetListResponse$Outbound,
  z.ZodTypeDef,
  ClientGetListResponse
> = z.object({
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  totalCount: z.number().int().optional(),
  clients: z.array(Client$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientGetListResponse$ {
  /** @deprecated use `ClientGetListResponse$inboundSchema` instead. */
  export const inboundSchema = ClientGetListResponse$inboundSchema;
  /** @deprecated use `ClientGetListResponse$outboundSchema` instead. */
  export const outboundSchema = ClientGetListResponse$outboundSchema;
  /** @deprecated use `ClientGetListResponse$Outbound` instead. */
  export type Outbound = ClientGetListResponse$Outbound;
}

export function clientGetListResponseToJSON(
  clientGetListResponse: ClientGetListResponse,
): string {
  return JSON.stringify(
    ClientGetListResponse$outboundSchema.parse(clientGetListResponse),
  );
}

export function clientGetListResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientGetListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientGetListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientGetListResponse' from JSON`,
  );
}
