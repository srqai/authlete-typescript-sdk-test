/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CredentialRequestInfo,
  CredentialRequestInfo$inboundSchema,
  CredentialRequestInfo$Outbound,
  CredentialRequestInfo$outboundSchema,
} from "./credentialrequestinfo.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the deferred credential endpoint should take.
 */
export const VciDeferredParseResponseAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the deferred credential endpoint should take.
 */
export type VciDeferredParseResponseAction = ClosedEnum<
  typeof VciDeferredParseResponseAction
>;

export type VciDeferredParseResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the deferred credential endpoint should take.
   */
  action?: VciDeferredParseResponseAction | undefined;
  /**
   * The content of the response to the request sender.
   */
  responseContent?: string | undefined;
  info?: CredentialRequestInfo | undefined;
};

/** @internal */
export const VciDeferredParseResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciDeferredParseResponseAction
> = z.nativeEnum(VciDeferredParseResponseAction);

/** @internal */
export const VciDeferredParseResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciDeferredParseResponseAction
> = VciDeferredParseResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseResponseAction$ {
  /** @deprecated use `VciDeferredParseResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseResponseAction$inboundSchema;
  /** @deprecated use `VciDeferredParseResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseResponseAction$outboundSchema;
}

/** @internal */
export const VciDeferredParseResponse$inboundSchema: z.ZodType<
  VciDeferredParseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredParseResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  info: CredentialRequestInfo$inboundSchema.optional(),
});

/** @internal */
export type VciDeferredParseResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  info?: CredentialRequestInfo$Outbound | undefined;
};

/** @internal */
export const VciDeferredParseResponse$outboundSchema: z.ZodType<
  VciDeferredParseResponse$Outbound,
  z.ZodTypeDef,
  VciDeferredParseResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredParseResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  info: CredentialRequestInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredParseResponse$ {
  /** @deprecated use `VciDeferredParseResponse$inboundSchema` instead. */
  export const inboundSchema = VciDeferredParseResponse$inboundSchema;
  /** @deprecated use `VciDeferredParseResponse$outboundSchema` instead. */
  export const outboundSchema = VciDeferredParseResponse$outboundSchema;
  /** @deprecated use `VciDeferredParseResponse$Outbound` instead. */
  export type Outbound = VciDeferredParseResponse$Outbound;
}

export function vciDeferredParseResponseToJSON(
  vciDeferredParseResponse: VciDeferredParseResponse,
): string {
  return JSON.stringify(
    VciDeferredParseResponse$outboundSchema.parse(vciDeferredParseResponse),
  );
}

export function vciDeferredParseResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredParseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredParseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredParseResponse' from JSON`,
  );
}
