/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import {
  DeliveryMode,
  DeliveryMode$inboundSchema,
  DeliveryMode$outboundSchema,
} from "./deliverymode.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Pair,
  Pair$inboundSchema,
  Pair$Outbound,
  Pair$outboundSchema,
} from "./pair.js";

/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export const BackchannelAuthenticationCompleteResponseAction = {
  ServerError: "SERVER_ERROR",
  NoAction: "NO_ACTION",
  Notification: "NOTIFICATION",
} as const;
/**
 * The next action that the authorization server implementation should take.
 *
 * @remarks
 */
export type BackchannelAuthenticationCompleteResponseAction = ClosedEnum<
  typeof BackchannelAuthenticationCompleteResponseAction
>;

export type BackchannelAuthenticationCompleteResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: BackchannelAuthenticationCompleteResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client
   *
   * @remarks
   * application. Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  /**
   * The client ID of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientId?: number | undefined;
  /**
   * The client ID alias of the client application that has made the backchannel authentication
   *
   * @remarks
   * request.
   */
  clientIdAlias?: string | undefined;
  /**
   * `true` if the value of the client_id request parameter included in the backchannel
   *
   * @remarks
   * authentication request is the client ID alias. `false` if the value is the original
   * numeric client ID.
   */
  clientIdAliasUsed?: boolean | undefined;
  /**
   * The name of the client application which has made the backchannel authentication request.
   *
   * @remarks
   */
  clientName?: string | undefined;
  deliveryMode?: DeliveryMode | undefined;
  /**
   * The client notification endpoint to which a notification needs to be sent. This corresponds
   *
   * @remarks
   * to the `client_notification_endpoint` metadata of the client application.
   */
  clientNotificationEndpoint?: string | undefined;
  /**
   * The client notification token which needs to be embedded as a Bearer token in the Authorization
   *
   * @remarks
   * header in the notification. This is the value of the `client_notification_token` request
   * parameter included in the backchannel authentication request.
   */
  clientNotificationToken?: string | undefined;
  /**
   * The newly issued authentication request ID.
   *
   * @remarks
   */
  authReqId?: string | undefined;
  /**
   * The issued access token.
   *
   * @remarks
   */
  accessToken?: string | undefined;
  /**
   * The issued refresh token.
   *
   * @remarks
   */
  refreshToken?: string | undefined;
  /**
   * The issued ID token.
   *
   * @remarks
   */
  idToken?: string | undefined;
  /**
   * The duration of the access token in seconds.
   *
   * @remarks
   */
  accessTokenDuration?: number | undefined;
  /**
   * The duration of the refresh token in seconds.
   *
   * @remarks
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The duration of the ID token in seconds.
   *
   * @remarks
   */
  idTokenDuration?: number | undefined;
  /**
   * The issued access token in JWT format.
   *
   * @remarks
   */
  jwtAccessToken?: string | undefined;
  /**
   * The resources specified by the `resource` request parameters or by the `resource` property
   *
   * @remarks
   * in the request object. If both are given, the values in the request object should be
   * set. See "Resource Indicators for OAuth 2.0" for details.
   */
  resources?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * The attributes of this service that the client application belongs to.
   *
   * @remarks
   */
  serviceAttributes?: Array<Pair> | undefined;
  /**
   * The attributes of the client.
   *
   * @remarks
   */
  clientAttributes?: Array<Pair> | undefined;
  /**
   * the value of the `grant_id` request parameter of the device authorization request.
   *
   * @remarks
   *
   * The `grant_id` request parameter is defined in
   * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
   * , which is supported by Authlete 2.3 and newer versions.
   */
  grantId?: string | undefined;
  /**
   * The entity ID of the client.
   *
   * @remarks
   */
  clientEntityId?: string | undefined;
  /**
   * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
   *
   * @remarks
   */
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteResponseAction> = z
    .nativeEnum(BackchannelAuthenticationCompleteResponseAction);

/** @internal */
export const BackchannelAuthenticationCompleteResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteResponseAction> =
    BackchannelAuthenticationCompleteResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteResponseAction$ {
  /** @deprecated use `BackchannelAuthenticationCompleteResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteResponseAction$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteResponseAction$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationCompleteResponse$inboundSchema: z.ZodType<
  BackchannelAuthenticationCompleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: BackchannelAuthenticationCompleteResponseAction$inboundSchema
    .optional(),
  responseContent: z.string().optional(),
  clientId: z.number().int().optional(),
  clientIdAlias: z.string().optional(),
  clientIdAliasUsed: z.boolean().optional(),
  clientName: z.string().optional(),
  deliveryMode: DeliveryMode$inboundSchema.optional(),
  clientNotificationEndpoint: z.string().optional(),
  clientNotificationToken: z.string().optional(),
  authReqId: z.string().optional(),
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  idToken: z.string().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenDuration: z.number().int().optional(),
  jwtAccessToken: z.string().optional(),
  resources: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  serviceAttributes: z.array(Pair$inboundSchema).optional(),
  clientAttributes: z.array(Pair$inboundSchema).optional(),
  grantId: z.string().optional(),
  clientEntityId: z.string().optional(),
  clientEntityIdUsed: z.boolean().optional(),
});

/** @internal */
export type BackchannelAuthenticationCompleteResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  clientId?: number | undefined;
  clientIdAlias?: string | undefined;
  clientIdAliasUsed?: boolean | undefined;
  clientName?: string | undefined;
  deliveryMode?: string | undefined;
  clientNotificationEndpoint?: string | undefined;
  clientNotificationToken?: string | undefined;
  authReqId?: string | undefined;
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  idToken?: string | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenDuration?: number | undefined;
  jwtAccessToken?: string | undefined;
  resources?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  serviceAttributes?: Array<Pair$Outbound> | undefined;
  clientAttributes?: Array<Pair$Outbound> | undefined;
  grantId?: string | undefined;
  clientEntityId?: string | undefined;
  clientEntityIdUsed?: boolean | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteResponse$outboundSchema:
  z.ZodType<
    BackchannelAuthenticationCompleteResponse$Outbound,
    z.ZodTypeDef,
    BackchannelAuthenticationCompleteResponse
  > = z.object({
    resultCode: z.string().optional(),
    resultMessage: z.string().optional(),
    action: BackchannelAuthenticationCompleteResponseAction$outboundSchema
      .optional(),
    responseContent: z.string().optional(),
    clientId: z.number().int().optional(),
    clientIdAlias: z.string().optional(),
    clientIdAliasUsed: z.boolean().optional(),
    clientName: z.string().optional(),
    deliveryMode: DeliveryMode$outboundSchema.optional(),
    clientNotificationEndpoint: z.string().optional(),
    clientNotificationToken: z.string().optional(),
    authReqId: z.string().optional(),
    accessToken: z.string().optional(),
    refreshToken: z.string().optional(),
    idToken: z.string().optional(),
    accessTokenDuration: z.number().int().optional(),
    refreshTokenDuration: z.number().int().optional(),
    idTokenDuration: z.number().int().optional(),
    jwtAccessToken: z.string().optional(),
    resources: z.array(z.string()).optional(),
    authorizationDetails: AuthzDetails$outboundSchema.optional(),
    serviceAttributes: z.array(Pair$outboundSchema).optional(),
    clientAttributes: z.array(Pair$outboundSchema).optional(),
    grantId: z.string().optional(),
    clientEntityId: z.string().optional(),
    clientEntityIdUsed: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteResponse$ {
  /** @deprecated use `BackchannelAuthenticationCompleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteResponse$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteResponse$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteResponse$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationCompleteResponse$Outbound;
}

export function backchannelAuthenticationCompleteResponseToJSON(
  backchannelAuthenticationCompleteResponse:
    BackchannelAuthenticationCompleteResponse,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteResponse$outboundSchema.parse(
      backchannelAuthenticationCompleteResponse,
    ),
  );
}

export function backchannelAuthenticationCompleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteResponse' from JSON`,
  );
}
