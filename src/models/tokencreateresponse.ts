/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const TokenCreateResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type TokenCreateResponseAction = ClosedEnum<
  typeof TokenCreateResponseAction
>;

export type TokenCreateResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: TokenCreateResponseAction | undefined;
  /**
   * The newly issued access token.
   */
  accessToken?: string | undefined;
  /**
   * The ID of the client application associated with the access token.
   *
   * @remarks
   */
  clientId?: number | undefined;
  /**
   * The time at which the access token expires.
   *
   * @remarks
   */
  expiresAt?: number | undefined;
  /**
   * The duration of the newly issued access token in seconds.
   *
   * @remarks
   */
  expiresIn?: number | undefined;
  /**
   * The grant type for the newly issued access token.
   *
   * @remarks
   */
  grantType?: string | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<Property> | undefined;
  /**
   * The newly issued refresh token.
   *
   * @remarks
   */
  refreshToken?: string | undefined;
  /**
   * Scopes which are associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The subject (= unique identifier) of the user associated with the newly issued access
   *
   * @remarks
   * token.
   */
  subject?: string | undefined;
  /**
   * The token type of the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
   *
   * @remarks
   * is set to a `non-null` value), a JWT-based access token is issued along with the original
   * random-string one.
   */
  jwtAccessToken?: string | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The scopes associated with the refresh token. May be null.
   *
   * @remarks
   */
  refreshTokenScopes?: Array<string> | undefined;
  /**
   * The client Identifier that will be associated with a newly created access token.
   *
   * @remarks
   */
  clientIdentifier?: string | undefined;
  /**
   * The session ID associated with a newly created access token.
   *
   * @remarks
   *
   * NOTE: A refresh token must be associated with a session ID, which is the ID of the user's authentication
   * session, in order to be used to obtain a [Native SSO](https://openid.net/specs/openid-connect-native-sso-1_0.html)-compliant
   * ID token in the refresh token flow.
   */
  sessionId?: string | undefined;
};

/** @internal */
export const TokenCreateResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof TokenCreateResponseAction
> = z.nativeEnum(TokenCreateResponseAction);

/** @internal */
export const TokenCreateResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof TokenCreateResponseAction
> = TokenCreateResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenCreateResponseAction$ {
  /** @deprecated use `TokenCreateResponseAction$inboundSchema` instead. */
  export const inboundSchema = TokenCreateResponseAction$inboundSchema;
  /** @deprecated use `TokenCreateResponseAction$outboundSchema` instead. */
  export const outboundSchema = TokenCreateResponseAction$outboundSchema;
}

/** @internal */
export const TokenCreateResponse$inboundSchema: z.ZodType<
  TokenCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenCreateResponseAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  clientId: z.number().int().optional(),
  expiresAt: z.number().int().optional(),
  expiresIn: z.number().int().optional(),
  grantType: z.string().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  refreshToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  tokenType: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
  clientIdentifier: z.string().optional(),
  sessionId: z.string().optional(),
});

/** @internal */
export type TokenCreateResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  clientId?: number | undefined;
  expiresAt?: number | undefined;
  expiresIn?: number | undefined;
  grantType?: string | undefined;
  properties?: Array<Property$Outbound> | undefined;
  refreshToken?: string | undefined;
  scopes?: Array<string> | undefined;
  subject?: string | undefined;
  tokenType?: string | undefined;
  jwtAccessToken?: string | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenScopes?: Array<string> | undefined;
  clientIdentifier?: string | undefined;
  sessionId?: string | undefined;
};

/** @internal */
export const TokenCreateResponse$outboundSchema: z.ZodType<
  TokenCreateResponse$Outbound,
  z.ZodTypeDef,
  TokenCreateResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenCreateResponseAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  clientId: z.number().int().optional(),
  expiresAt: z.number().int().optional(),
  expiresIn: z.number().int().optional(),
  grantType: z.string().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  refreshToken: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  subject: z.string().optional(),
  tokenType: z.string().optional(),
  jwtAccessToken: z.string().optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenScopes: z.array(z.string()).optional(),
  clientIdentifier: z.string().optional(),
  sessionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenCreateResponse$ {
  /** @deprecated use `TokenCreateResponse$inboundSchema` instead. */
  export const inboundSchema = TokenCreateResponse$inboundSchema;
  /** @deprecated use `TokenCreateResponse$outboundSchema` instead. */
  export const outboundSchema = TokenCreateResponse$outboundSchema;
  /** @deprecated use `TokenCreateResponse$Outbound` instead. */
  export type Outbound = TokenCreateResponse$Outbound;
}

export function tokenCreateResponseToJSON(
  tokenCreateResponse: TokenCreateResponse,
): string {
  return JSON.stringify(
    TokenCreateResponse$outboundSchema.parse(tokenCreateResponse),
  );
}

export function tokenCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TokenCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenCreateResponse' from JSON`,
  );
}
