/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AuthorizationTicketUpdateRequest = {
  /**
   * The ticket.
   */
  ticket: string;
  /**
   * The information about the ticket.
   */
  info: string;
};

/** @internal */
export const AuthorizationTicketUpdateRequest$inboundSchema: z.ZodType<
  AuthorizationTicketUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  info: z.string(),
});

/** @internal */
export type AuthorizationTicketUpdateRequest$Outbound = {
  ticket: string;
  info: string;
};

/** @internal */
export const AuthorizationTicketUpdateRequest$outboundSchema: z.ZodType<
  AuthorizationTicketUpdateRequest$Outbound,
  z.ZodTypeDef,
  AuthorizationTicketUpdateRequest
> = z.object({
  ticket: z.string(),
  info: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationTicketUpdateRequest$ {
  /** @deprecated use `AuthorizationTicketUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AuthorizationTicketUpdateRequest$inboundSchema;
  /** @deprecated use `AuthorizationTicketUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AuthorizationTicketUpdateRequest$outboundSchema;
  /** @deprecated use `AuthorizationTicketUpdateRequest$Outbound` instead. */
  export type Outbound = AuthorizationTicketUpdateRequest$Outbound;
}

export function authorizationTicketUpdateRequestToJSON(
  authorizationTicketUpdateRequest: AuthorizationTicketUpdateRequest,
): string {
  return JSON.stringify(
    AuthorizationTicketUpdateRequest$outboundSchema.parse(
      authorizationTicketUpdateRequest,
    ),
  );
}

export function authorizationTicketUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationTicketUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationTicketUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationTicketUpdateRequest' from JSON`,
  );
}
