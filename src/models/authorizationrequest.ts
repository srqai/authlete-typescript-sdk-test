/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AuthorizationRequest = {
  /**
   * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
   *
   * @remarks
   * the authorization server implementation received from the client application.
   *
   * The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
   * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
   * the client application is `POST`.
   */
  parameters: string;
  /**
   * The arbitrary text to be attached to the ticket that will be issued from the `/auth/authorization`
   *
   * @remarks
   * API.
   *
   * The text can be retrieved later by the `/auth/authorization/ticket/info` API and can be updated
   * by the `/auth/authorization/ticket/update` API.
   *
   * The text will be compressed and encrypted when it is saved in the Authlete database.
   */
  context?: string | undefined;
};

/** @internal */
export const AuthorizationRequest$inboundSchema: z.ZodType<
  AuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameters: z.string(),
  context: z.string().optional(),
});

/** @internal */
export type AuthorizationRequest$Outbound = {
  parameters: string;
  context?: string | undefined;
};

/** @internal */
export const AuthorizationRequest$outboundSchema: z.ZodType<
  AuthorizationRequest$Outbound,
  z.ZodTypeDef,
  AuthorizationRequest
> = z.object({
  parameters: z.string(),
  context: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationRequest$ {
  /** @deprecated use `AuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = AuthorizationRequest$inboundSchema;
  /** @deprecated use `AuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = AuthorizationRequest$outboundSchema;
  /** @deprecated use `AuthorizationRequest$Outbound` instead. */
  export type Outbound = AuthorizationRequest$Outbound;
}

export function authorizationRequestToJSON(
  authorizationRequest: AuthorizationRequest,
): string {
  return JSON.stringify(
    AuthorizationRequest$outboundSchema.parse(authorizationRequest),
  );
}

export function authorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationRequest' from JSON`,
  );
}
