/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TrustAnchor = {
  /**
   * the entity ID of the trust anchor
   *
   * @remarks
   */
  entityId?: string | undefined;
  /**
   * the JWK Set document containing public keys of the trust anchor
   *
   * @remarks
   */
  jwks?: string | undefined;
};

/** @internal */
export const TrustAnchor$inboundSchema: z.ZodType<
  TrustAnchor,
  z.ZodTypeDef,
  unknown
> = z.object({
  entityId: z.string().optional(),
  jwks: z.string().optional(),
});

/** @internal */
export type TrustAnchor$Outbound = {
  entityId?: string | undefined;
  jwks?: string | undefined;
};

/** @internal */
export const TrustAnchor$outboundSchema: z.ZodType<
  TrustAnchor$Outbound,
  z.ZodTypeDef,
  TrustAnchor
> = z.object({
  entityId: z.string().optional(),
  jwks: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrustAnchor$ {
  /** @deprecated use `TrustAnchor$inboundSchema` instead. */
  export const inboundSchema = TrustAnchor$inboundSchema;
  /** @deprecated use `TrustAnchor$outboundSchema` instead. */
  export const outboundSchema = TrustAnchor$outboundSchema;
  /** @deprecated use `TrustAnchor$Outbound` instead. */
  export type Outbound = TrustAnchor$Outbound;
}

export function trustAnchorToJSON(trustAnchor: TrustAnchor): string {
  return JSON.stringify(TrustAnchor$outboundSchema.parse(trustAnchor));
}

export function trustAnchorFromJSON(
  jsonString: string,
): SafeParseResult<TrustAnchor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrustAnchor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrustAnchor' from JSON`,
  );
}
