/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientAuthorizationUpdateResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateResponse$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type ClientAuthorizationUpdateResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateResponse$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateResponse$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateResponse$ {
  /** @deprecated use `ClientAuthorizationUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ClientAuthorizationUpdateResponse$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    ClientAuthorizationUpdateResponse$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateResponse$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateResponse$Outbound;
}

export function clientAuthorizationUpdateResponseToJSON(
  clientAuthorizationUpdateResponse: ClientAuthorizationUpdateResponse,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateResponse$outboundSchema.parse(
      clientAuthorizationUpdateResponse,
    ),
  );
}

export function clientAuthorizationUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientAuthorizationUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationUpdateResponse' from JSON`,
  );
}
