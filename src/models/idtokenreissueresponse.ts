/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the token endpoint should take.
 */
export const IdtokenReissueResponseAction = {
  Ok: "OK",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  CallerError: "CALLER_ERROR",
} as const;
/**
 * The next action that the implementation of the token endpoint should take.
 */
export type IdtokenReissueResponseAction = ClosedEnum<
  typeof IdtokenReissueResponseAction
>;

export type IdtokenReissueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the token endpoint should take.
   */
  action?: IdtokenReissueResponseAction | undefined;
  /**
   * The response content that can be used as the message body of the token response that should
   *
   * @remarks
   * be returned from the token endpoint.
   */
  responseContent?: string | undefined;
  /**
   * The reissued ID token
   *
   * @remarks
   */
  idToken?: string | undefined;
};

/** @internal */
export const IdtokenReissueResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof IdtokenReissueResponseAction
> = z.nativeEnum(IdtokenReissueResponseAction);

/** @internal */
export const IdtokenReissueResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof IdtokenReissueResponseAction
> = IdtokenReissueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueResponseAction$ {
  /** @deprecated use `IdtokenReissueResponseAction$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueResponseAction$inboundSchema;
  /** @deprecated use `IdtokenReissueResponseAction$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueResponseAction$outboundSchema;
}

/** @internal */
export const IdtokenReissueResponse$inboundSchema: z.ZodType<
  IdtokenReissueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: IdtokenReissueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  idToken: z.string().optional(),
});

/** @internal */
export type IdtokenReissueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  idToken?: string | undefined;
};

/** @internal */
export const IdtokenReissueResponse$outboundSchema: z.ZodType<
  IdtokenReissueResponse$Outbound,
  z.ZodTypeDef,
  IdtokenReissueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: IdtokenReissueResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  idToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdtokenReissueResponse$ {
  /** @deprecated use `IdtokenReissueResponse$inboundSchema` instead. */
  export const inboundSchema = IdtokenReissueResponse$inboundSchema;
  /** @deprecated use `IdtokenReissueResponse$outboundSchema` instead. */
  export const outboundSchema = IdtokenReissueResponse$outboundSchema;
  /** @deprecated use `IdtokenReissueResponse$Outbound` instead. */
  export type Outbound = IdtokenReissueResponse$Outbound;
}

export function idtokenReissueResponseToJSON(
  idtokenReissueResponse: IdtokenReissueResponse,
): string {
  return JSON.stringify(
    IdtokenReissueResponse$outboundSchema.parse(idtokenReissueResponse),
  );
}

export function idtokenReissueResponseFromJSON(
  jsonString: string,
): SafeParseResult<IdtokenReissueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdtokenReissueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdtokenReissueResponse' from JSON`,
  );
}
