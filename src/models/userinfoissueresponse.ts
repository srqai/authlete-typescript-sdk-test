/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const UserinfoIssueResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  Json: "JSON",
  Jwt: "JWT",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type UserinfoIssueResponseAction = ClosedEnum<
  typeof UserinfoIssueResponseAction
>;

export type UserinfoIssueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: UserinfoIssueResponseAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  /**
   * The signature header of the response message.
   *
   * @remarks
   */
  signature?: string | undefined;
  /**
   * The signature-input header of the response message
   *
   * @remarks
   */
  signatureInput?: string | undefined;
  /**
   * The content-digest header of the response message
   *
   * @remarks
   */
  contentDigest?: string | undefined;
};

/** @internal */
export const UserinfoIssueResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof UserinfoIssueResponseAction
> = z.nativeEnum(UserinfoIssueResponseAction);

/** @internal */
export const UserinfoIssueResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof UserinfoIssueResponseAction
> = UserinfoIssueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserinfoIssueResponseAction$ {
  /** @deprecated use `UserinfoIssueResponseAction$inboundSchema` instead. */
  export const inboundSchema = UserinfoIssueResponseAction$inboundSchema;
  /** @deprecated use `UserinfoIssueResponseAction$outboundSchema` instead. */
  export const outboundSchema = UserinfoIssueResponseAction$outboundSchema;
}

/** @internal */
export const UserinfoIssueResponse$inboundSchema: z.ZodType<
  UserinfoIssueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: UserinfoIssueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  signature: z.string().optional(),
  signatureInput: z.string().optional(),
  contentDigest: z.string().optional(),
});

/** @internal */
export type UserinfoIssueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  signature?: string | undefined;
  signatureInput?: string | undefined;
  contentDigest?: string | undefined;
};

/** @internal */
export const UserinfoIssueResponse$outboundSchema: z.ZodType<
  UserinfoIssueResponse$Outbound,
  z.ZodTypeDef,
  UserinfoIssueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: UserinfoIssueResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  signature: z.string().optional(),
  signatureInput: z.string().optional(),
  contentDigest: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserinfoIssueResponse$ {
  /** @deprecated use `UserinfoIssueResponse$inboundSchema` instead. */
  export const inboundSchema = UserinfoIssueResponse$inboundSchema;
  /** @deprecated use `UserinfoIssueResponse$outboundSchema` instead. */
  export const outboundSchema = UserinfoIssueResponse$outboundSchema;
  /** @deprecated use `UserinfoIssueResponse$Outbound` instead. */
  export type Outbound = UserinfoIssueResponse$Outbound;
}

export function userinfoIssueResponseToJSON(
  userinfoIssueResponse: UserinfoIssueResponse,
): string {
  return JSON.stringify(
    UserinfoIssueResponse$outboundSchema.parse(userinfoIssueResponse),
  );
}

export function userinfoIssueResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserinfoIssueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserinfoIssueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserinfoIssueResponse' from JSON`,
  );
}
