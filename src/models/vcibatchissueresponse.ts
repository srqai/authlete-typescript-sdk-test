/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the batch credential
 *
 * @remarks
 * endpoint should take.
 */
export const VciBatchIssueResponseAction = {
  Ok: "OK",
  Unauthorized: "UNAUTHORIZED",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  CallerError: "CALLER_ERROR",
} as const;
/**
 * The next action that the implementation of the batch credential
 *
 * @remarks
 * endpoint should take.
 */
export type VciBatchIssueResponseAction = ClosedEnum<
  typeof VciBatchIssueResponseAction
>;

export type VciBatchIssueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the batch credential
   *
   * @remarks
   * endpoint should take.
   */
  action?: VciBatchIssueResponseAction | undefined;
  /**
   * The content of the response that the implementation of the batch
   *
   * @remarks
   * credential endpoint should return.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciBatchIssueResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciBatchIssueResponseAction
> = z.nativeEnum(VciBatchIssueResponseAction);

/** @internal */
export const VciBatchIssueResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciBatchIssueResponseAction
> = VciBatchIssueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueResponseAction$ {
  /** @deprecated use `VciBatchIssueResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueResponseAction$inboundSchema;
  /** @deprecated use `VciBatchIssueResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueResponseAction$outboundSchema;
}

/** @internal */
export const VciBatchIssueResponse$inboundSchema: z.ZodType<
  VciBatchIssueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchIssueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciBatchIssueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciBatchIssueResponse$outboundSchema: z.ZodType<
  VciBatchIssueResponse$Outbound,
  z.ZodTypeDef,
  VciBatchIssueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciBatchIssueResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciBatchIssueResponse$ {
  /** @deprecated use `VciBatchIssueResponse$inboundSchema` instead. */
  export const inboundSchema = VciBatchIssueResponse$inboundSchema;
  /** @deprecated use `VciBatchIssueResponse$outboundSchema` instead. */
  export const outboundSchema = VciBatchIssueResponse$outboundSchema;
  /** @deprecated use `VciBatchIssueResponse$Outbound` instead. */
  export type Outbound = VciBatchIssueResponse$Outbound;
}

export function vciBatchIssueResponseToJSON(
  vciBatchIssueResponse: VciBatchIssueResponse,
): string {
  return JSON.stringify(
    VciBatchIssueResponse$outboundSchema.parse(vciBatchIssueResponse),
  );
}

export function vciBatchIssueResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciBatchIssueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciBatchIssueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciBatchIssueResponse' from JSON`,
  );
}
