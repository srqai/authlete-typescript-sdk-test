/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Client,
  Client$inboundSchema,
  Client$Outbound,
  Client$outboundSchema,
} from "./client.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const FederationRegistrationResponseAction = {
  Ok: "OK",
  BadRequest: "BAD_REQUEST",
  NotFound: "NOT_FOUND",
  InternalServerError: "INTERNAL_SERVER_ERROR",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type FederationRegistrationResponseAction = ClosedEnum<
  typeof FederationRegistrationResponseAction
>;

export type FederationRegistrationResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: FederationRegistrationResponseAction | undefined;
  /**
   * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
   *
   * @remarks
   * header on errors.
   */
  responseContent?: string | undefined;
  client?: Client | undefined;
};

/** @internal */
export const FederationRegistrationResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationResponseAction> = z.nativeEnum(
    FederationRegistrationResponseAction,
  );

/** @internal */
export const FederationRegistrationResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof FederationRegistrationResponseAction> =
    FederationRegistrationResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationResponseAction$ {
  /** @deprecated use `FederationRegistrationResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    FederationRegistrationResponseAction$inboundSchema;
  /** @deprecated use `FederationRegistrationResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    FederationRegistrationResponseAction$outboundSchema;
}

/** @internal */
export const FederationRegistrationResponse$inboundSchema: z.ZodType<
  FederationRegistrationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: Client$inboundSchema.optional(),
});

/** @internal */
export type FederationRegistrationResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: Client$Outbound | undefined;
};

/** @internal */
export const FederationRegistrationResponse$outboundSchema: z.ZodType<
  FederationRegistrationResponse$Outbound,
  z.ZodTypeDef,
  FederationRegistrationResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: FederationRegistrationResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederationRegistrationResponse$ {
  /** @deprecated use `FederationRegistrationResponse$inboundSchema` instead. */
  export const inboundSchema = FederationRegistrationResponse$inboundSchema;
  /** @deprecated use `FederationRegistrationResponse$outboundSchema` instead. */
  export const outboundSchema = FederationRegistrationResponse$outboundSchema;
  /** @deprecated use `FederationRegistrationResponse$Outbound` instead. */
  export type Outbound = FederationRegistrationResponse$Outbound;
}

export function federationRegistrationResponseToJSON(
  federationRegistrationResponse: FederationRegistrationResponse,
): string {
  return JSON.stringify(
    FederationRegistrationResponse$outboundSchema.parse(
      federationRegistrationResponse,
    ),
  );
}

export function federationRegistrationResponseFromJSON(
  jsonString: string,
): SafeParseResult<FederationRegistrationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FederationRegistrationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederationRegistrationResponse' from JSON`,
  );
}
