/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * The result of the end-user authentication and authorization. One of the following. Details are
 *
 * @remarks
 * described in the description.
 */
export const BackchannelAuthenticationCompleteRequestResult = {
  TransactionFailed: "TRANSACTION_FAILED",
  AccessDenied: "ACCESS_DENIED",
  Authorized: "AUTHORIZED",
} as const;
/**
 * The result of the end-user authentication and authorization. One of the following. Details are
 *
 * @remarks
 * described in the description.
 */
export type BackchannelAuthenticationCompleteRequestResult = ClosedEnum<
  typeof BackchannelAuthenticationCompleteRequestResult
>;

export type BackchannelAuthenticationCompleteRequest = {
  /**
   * The ticket issued by Authlete's `/backchannel/authentication` API.
   *
   * @remarks
   */
  ticket: string;
  /**
   * The result of the end-user authentication and authorization. One of the following. Details are
   *
   * @remarks
   * described in the description.
   */
  result: BackchannelAuthenticationCompleteRequestResult;
  /**
   * The subject (= unique identifier) of the end-user.
   *
   * @remarks
   */
  subject: string;
  /**
   * The value of the sub claim that should be used in the ID token.
   *
   * @remarks
   */
  sub?: string | undefined;
  /**
   * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
   *
   * @remarks
   */
  authTime?: number | undefined;
  /**
   * The reference of the authentication context class which the end-user authentication satisfied.
   *
   * @remarks
   */
  acr?: string | undefined;
  /**
   * Additional claims which will be embedded in the ID token.
   *
   * @remarks
   */
  claims?: string | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<Property> | undefined;
  /**
   * Scopes to replace the scopes specified in the original backchannel authentication request with.
   *
   * @remarks
   * When nothing is specified for this parameter, replacement is not performed.
   */
  scopes?: Array<string> | undefined;
  /**
   * JSON that represents additional JWS header parameters for ID tokens.
   *
   * @remarks
   */
  idtHeaderParams?: string | undefined;
  /**
   * The description of the error. If this optional request parameter is given, its value is used as
   *
   * @remarks
   * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
   * To comply with the specification strictly, the description must not include characters outside
   * the set `%x20-21 / %x23-5B / %x5D-7E`.
   */
  errorDescription?: string | undefined;
  /**
   * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
   *
   * @remarks
   * property in the response to the client.
   */
  errorUri?: string | undefined;
  /**
   * the claims that the user has consented for the client application
   *
   * @remarks
   * to know.
   */
  consentedClaims?: Array<string> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT access token.
   *
   * @remarks
   */
  jwtAtClaims?: string | undefined;
  /**
   * The representation of an access token that may be issued as a result of the Authlete API call.
   *
   * @remarks
   */
  accessToken?: string | undefined;
  /**
   * The duration (in seconds) of the access token that may be issued as a result of the Authlete
   *
   * @remarks
   * API call.
   *
   * When this request parameter holds a positive integer, it is used as the duration of the access
   * token in. In other cases, this request parameter is ignored.
   */
  accessTokenDuration?: number | undefined;
  /**
   * The duration (in seconds) of the refresh token that may be issued as a result of the Authlete
   *
   * @remarks
   * API call.
   *
   * When this request parameter holds a positive integer, it is used as the duration of the refresh
   * token in. In other cases, this request parameter is ignored.
   */
  refreshTokenDuration?: number | undefined;
  /**
   * The type of the `aud` claim of the ID token being issued. Valid values are as follows.
   *
   * @remarks
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | "array" | The type of the aud claim is always an array of strings. |
   * | "string" | The type of the aud claim is always a single string. |
   * | null | The type of the aud claim remains the same as before. |
   *
   * This request parameter takes precedence over the `idTokenAudType` property of the service.
   */
  idTokenAudType?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteRequestResult$inboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteRequestResult> = z
    .nativeEnum(BackchannelAuthenticationCompleteRequestResult);

/** @internal */
export const BackchannelAuthenticationCompleteRequestResult$outboundSchema:
  z.ZodNativeEnum<typeof BackchannelAuthenticationCompleteRequestResult> =
    BackchannelAuthenticationCompleteRequestResult$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteRequestResult$ {
  /** @deprecated use `BackchannelAuthenticationCompleteRequestResult$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteRequestResult$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteRequestResult$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteRequestResult$outboundSchema;
}

/** @internal */
export const BackchannelAuthenticationCompleteRequest$inboundSchema: z.ZodType<
  BackchannelAuthenticationCompleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ticket: z.string(),
  result: BackchannelAuthenticationCompleteRequestResult$inboundSchema,
  subject: z.string(),
  sub: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  idtHeaderParams: z.string().optional(),
  errorDescription: z.string().optional(),
  errorUri: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenAudType: z.string().optional(),
});

/** @internal */
export type BackchannelAuthenticationCompleteRequest$Outbound = {
  ticket: string;
  result: string;
  subject: string;
  sub?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
  claims?: string | undefined;
  properties?: Array<Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  idtHeaderParams?: string | undefined;
  errorDescription?: string | undefined;
  errorUri?: string | undefined;
  consentedClaims?: Array<string> | undefined;
  jwtAtClaims?: string | undefined;
  accessToken?: string | undefined;
  accessTokenDuration?: number | undefined;
  refreshTokenDuration?: number | undefined;
  idTokenAudType?: string | undefined;
};

/** @internal */
export const BackchannelAuthenticationCompleteRequest$outboundSchema: z.ZodType<
  BackchannelAuthenticationCompleteRequest$Outbound,
  z.ZodTypeDef,
  BackchannelAuthenticationCompleteRequest
> = z.object({
  ticket: z.string(),
  result: BackchannelAuthenticationCompleteRequestResult$outboundSchema,
  subject: z.string(),
  sub: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  claims: z.string().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  idtHeaderParams: z.string().optional(),
  errorDescription: z.string().optional(),
  errorUri: z.string().optional(),
  consentedClaims: z.array(z.string()).optional(),
  jwtAtClaims: z.string().optional(),
  accessToken: z.string().optional(),
  accessTokenDuration: z.number().int().optional(),
  refreshTokenDuration: z.number().int().optional(),
  idTokenAudType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackchannelAuthenticationCompleteRequest$ {
  /** @deprecated use `BackchannelAuthenticationCompleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    BackchannelAuthenticationCompleteRequest$inboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    BackchannelAuthenticationCompleteRequest$outboundSchema;
  /** @deprecated use `BackchannelAuthenticationCompleteRequest$Outbound` instead. */
  export type Outbound = BackchannelAuthenticationCompleteRequest$Outbound;
}

export function backchannelAuthenticationCompleteRequestToJSON(
  backchannelAuthenticationCompleteRequest:
    BackchannelAuthenticationCompleteRequest,
): string {
  return JSON.stringify(
    BackchannelAuthenticationCompleteRequest$outboundSchema.parse(
      backchannelAuthenticationCompleteRequest,
    ),
  );
}

export function backchannelAuthenticationCompleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  BackchannelAuthenticationCompleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BackchannelAuthenticationCompleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BackchannelAuthenticationCompleteRequest' from JSON`,
  );
}
