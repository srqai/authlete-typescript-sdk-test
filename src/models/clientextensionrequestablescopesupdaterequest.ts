/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientExtensionRequestableScopesUpdateRequest = {
  /**
   * The set of scopes that the client application is allowed to request.
   *
   * @remarks
   * This parameter will be one of the following. Details are described in the description.
   *
   * - an empty set
   * - a set with at least one element
   *
   * If this parameter contains scopes that the service does not support, those scopes are just
   * ignored. Also, if this parameter is `null` or is not included in the request, it is equivalent
   * to calling `/client/extension/requestable_scopes/delete` API.
   */
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestableScopesUpdateRequest$inboundSchema:
  z.ZodType<
    ClientExtensionRequestableScopesUpdateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/** @internal */
export type ClientExtensionRequestableScopesUpdateRequest$Outbound = {
  requestableScopes?: Array<string> | undefined;
};

/** @internal */
export const ClientExtensionRequestableScopesUpdateRequest$outboundSchema:
  z.ZodType<
    ClientExtensionRequestableScopesUpdateRequest$Outbound,
    z.ZodTypeDef,
    ClientExtensionRequestableScopesUpdateRequest
  > = z.object({
    requestableScopes: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientExtensionRequestableScopesUpdateRequest$ {
  /** @deprecated use `ClientExtensionRequestableScopesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    ClientExtensionRequestableScopesUpdateRequest$inboundSchema;
  /** @deprecated use `ClientExtensionRequestableScopesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    ClientExtensionRequestableScopesUpdateRequest$outboundSchema;
  /** @deprecated use `ClientExtensionRequestableScopesUpdateRequest$Outbound` instead. */
  export type Outbound = ClientExtensionRequestableScopesUpdateRequest$Outbound;
}

export function clientExtensionRequestableScopesUpdateRequestToJSON(
  clientExtensionRequestableScopesUpdateRequest:
    ClientExtensionRequestableScopesUpdateRequest,
): string {
  return JSON.stringify(
    ClientExtensionRequestableScopesUpdateRequest$outboundSchema.parse(
      clientExtensionRequestableScopesUpdateRequest,
    ),
  );
}

export function clientExtensionRequestableScopesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ClientExtensionRequestableScopesUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ClientExtensionRequestableScopesUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ClientExtensionRequestableScopesUpdateRequest' from JSON`,
  );
}
