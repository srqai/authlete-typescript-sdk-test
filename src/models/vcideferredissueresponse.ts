/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The next action that the implementation of the deferred credential
 *
 * @remarks
 * endpoint should take.
 */
export const VciDeferredIssueResponseAction = {
  Ok: "OK",
  Forbidden: "FORBIDDEN",
  InternalServerError: "INTERNAL_SERVER_ERROR",
  CallerError: "CALLER_ERROR",
} as const;
/**
 * The next action that the implementation of the deferred credential
 *
 * @remarks
 * endpoint should take.
 */
export type VciDeferredIssueResponseAction = ClosedEnum<
  typeof VciDeferredIssueResponseAction
>;

export type VciDeferredIssueResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the implementation of the deferred credential
   *
   * @remarks
   * endpoint should take.
   */
  action?: VciDeferredIssueResponseAction | undefined;
  /**
   * The content of the response that the implementation of the deferred
   *
   * @remarks
   * credential endpoint should return.
   */
  responseContent?: string | undefined;
};

/** @internal */
export const VciDeferredIssueResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof VciDeferredIssueResponseAction
> = z.nativeEnum(VciDeferredIssueResponseAction);

/** @internal */
export const VciDeferredIssueResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof VciDeferredIssueResponseAction
> = VciDeferredIssueResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueResponseAction$ {
  /** @deprecated use `VciDeferredIssueResponseAction$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueResponseAction$inboundSchema;
  /** @deprecated use `VciDeferredIssueResponseAction$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueResponseAction$outboundSchema;
}

/** @internal */
export const VciDeferredIssueResponse$inboundSchema: z.ZodType<
  VciDeferredIssueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredIssueResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
});

/** @internal */
export type VciDeferredIssueResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
};

/** @internal */
export const VciDeferredIssueResponse$outboundSchema: z.ZodType<
  VciDeferredIssueResponse$Outbound,
  z.ZodTypeDef,
  VciDeferredIssueResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: VciDeferredIssueResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VciDeferredIssueResponse$ {
  /** @deprecated use `VciDeferredIssueResponse$inboundSchema` instead. */
  export const inboundSchema = VciDeferredIssueResponse$inboundSchema;
  /** @deprecated use `VciDeferredIssueResponse$outboundSchema` instead. */
  export const outboundSchema = VciDeferredIssueResponse$outboundSchema;
  /** @deprecated use `VciDeferredIssueResponse$Outbound` instead. */
  export type Outbound = VciDeferredIssueResponse$Outbound;
}

export function vciDeferredIssueResponseToJSON(
  vciDeferredIssueResponse: VciDeferredIssueResponse,
): string {
  return JSON.stringify(
    VciDeferredIssueResponse$outboundSchema.parse(vciDeferredIssueResponse),
  );
}

export function vciDeferredIssueResponseFromJSON(
  jsonString: string,
): SafeParseResult<VciDeferredIssueResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VciDeferredIssueResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VciDeferredIssueResponse' from JSON`,
  );
}
