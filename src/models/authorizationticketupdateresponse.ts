/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The result of the /auth/authorization/ticket/info API call.
 */
export const AuthorizationTicketUpdateResponseAction = {
  Ok: "OK",
  NotFound: "NOT_FOUND",
  CallerError: "CALLER_ERROR",
  AuthleteError: "AUTHLETE_ERROR",
} as const;
/**
 * The result of the /auth/authorization/ticket/info API call.
 */
export type AuthorizationTicketUpdateResponseAction = ClosedEnum<
  typeof AuthorizationTicketUpdateResponseAction
>;

export type AuthorizationTicketUpdateResponse = {
  /**
   * Information about the ticket.
   */
  info?: string | undefined;
  /**
   * The result of the /auth/authorization/ticket/info API call.
   */
  action?: AuthorizationTicketUpdateResponseAction | undefined;
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthorizationTicketUpdateResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof AuthorizationTicketUpdateResponseAction> = z
    .nativeEnum(AuthorizationTicketUpdateResponseAction);

/** @internal */
export const AuthorizationTicketUpdateResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof AuthorizationTicketUpdateResponseAction> =
    AuthorizationTicketUpdateResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationTicketUpdateResponseAction$ {
  /** @deprecated use `AuthorizationTicketUpdateResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    AuthorizationTicketUpdateResponseAction$inboundSchema;
  /** @deprecated use `AuthorizationTicketUpdateResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    AuthorizationTicketUpdateResponseAction$outboundSchema;
}

/** @internal */
export const AuthorizationTicketUpdateResponse$inboundSchema: z.ZodType<
  AuthorizationTicketUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  info: z.string().optional(),
  action: AuthorizationTicketUpdateResponseAction$inboundSchema.optional(),
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/** @internal */
export type AuthorizationTicketUpdateResponse$Outbound = {
  info?: string | undefined;
  action?: string | undefined;
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
};

/** @internal */
export const AuthorizationTicketUpdateResponse$outboundSchema: z.ZodType<
  AuthorizationTicketUpdateResponse$Outbound,
  z.ZodTypeDef,
  AuthorizationTicketUpdateResponse
> = z.object({
  info: z.string().optional(),
  action: AuthorizationTicketUpdateResponseAction$outboundSchema.optional(),
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationTicketUpdateResponse$ {
  /** @deprecated use `AuthorizationTicketUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = AuthorizationTicketUpdateResponse$inboundSchema;
  /** @deprecated use `AuthorizationTicketUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    AuthorizationTicketUpdateResponse$outboundSchema;
  /** @deprecated use `AuthorizationTicketUpdateResponse$Outbound` instead. */
  export type Outbound = AuthorizationTicketUpdateResponse$Outbound;
}

export function authorizationTicketUpdateResponseToJSON(
  authorizationTicketUpdateResponse: AuthorizationTicketUpdateResponse,
): string {
  return JSON.stringify(
    AuthorizationTicketUpdateResponse$outboundSchema.parse(
      authorizationTicketUpdateResponse,
    ),
  );
}

export function authorizationTicketUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationTicketUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationTicketUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationTicketUpdateResponse' from JSON`,
  );
}
