/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthzDetails,
  AuthzDetails$inboundSchema,
  AuthzDetails$Outbound,
  AuthzDetails$outboundSchema,
} from "./authzdetails.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

/**
 * The next action that the authorization server implementation should take.
 */
export const TokenUpdateResponseAction = {
  InternalServerError: "INTERNAL_SERVER_ERROR",
  BadRequest: "BAD_REQUEST",
  Forbidden: "FORBIDDEN",
  NotFound: "NOT_FOUND",
  Ok: "OK",
} as const;
/**
 * The next action that the authorization server implementation should take.
 */
export type TokenUpdateResponseAction = ClosedEnum<
  typeof TokenUpdateResponseAction
>;

export type TokenUpdateResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   */
  action?: TokenUpdateResponseAction | undefined;
  /**
   * The access token which has been specified by the request.
   */
  accessToken?: string | undefined;
  /**
   * The date at which the access token will expire.
   *
   * @remarks
   */
  accessTokenExpiresAt?: number | undefined;
  /**
   * The extra properties associated with the access token.
   *
   * @remarks
   */
  properties?: Array<Property> | undefined;
  /**
   * The scopes associated with the access token.
   *
   * @remarks
   */
  scopes?: Array<string> | undefined;
  /**
   * The authorization details. This represents the value of the `authorization_details`
   *
   * @remarks
   * request parameter in the preceding device authorization request which is defined in
   * "OAuth 2.0 Rich Authorization Requests".
   */
  authorizationDetails?: AuthzDetails | undefined;
  /**
   * The token type associated with the access token.
   *
   * @remarks
   */
  tokenType?: string | undefined;
  /**
   * the flag which indicates whether the access token is for an external
   *
   * @remarks
   * attachment.
   */
  forExternalAttachment?: boolean | undefined;
  /**
   * Set the unique token identifier.
   *
   * @remarks
   */
  tokenId?: string | undefined;
  /**
   * The datetime at which the newly issued refresh token will expire.
   *
   * @remarks
   * The value is represented in milliseconds since the Unix epoch (1970-01-01).
   */
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const TokenUpdateResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof TokenUpdateResponseAction
> = z.nativeEnum(TokenUpdateResponseAction);

/** @internal */
export const TokenUpdateResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof TokenUpdateResponseAction
> = TokenUpdateResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenUpdateResponseAction$ {
  /** @deprecated use `TokenUpdateResponseAction$inboundSchema` instead. */
  export const inboundSchema = TokenUpdateResponseAction$inboundSchema;
  /** @deprecated use `TokenUpdateResponseAction$outboundSchema` instead. */
  export const outboundSchema = TokenUpdateResponseAction$outboundSchema;
}

/** @internal */
export const TokenUpdateResponse$inboundSchema: z.ZodType<
  TokenUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenUpdateResponseAction$inboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$inboundSchema.optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/** @internal */
export type TokenUpdateResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  accessToken?: string | undefined;
  accessTokenExpiresAt?: number | undefined;
  properties?: Array<Property$Outbound> | undefined;
  scopes?: Array<string> | undefined;
  authorizationDetails?: AuthzDetails$Outbound | undefined;
  tokenType?: string | undefined;
  forExternalAttachment?: boolean | undefined;
  tokenId?: string | undefined;
  refreshTokenExpiresAt?: number | undefined;
};

/** @internal */
export const TokenUpdateResponse$outboundSchema: z.ZodType<
  TokenUpdateResponse$Outbound,
  z.ZodTypeDef,
  TokenUpdateResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: TokenUpdateResponseAction$outboundSchema.optional(),
  accessToken: z.string().optional(),
  accessTokenExpiresAt: z.number().int().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  scopes: z.array(z.string()).optional(),
  authorizationDetails: AuthzDetails$outboundSchema.optional(),
  tokenType: z.string().optional(),
  forExternalAttachment: z.boolean().optional(),
  tokenId: z.string().optional(),
  refreshTokenExpiresAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenUpdateResponse$ {
  /** @deprecated use `TokenUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = TokenUpdateResponse$inboundSchema;
  /** @deprecated use `TokenUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = TokenUpdateResponse$outboundSchema;
  /** @deprecated use `TokenUpdateResponse$Outbound` instead. */
  export type Outbound = TokenUpdateResponse$Outbound;
}

export function tokenUpdateResponseToJSON(
  tokenUpdateResponse: TokenUpdateResponse,
): string {
  return JSON.stringify(
    TokenUpdateResponse$outboundSchema.parse(tokenUpdateResponse),
  );
}

export function tokenUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TokenUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenUpdateResponse' from JSON`,
  );
}
