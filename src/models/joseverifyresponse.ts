/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type JoseVerifyResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The result of the verification on the JOSE object.
   *
   * @remarks
   */
  valid?: boolean | undefined;
  /**
   * The result of the signature verification.
   *
   * @remarks
   */
  signatureValid?: boolean | undefined;
  /**
   * The list of missing claims.
   *
   * @remarks
   */
  missingClaims?: Array<string> | undefined;
  /**
   * The list of invalid claims.
   *
   * @remarks
   */
  invalidClaims?: Array<string> | undefined;
  /**
   * The list of error messages.
   *
   * @remarks
   */
  errorDescriptions?: Array<string> | undefined;
};

/** @internal */
export const JoseVerifyResponse$inboundSchema: z.ZodType<
  JoseVerifyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  valid: z.boolean().optional(),
  signatureValid: z.boolean().optional(),
  missingClaims: z.array(z.string()).optional(),
  invalidClaims: z.array(z.string()).optional(),
  errorDescriptions: z.array(z.string()).optional(),
});

/** @internal */
export type JoseVerifyResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  valid?: boolean | undefined;
  signatureValid?: boolean | undefined;
  missingClaims?: Array<string> | undefined;
  invalidClaims?: Array<string> | undefined;
  errorDescriptions?: Array<string> | undefined;
};

/** @internal */
export const JoseVerifyResponse$outboundSchema: z.ZodType<
  JoseVerifyResponse$Outbound,
  z.ZodTypeDef,
  JoseVerifyResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  valid: z.boolean().optional(),
  signatureValid: z.boolean().optional(),
  missingClaims: z.array(z.string()).optional(),
  invalidClaims: z.array(z.string()).optional(),
  errorDescriptions: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JoseVerifyResponse$ {
  /** @deprecated use `JoseVerifyResponse$inboundSchema` instead. */
  export const inboundSchema = JoseVerifyResponse$inboundSchema;
  /** @deprecated use `JoseVerifyResponse$outboundSchema` instead. */
  export const outboundSchema = JoseVerifyResponse$outboundSchema;
  /** @deprecated use `JoseVerifyResponse$Outbound` instead. */
  export type Outbound = JoseVerifyResponse$Outbound;
}

export function joseVerifyResponseToJSON(
  joseVerifyResponse: JoseVerifyResponse,
): string {
  return JSON.stringify(
    JoseVerifyResponse$outboundSchema.parse(joseVerifyResponse),
  );
}

export function joseVerifyResponseFromJSON(
  jsonString: string,
): SafeParseResult<JoseVerifyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JoseVerifyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JoseVerifyResponse' from JSON`,
  );
}
