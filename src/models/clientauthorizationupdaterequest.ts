/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientAuthorizationUpdateRequest = {
  /**
   * The subject (= unique identifier) of the end-user who has granted authorization to the client
   *
   * @remarks
   * application.
   */
  subject: string;
  /**
   * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
   *
   * @remarks
   * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
   * scope names listed in this request parameter should be delimited by spaces (after form encoding,
   * spaces are converted to `+`).
   */
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateRequest$inboundSchema: z.ZodType<
  ClientAuthorizationUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type ClientAuthorizationUpdateRequest$Outbound = {
  subject: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ClientAuthorizationUpdateRequest$outboundSchema: z.ZodType<
  ClientAuthorizationUpdateRequest$Outbound,
  z.ZodTypeDef,
  ClientAuthorizationUpdateRequest
> = z.object({
  subject: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientAuthorizationUpdateRequest$ {
  /** @deprecated use `ClientAuthorizationUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ClientAuthorizationUpdateRequest$inboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ClientAuthorizationUpdateRequest$outboundSchema;
  /** @deprecated use `ClientAuthorizationUpdateRequest$Outbound` instead. */
  export type Outbound = ClientAuthorizationUpdateRequest$Outbound;
}

export function clientAuthorizationUpdateRequestToJSON(
  clientAuthorizationUpdateRequest: ClientAuthorizationUpdateRequest,
): string {
  return JSON.stringify(
    ClientAuthorizationUpdateRequest$outboundSchema.parse(
      clientAuthorizationUpdateRequest,
    ),
  );
}

export function clientAuthorizationUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientAuthorizationUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientAuthorizationUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientAuthorizationUpdateRequest' from JSON`,
  );
}
