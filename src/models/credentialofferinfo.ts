/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Property,
  Property$inboundSchema,
  Property$Outbound,
  Property$outboundSchema,
} from "./property.js";

export type CredentialOfferInfo = {
  /**
   * The identifier of the credential offer.
   */
  identifier?: string | undefined;
  /**
   * The credential offer in the JSON format.
   */
  credentialOffer?: string | undefined;
  /**
   * The identifier of the credential issuer.
   */
  credentialIssuer?: string | undefined;
  /**
   * The flag indicating whether the `authorization_code` object is
   *
   * @remarks
   * included in the `grants` object.
   */
  authorizationCodeGrantIncluded?: boolean | undefined;
  /**
   * The flag indicating whether the `issuer_state` property is
   *
   * @remarks
   * included in the `authorization_code` object in the `grants`
   * object.
   */
  issuerStateIncluded?: boolean | undefined;
  /**
   * The value of the `issuer_state` property in the
   *
   * @remarks
   * `authorization_code` object in the `grants` object.
   */
  issuerState?: string | undefined;
  /**
   * The flag indicating whether the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object is
   * included in the `grants` object.
   */
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  /**
   * The value of the `pre-authorized_code` property in the
   *
   * @remarks
   * `urn:ietf:params:oauth:grant-type:pre-authorized_code` object in
   * the `grants` object.
   */
  preAuthorizedCode?: string | undefined;
  /**
   * The subject associated with the credential offer.
   */
  subject?: string | undefined;
  /**
   * The time at which the credential offer will expire.
   */
  expiresAt?: number | undefined;
  /**
   * The general-purpose arbitrary string.
   */
  context?: string | undefined;
  /**
   * Extra properties to associate with the credential offer.
   */
  properties?: Array<Property> | undefined;
  /**
   * Additional claims that are added to the payload part of the JWT
   *
   * @remarks
   * access token.
   */
  jwtAtClaims?: string | undefined;
  /**
   * The time at which the user authentication was performed during
   *
   * @remarks
   * the course of issuing the credential offer.
   */
  authTime?: number | undefined;
  /**
   * The Authentication Context Class Reference of the user authentication
   *
   * @remarks
   * performed during the course of issuing the credential offer.
   */
  acr?: string | undefined;
  /**
   * The value of the `credential_configuration_ids` property of the credential offer.
   *
   * @remarks
   *
   * ```
   * {
   *   "credential_issuer": "...",
   *   "credential_configuration_ids": [ ... ],
   *   "grants": { ... }
   * }
   * ```
   */
  credentialConfigurationIds?: Array<string> | undefined;
  /**
   * The transaction code.
   *
   * @remarks
   */
  txCode?: string | undefined;
  /**
   * The input mode of the transaction code.
   *
   * @remarks
   */
  txCodeInputMode?: string | undefined;
  /**
   * The description of the transaction code.
   *
   * @remarks
   */
  txCodeDescription?: string | undefined;
};

/** @internal */
export const CredentialOfferInfo$inboundSchema: z.ZodType<
  CredentialOfferInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(Property$inboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  credentialConfigurationIds: z.array(z.string()).optional(),
  txCode: z.string().optional(),
  txCodeInputMode: z.string().optional(),
  txCodeDescription: z.string().optional(),
});

/** @internal */
export type CredentialOfferInfo$Outbound = {
  identifier?: string | undefined;
  credentialOffer?: string | undefined;
  credentialIssuer?: string | undefined;
  authorizationCodeGrantIncluded?: boolean | undefined;
  issuerStateIncluded?: boolean | undefined;
  issuerState?: string | undefined;
  preAuthorizedCodeGrantIncluded?: boolean | undefined;
  preAuthorizedCode?: string | undefined;
  subject?: string | undefined;
  expiresAt?: number | undefined;
  context?: string | undefined;
  properties?: Array<Property$Outbound> | undefined;
  jwtAtClaims?: string | undefined;
  authTime?: number | undefined;
  acr?: string | undefined;
  credentialConfigurationIds?: Array<string> | undefined;
  txCode?: string | undefined;
  txCodeInputMode?: string | undefined;
  txCodeDescription?: string | undefined;
};

/** @internal */
export const CredentialOfferInfo$outboundSchema: z.ZodType<
  CredentialOfferInfo$Outbound,
  z.ZodTypeDef,
  CredentialOfferInfo
> = z.object({
  identifier: z.string().optional(),
  credentialOffer: z.string().optional(),
  credentialIssuer: z.string().optional(),
  authorizationCodeGrantIncluded: z.boolean().optional(),
  issuerStateIncluded: z.boolean().optional(),
  issuerState: z.string().optional(),
  preAuthorizedCodeGrantIncluded: z.boolean().optional(),
  preAuthorizedCode: z.string().optional(),
  subject: z.string().optional(),
  expiresAt: z.number().int().optional(),
  context: z.string().optional(),
  properties: z.array(Property$outboundSchema).optional(),
  jwtAtClaims: z.string().optional(),
  authTime: z.number().int().optional(),
  acr: z.string().optional(),
  credentialConfigurationIds: z.array(z.string()).optional(),
  txCode: z.string().optional(),
  txCodeInputMode: z.string().optional(),
  txCodeDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CredentialOfferInfo$ {
  /** @deprecated use `CredentialOfferInfo$inboundSchema` instead. */
  export const inboundSchema = CredentialOfferInfo$inboundSchema;
  /** @deprecated use `CredentialOfferInfo$outboundSchema` instead. */
  export const outboundSchema = CredentialOfferInfo$outboundSchema;
  /** @deprecated use `CredentialOfferInfo$Outbound` instead. */
  export type Outbound = CredentialOfferInfo$Outbound;
}

export function credentialOfferInfoToJSON(
  credentialOfferInfo: CredentialOfferInfo,
): string {
  return JSON.stringify(
    CredentialOfferInfo$outboundSchema.parse(credentialOfferInfo),
  );
}

export function credentialOfferInfoFromJSON(
  jsonString: string,
): SafeParseResult<CredentialOfferInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CredentialOfferInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CredentialOfferInfo' from JSON`,
  );
}
