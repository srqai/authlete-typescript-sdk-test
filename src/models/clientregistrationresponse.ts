/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Client,
  Client$inboundSchema,
  Client$Outbound,
  Client$outboundSchema,
} from "./client.js";
import {
  ClientRegistrationResponseAction,
  ClientRegistrationResponseAction$inboundSchema,
  ClientRegistrationResponseAction$outboundSchema,
} from "./clientregistrationresponseaction.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientRegistrationResponse = {
  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string | undefined;
  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string | undefined;
  /**
   * The next action that the authorization server implementation should take.
   *
   * @remarks
   */
  action?: ClientRegistrationResponseAction | undefined;
  /**
   * The content that the authorization server implementation is to return to the client application.
   *
   * @remarks
   * Its format varies depending on the value of `action` parameter.
   */
  responseContent?: string | undefined;
  client?: Client | undefined;
};

/** @internal */
export const ClientRegistrationResponse$inboundSchema: z.ZodType<
  ClientRegistrationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationResponseAction$inboundSchema.optional(),
  responseContent: z.string().optional(),
  client: Client$inboundSchema.optional(),
});

/** @internal */
export type ClientRegistrationResponse$Outbound = {
  resultCode?: string | undefined;
  resultMessage?: string | undefined;
  action?: string | undefined;
  responseContent?: string | undefined;
  client?: Client$Outbound | undefined;
};

/** @internal */
export const ClientRegistrationResponse$outboundSchema: z.ZodType<
  ClientRegistrationResponse$Outbound,
  z.ZodTypeDef,
  ClientRegistrationResponse
> = z.object({
  resultCode: z.string().optional(),
  resultMessage: z.string().optional(),
  action: ClientRegistrationResponseAction$outboundSchema.optional(),
  responseContent: z.string().optional(),
  client: Client$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientRegistrationResponse$ {
  /** @deprecated use `ClientRegistrationResponse$inboundSchema` instead. */
  export const inboundSchema = ClientRegistrationResponse$inboundSchema;
  /** @deprecated use `ClientRegistrationResponse$outboundSchema` instead. */
  export const outboundSchema = ClientRegistrationResponse$outboundSchema;
  /** @deprecated use `ClientRegistrationResponse$Outbound` instead. */
  export type Outbound = ClientRegistrationResponse$Outbound;
}

export function clientRegistrationResponseToJSON(
  clientRegistrationResponse: ClientRegistrationResponse,
): string {
  return JSON.stringify(
    ClientRegistrationResponse$outboundSchema.parse(clientRegistrationResponse),
  );
}

export function clientRegistrationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ClientRegistrationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientRegistrationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientRegistrationResponse' from JSON`,
  );
}
