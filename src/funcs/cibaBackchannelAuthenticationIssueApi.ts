/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteTestCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteTestError } from "../models/errors/authletetesterror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Issue Backchannel Authentication Response
 *
 * @remarks
 * This API prepares JSON that contains an `auth_req_id`. The JSON should be used as the response body
 * of the response which is returned to the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)
 *
 * <br>
 * <details>
 * <summary>Description</summary>
 *
 * This API is supposed to be called from within the implementation of the backchannel authentication
 * endpoint of the service in order to generate a successful response to the client application.
 *
 * The description of the `/backchannel/authentication` API describes the timing when this API should
 * be called and the meaning of request parameters. See [AUTH_REQ_ID ISSUE] in `USER_IDENTIFICATION`.
 *
 * The response from `/backchannel/authentication/issue` API has some parameters. Among them, it is
 * `action` parameter that the authorization server implementation should check first because it denotes
 * the next `action` that the authorization server implementation should take. According to the value
 * of `action`, the authorization server implementation must take the steps described below.
 *
 * ```java
 * @POST
 * @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
 * public Response post(String parameters)
 * {
 *     // 'parameters' is the entity body of the backchannel authentication request.
 *     ......
 * }
 * ```
 *
 * The endpoint implementation does not have to parse the request parameters from the client application
 * because Authlete's `/backchannel/authentication` API does it.
 *
 * The response from `/backchannel/authentication` API has various parameters. Among them, it is `action`
 * parameter that the authorization server implementation should check first because it denotes the
 * next action that the authorization server implementation should take. According to the value of
 * `action`, the service implementation must take the steps described below.
 *
 * **INTERNAL_SERVER_ERROR**
 *
 * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
 * server implementation was wrong or that an error occurred in Authlete.
 * In either case, from the viewpoint of the client application, it is an error on the server side.
 * Therefore, the service implementation should generate a response to the client application with
 * HTTP status of "500 Internal Server Error" and `application/json`.
 *
 * The value of `responseContent` is a JSON string which describes the error, so it can be used as
 * the entity body of the response.
 *
 * The following illustrates the response which the service implementation should generate and return
 * to the client application.
 *
 * ```
 * HTTP/1.1 500 Internal Server Error
 * Content-Type: application/json
 * Cache-Control: no-store
 * Pragma: no-cache
 *
 * {responseContent}
 * ```
 *
 * **INVALID_TICKET**
 *
 * When the value of `action` is `INVALID_TICKET`, it means that the ticket included in the API call
 * was invalid. For example, it does not exist or has expired.
 *
 * From a viewpoint of the client application, this is an error on the server side. Therefore, the
 * authorization server implementation should generate a response to the client application with
 * "500 Internal Server Error" and `application/json`.
 *
 * You can build an error response in the same way as shown in the description for the case of `INTERNAL_SERVER_ERROR`.
 *
 * **OK**
 *
 * When the value of `action` is `OK`, it means that Authlete has succeeded in preparing JSON that
 * contains an `auth_req_id`. The JSON should be used as the response body of the response that is
 * returned to the client from the backchannel authentication endpoint. `responseContent` contains
 * the JSON.
 *
 * The following illustrates the response which the authorization server implementation should generate
 * and return to the client application.
 *
 * ```
 * HTTP/1.1 200 OK
 * Content-Type: text/html;charset=UTF-8
 * Cache-Control: no-store
 * Pragma: no-cache
 *
 * {responseContent}
 * ```
 * </details>
 */
export function cibaBackchannelAuthenticationIssueApi(
  client: AuthleteTestCore,
  request: operations.BackchannelAuthenticationIssueApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.BackchannelAuthenticationIssueResponse,
    | errors.ResultError
    | AuthleteTestError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteTestCore,
  request: operations.BackchannelAuthenticationIssueApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.BackchannelAuthenticationIssueResponse,
      | errors.ResultError
      | AuthleteTestError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.BackchannelAuthenticationIssueApiRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON(
    "body",
    payload.backchannel_authentication_issue_request,
    { explode: true },
  );

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/backchannel/authentication/issue")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "backchannel_authentication_issue_api",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.BackchannelAuthenticationIssueResponse,
    | errors.ResultError
    | AuthleteTestError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.BackchannelAuthenticationIssueResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
