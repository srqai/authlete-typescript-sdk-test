/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteError } from "../models/errors/authleteerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Process UserInfo Request
 *
 * @remarks
 * This API gathers information about a user.
 *
 * <br>
 * <details>
 * <summary>Description</summary>
 *
 * This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
 * of the authorization server in order to get information about the user that is associated with
 * an access token.
 *
 * The response from `/auth/userinfo` API has various parameters. Among them, it is `action` parameter
 * that the authorization server implementation should check first because it denotes the next action
 * that the authorization server implementation should take. According to the value of `action`, the
 * service implementation must take the steps described below.
 *
 * **INTERNAL_SERVER_ERROR**
 *
 * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
 * server implementation was wrong or that an error occurred in Authlete. In either case, from the
 * viewpoint of the client application, it is an error on the server side. Therefore, the service
 * implementation should generate a response to the client application with HTTP status of "500 Internal
 * Server Error".
 *
 * The value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
 * (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`
 * as the value of`WWW-Authenticate` header.
 *
 * The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
 * 1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
 * Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.
 *
 * ```
 * HTTP/1.1 500 Internal Server Error
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **BAD_REQUEST**
 *
 * When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
 * does not contain an access token (= the request from the authorization server implementation to
 * Authlete does not contain `token` parameter).
 *
 * The value of `responseContent` is a string which describes the error in the format
 * of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the
 * userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
 * header.
 *
 * The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
 * 1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
 * Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.
 *
 * ```
 * HTTP/1.1 400 Bad Request
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **UNAUTHORIZED**
 *
 * When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has
 * expired, or is not associated with any subject (= any user account).
 *
 * The value of `responseContent` is a string which describes the error in the format of [RFC
 * 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
 * endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
 * header.
 *
 * The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
 * 1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
 * Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.
 *
 * ```
 * HTTP/1.1 401 Unauthorized
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **FORBIDDEN**
 *
 * When the value of `action` is `FORBIDDEN`, it means that the access token does not include the
 * `openid` scope.
 *
 * The value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
 * (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`
 * as the value of`WWW-Authenticate` header.
 *
 * The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
 * 1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
 * Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.
 *
 * ```
 * HTTP/1.1 403 Forbidden
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **OK**
 *
 * When the value of `action` is `OK`, it means that the access token which the client application
 * presented is valid. To be concrete, it means that the access token exists, has not expired, includes
 * the openid scope, and is associated with a subject (= a user account).
 *
 * What the userinfo endpoint implementation should do next is to collect information about the subject
 * (user) from your database. The value of the `subject` is contained in the subject parameter in the
 * response from this API and the names of data, i.e., the claims names are contained in the claims
 * parameter in the response. For example, if the `subject` parameter is `joe123` and the claims
 * parameter is `[ "given_name", "email" ]`, you need to extract information about joe123's given name
 * and email from your database.
 *
 * Then, call Authlete's `/auth/userinfo/issue` API with the collected information and the access token
 * in order to make Authlete generate an ID token.
 *
 * If an error occurred during the above steps, generate an error response to the client. The response
 * should comply with [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750). For example, if the
 * subject associated with the access token does not exist in your database any longer, you may feel
 * like generating a response like below.
 *
 * ```
 * HTTP/1.1 400 Bad Request
 * WWW-Authenticate: Bearer error="invalid_token",
 *  error_description="The subject associated with the access token does not exist."
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * Also, an error might occur on database access. If you treat the error as an internal server error,
 * then the response would be like the following.
 *
 * ```
 * HTTP/1.1 500 Internal Server Error
 * WWW-Authenticate: Bearer error="server_error",
 *  error_description="Failed to extract information about the subject from the database."
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 * </details>
 */
export function userinfoEndpointProcessUserInfo(
  client: AuthleteCore,
  request: operations.AuthUserinfoApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.UserinfoResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteCore,
  request: operations.AuthUserinfoApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.UserinfoResponse,
      | errors.ResultError
      | AuthleteError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.AuthUserinfoApiRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.userinfo_request, { explode: true });

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/auth/userinfo")(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "auth_userinfo_api",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.UserinfoResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.UserinfoResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
