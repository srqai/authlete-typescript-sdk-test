/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteError } from "../models/errors/authleteerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Register Client
 *
 * @remarks
 * Register a client. This API is supposed to be used to implement a client registration endpoint that
 * complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591) (OAuth 2.0 Dynamic Client
 * Registration Protocol).
 *
 * <br>
 * <details>
 * <summary>Description</summary>
 *
 * This API is supposed to be called from the within the implementation of the client registration
 * endpoint of the authorization server. The authorization server implementation should retrieve
 * the value of `action` from the response and take the following steps according to the value.
 *
 * **INTERNAL_SERVER_ERROR**
 *
 * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization
 * server implementation was wrong or that an error occurred in Authlete.
 *
 * In either case, from a viewpoint of the client or developer, it is an error on the server side.
 * Therefore, the authorization server implementation should generate a response with "500 Internal
 * Server Error"s and `application/json`.
 *
 * The value of `responseContent` is a JSON string which describes the error, so it can be used as
 * the entity body of the response.
 *
 * The following illustrates the response which the authorization server implementation should generate
 * and return to the client or developer.
 *
 * ```
 * HTTP/1.1 500 Internal Server Error
 * Content-Type: application/json
 * Cache-Control: no-store
 * Pragma: no-cache
 *
 * {responseContent}
 * ```
 *
 * The endpoint implementation may return another different response to the client or developer since
 * "500 Internal Server Error" is not required by the specification.
 *
 * **BAD_REQUEST**
 *
 * When the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer
 * was wrong.
 *
 * The authorization server implementation should generate a response with "400 Bad Request" and `application/json`.
 *
 * The value of `responseContent` is a JSON string which describes the error, so it can be used
 * as the entity body of the response.
 *
 * The following illustrates the response which the authorization server implementation should generate
 * and return to the client or developer.
 *
 * ```
 * HTTP/1.1 400 Bad Request
 * Content-Type: application/json
 * Cache-Control: no-store
 * Pragma: no-cache
 *
 * {responseContent}
 * ```
 *
 * **CREATED**
 *
 * When the value of `action` is `CREATED`, it means that the request from the client or developer is
 * valid.
 *
 * The authorization server implementation should generate a response to the client or developer with
 * "201 CREATED" and `application/json`.
 *
 * The `responseContent` a JSON string which can be used as the entity body of the response.
 *
 * The following illustrates the response which the authorization server implementation should generate
 * and return to the client or developer.
 *
 * ```
 * HTTP/1.1 201 CREATED
 * Content-Type: application/json
 * Cache-Control: no-store
 * Pragma: no-cache
 *
 * {responseContent}
 * ```
 * </details>
 */
export function clientRegistrationRegister(
  client: AuthleteCore,
  request: operations.ClientRegistrationApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.ClientRegistrationResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteCore,
  request: operations.ClientRegistrationApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.ClientRegistrationResponse,
      | errors.ResultError
      | AuthleteError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.ClientRegistrationApiRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RequestBody, { explode: true });

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/client/registration")(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "client_registration_api",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.ClientRegistrationResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.ClientRegistrationResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
