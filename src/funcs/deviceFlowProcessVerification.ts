/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteTestCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteTestError } from "../models/errors/authletetesterror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Process Device Verification Request
 *
 * @remarks
 * The API returns information associated with a user code.
 *
 * <br>
 * <details>
 * <summary>Description</summary>
 *
 * After receiving a response from the device authorization endpoint of the authorization server,
 * the client application shows the end-user the user code and the verification URI which are included
 * in the device authorization response. Then, the end-user will access the verification URI using
 * a web browser on another device (typically, a smart phone). In normal implementations, the verification
 * endpoint will return an HTML page with an input form where the end-user inputs a user code. The
 * authorization server will receive a user code from the form.
 *
 * After receiving a user code, the authorization server should call Authlete's `/device/verification`
 * API with the user code. And then, the authorization server implementation should retrieve the value
 * of `action` parameter from the API response and take the following steps according to the value.
 *
 * **SERVER_ERROR**
 *
 * When the value of `action` is `SERVER_ERROR`, it means that an error occurred on Authlete side. The
 * authorization server implementation should tell the end-user that something wrong happened and
 * urge her to re-initiate a device flow.
 *
 * **NOT_EXIST**
 *
 * When the value of `action` is `NOT_EXIST`, it means that the user code does not exist. The authorization
 * server implementation should tell the end-user that the user code is invalid and urge her to retry
 * to input a valid user code.
 *
 * **EXPIRED**
 *
 * When the value of `action` is `EXPIRED`, it means that the user code has expired. The authorization
 * server implementation should tell the end-user that the user code has expired and urge her to
 * re-initiate a device flow.
 *
 * **VALID**
 *
 * When the value of `action` is `VALID`, it means that the user code exists, has not expired, and
 * belongs to the service. The authorization server implementation should interact with the end-user
 * to ask whether she approves or rejects the authorization request from the device.
 * </details>
 */
export function deviceFlowProcessVerification(
  client: AuthleteTestCore,
  request: operations.DeviceVerificationApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.DeviceVerificationResponse,
    | errors.ResultError
    | AuthleteTestError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteTestCore,
  request: operations.DeviceVerificationApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.DeviceVerificationResponse,
      | errors.ResultError
      | AuthleteTestError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.DeviceVerificationApiRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.device_verification_request, {
    explode: true,
  });

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/device/verification")(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "device_verification_api",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.DeviceVerificationResponse,
    | errors.ResultError
    | AuthleteTestError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.DeviceVerificationResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
