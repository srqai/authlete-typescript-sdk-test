/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteTestCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteTestError } from "../models/errors/authletetesterror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Fail Backchannel Authentication Request
 *
 * @remarks
 * The API prepares JSON that contains an error. The JSON should be used as the response body of the
 * response which is returned to the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint).
 *
 * <br>
 * <details>
 * <summary>Description</summary>
 *
 * This API is supposed to be called from within the implementation of the [backchannel authentication
 * endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)
 * of the service in order to generate an error response to the client application.
 *
 * The response from `/backchannel/authentication/fails` API has some parameters. Among them, it is
 * `action` parameter that the authorization server implementation should check first because it denotes
 * the next action that the authorization server implementation should take. According to the value
 * of `action`, the authorization server implementation must take the steps described below.
 *
 * **INTERNAL_SERVER_ERROR**
 *
 * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that (1) the `reason` request parameter
 * of the API call was `SERVER_ERROR`, (2) an error occurred on Authlete side, or (3) the request parameters
 * of the API call were wrong. In this case, the authorization server implementation should return
 * a "500 Internal Server Error" response to the client application. However, in most cases, commercial
 * implementations prefer to use other HTTP status code than 5xx.
 *
 * **BAD_REQUEST**
 *
 * When the value of `action` is `BAD_REQUEST`, the authorization server implementation should return a
 * "400 Bad Request" response to the client application.
 *
 * **FORBIDDEN**
 *
 * When the value of `action` is `FORBIDDEN`, it means that the `reason` request parameter of the API call
 * was `ACCESS_DENIED`. In this case, the backchannel authentication endpoint of the authorization
 * server implementation should return a "403 Forbidden" response to the client application.
 *
 * </details>
 */
export function cibaBackchannelAuthenticationFailApi(
  client: AuthleteTestCore,
  request: operations.BackchannelAuthenticationFailApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.BackchannelAuthenticationFailResponse,
    | errors.ResultError
    | AuthleteTestError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteTestCore,
  request: operations.BackchannelAuthenticationFailApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.BackchannelAuthenticationFailResponse,
      | errors.ResultError
      | AuthleteTestError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.BackchannelAuthenticationFailApiRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON(
    "body",
    payload.backchannel_authentication_fail_request,
    { explode: true },
  );

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/backchannel/authentication/fail")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "backchannel_authentication_fail_api",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.BackchannelAuthenticationFailResponse,
    | errors.ResultError
    | AuthleteTestError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.BackchannelAuthenticationFailResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
