/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteError } from "../models/errors/authleteerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Process Entity Configuration Request
 *
 * @remarks
 * This API gathers the federation configuration about a service.
 *
 * The authorization server implementation should
 * retrieve the value of the <code>action</code>
 * response parameter from the API response and take the following steps
 * according to the value.
 *
 * <h3><code>OK</code></h3>
 *
 * When the value of the <code> action</code> response
 * parameter is <code>OK</code>, it means that Authlete
 * could prepare an entity configuration successfully.
 *
 * In this case, the implementation of the entity configuration endpoint of the
 * authorization server should return an HTTP response to the client application
 * with the HTTP status code "`200 OK`" and the content type
 * "`application/entity-statement+jwt`". The message body (= an entity
 * configuration in the JWT format) of the response has been prepared by
 * Authlete's `/federation/configuration` API and it is available as the
 * <code>responseContent</code> response parameter.
 *
 * The implementation of the entity configuration endpoint can construct an
 * HTTP response by doing like below.
 *
 * <pre style="border: solid 1px black; padding: 0.5em;">
 * 200 OK
 * Content-Type: application/entity-statement+jwt
 * (Other HTTP headers)
 *
 * <i>(the value of the responseContent response parameter)</i></pre>
 *
 * <h3><code>NOT_FOUND</code></h3>
 *
 * When the value of the <code> action</code> response
 * parameter is <code>NOT_FOUND</code>, it means that
 * the service configuration has not enabled the feature of <a href=
 * "https://openid.net/specs/openid-connect-federation-1_0.html">OpenID Connect
 * Federation 1.0</a> and so the client application should have not access the
 * entity configuration endpoint.
 *
 * In this case, the implementation of the entity configuration endpoint of the
 * authorization server should return an HTTP response to the client application
 * with the HTTP status code "`404 Not Found`" and the content type
 * "`application/json`". The message body (= error information in the JSON
 * format) of the response has been prepared by Authlete's
 * `/federation/configuration` API and it is available as the
 * <code>responseContent</code> response parameter.
 *
 * The implementation of the entity configuration endpoint can construct an
 * HTTP response by doing like below.
 *
 * <pre style="border: solid 1px black; padding: 0.5em;">
 * 404 Not Found
 * Content-Type: application/json
 * (Other HTTP headers)
 *
 * <i>(the value of the responseContent response parameter)</i></pre>
 *
 * <h3><code>INTERNAL_SERVER_ERROR</code></h3>
 *
 * could prepare an entity configuration successfully.
 *
 * In this case, the implementation of the entity configuration endpoint of the
 * authorization server should return an HTTP response to the client application
 * with the HTTP status code "`200 OK`" and the content type
 * "`application/entity-statement+jwt`". The message body (= an entity
 * configuration in the JWT format) of the response has been prepared by
 * Authlete's `/federation/configuration` API and it is available as the
 * <code>responseContent</code> response parameter.
 *
 * The implementation of the entity configuration endpoint can construct an
 * HTTP response by doing like below.
 *
 * <pre style="border: solid 1px black; padding: 0.5em;">
 * 200 OK
 * Content-Type: application/entity-statement+jwt
 * (Other HTTP headers)
 *
 * <i>(the value of the responseContent response parameter)</i></pre>
 *
 * </details>
 */
export function federationEndpointProcessConfiguration(
  client: AuthleteCore,
  request: operations.FederationConfigurationApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.FederationConfigurationResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteCore,
  request: operations.FederationConfigurationApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.FederationConfigurationResponse,
      | errors.ResultError
      | AuthleteError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.FederationConfigurationApiRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RequestBody, { explode: true });

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/federation/configuration")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "federation_configuration_api",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.FederationConfigurationResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.FederationConfigurationResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
