/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteError } from "../models/errors/authleteerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Process Introspection Request
 *
 * @remarks
 * This API gathers information about an access token.
 *
 * <br>
 * <details>
 * <summary>Description</summary>
 *
 * This API is supposed to be called from within the implementations of protected resource endpoints
 * of the authorization server implementation in order to get information about the access token which
 * was presented by the client application.
 *
 * In general, a client application accesses a protected resource endpoint of a service with an access
 * token, and the implementation of the endpoint checks whether the presented access token has enough
 * privileges (= scopes) to access the protected resource before returning the protected resource to
 * the client application. To achieve this flow, the endpoint implementation has to know detailed
 * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
 *
 * The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
 * that the authorization server implementation should check first because it denotes the next action
 * that the authorization server implementation should take. According to the value of `action`, the
 * authorization server implementation must take the steps described below.
 *
 * **INTERNAL_SERVER_ERROR**
 *
 * When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
 * server implementation was wrong or that an error occurred in Authlete.
 * In either case, from the viewpoint of the client application, it is an error on the server side.
 * Therefore, the service implementation should generate a response to the client application with
 * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content
 * type although OAuth 2.0 specification does not mention the format of the error response when the
 * redirect URI is not usable.
 *
 * The value of `responseContent` is a string which describes the error in the format of
 * [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if
 * the protected resource of the service implementation wants to return an error response to the client
 * application in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration
 * parameter of the service is Bearer), the value of `responseContent` can be used as the value of
 * `WWW-Authenticate` header.
 *
 * The following is an example response which complies with RFC 6750.
 *
 * ```
 * HTTP/1.1 500 Internal Server Error
 * Content-Type: application/json
 * Cache-Control: no-store
 * Pragma: no-cache
 *
 * {responseContent}
 * ```
 *
 * **BAD_REQUEST**
 *
 * When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
 * does not contain an access token (= the request from the authorization server implementation to
 * Authlete does not contain `token` request parameter).
 *
 * A response with HTTP status of "400 Bad Request" must be returned to the client application and
 * the content type must be `application/json`.
 *
 * The value of `responseContent` is a string which describes the error in the format of [RFC
 * 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if the
 * protected resource of the service implementation wants to return an error response to the client
 * application in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration
 * parameter of the service is `Bearer`), the value of `responseContent` can be used as the value of
 * `WWW-Authenticate` header.
 *
 * The following is an example response which complies with RFC 6750.
 *
 * ```
 * HTTP/1.1 400 Bad Request
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **UNAUTHORIZED**
 *
 * When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist or has
 * expired.
 *
 * The value of `responseContent` is a string which describes the error in the format of RFC
 * 6750 (OAuth 2.0 Bearer Token Usage), so if the protected resource of the service implementation
 * wants to return an error response to the client application in the way that complies with [RFC
 * 6750](https://datatracker.ietf.org/doc/html/rfc6750) (in other words, if `accessTokenType` configuration
 * parameter of the service is `Bearer`), the value of `responseContent` can be used as the value of
 * `WWW-Authenticate` header.
 *
 * The following is an example response which complies with RFC 6750.
 *
 * ```
 * HTTP/1.1 401 Unauthorized
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **FORBIDDEN**
 *
 * When the value of `action` is `FORBIDDEN`, it means that the access token does not cover the required
 * scopes or that the subject associated with the access token is different from the subject contained
 * in the request.
 *
 * A response with HTTP status of "400 Bad Request" must be returned to the client application and
 * the content type must be `application/json`.
 *
 * The value of `responseContent` is a string which describes the error in the format of [RFC
 * 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if the
 * protected resource of the service implementation wants to return an error response to the client
 * application in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration
 * parameter of the service is Bearer), the value of `responseContent` can be used as the value of
 * `WWW-Authenticate` header.
 *
 * The following is an example response which complies with RFC 6750.
 *
 * ```
 * HTTP/1.1 403 Forbidden
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * **OK**
 *
 * When the value of `action` is `OK`, it means that the access token which the client application
 * presented is valid (= exists and has not expired).
 *
 * The implementation of the protected resource endpoint is supposed to return the protected resource
 * to the client application.
 *
 * When action is `OK`, the value of `responseContent` is `"Bearer error=\"invalid_request\""`. This
 * is the simplest string which can be used as the value of `WWW-Authenticate` header to indicate
 * "400 Bad Request". The implementation of the protected resource endpoint may use this string to
 * tell the client application that the request was bad (e.g. in case necessary request parameters
 * for the protected resource endpoint are missing). However, in such a case, the implementation
 * should generate a more informative error message to help developers of client applications.
 *
 * The following is an example error response which complies with RFC 6750.
 *
 * ```
 * HTTP/1.1 400 Bad Request
 * WWW-Authenticate: {responseContent}
 * Cache-Control: no-store
 * Pragma: no-cache
 * ```
 *
 * Basically, The value of `responseContent` is a string which describes the error in the format of
 * [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage). So, if
 * the service has selected `Bearer` as the value of `accessTokenType` configuration parameter, the
 * value of `responseContent` can be used directly as the value of `WWW-Authenticate` header. However,
 * if the service has selected another different token type, the service has to generate error messages
 * for itself.
 *
 * _**JWT-based access token**_
 *
 * Since version 2.1, Authlete provides a feature to issue access tokens in JWT format. This feature
 * can be enabled by setting a non-null value to the `accessTokenSignAlg` property of the service
 * (see the description of the Service class for details). `/api/auth/introspection` API can accept
 * access tokens in JWT format. However, note that the API does not return information contained in
 * a given JWT-based access token but returns information stored in the database record which corresponds
 * to the given JWT-based access token. Because attributes of the database record can be modified
 * after the access token is issued (for example, by using `/api/auth/token/update` API), information
 * returned by `/api/auth/introspection` API and information the given JWT-based access token holds
 * may be different.
 *
 * </details>
 */
export function introspectionEndpointAuthIntrospectionApi(
  client: AuthleteCore,
  request: operations.AuthIntrospectionApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.IntrospectionResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteCore,
  request: operations.AuthIntrospectionApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.IntrospectionResponse,
      | errors.ResultError
      | AuthleteError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.AuthIntrospectionApiRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.introspection_request, {
    explode: true,
  });

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/auth/introspection")(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "auth_introspection_api",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.IntrospectionResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.IntrospectionResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
