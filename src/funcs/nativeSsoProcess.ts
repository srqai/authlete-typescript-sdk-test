/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AuthleteCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { AuthleteError } from "../models/errors/authleteerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Native SSO Processing
 *
 * @remarks
 * This API should be called by the implementation of a token endpoint to generate the ID token and
 * token response that comply with [OpenID Connect Native SSO for Mobile Apps 1.0](https://openid.net/specs/openid-connect-native-sso-1_0.html)
 * (Native SSO) when Authleteâ€™s `/auth/token` response indicates `action = NATIVE_SSO` (after you validate
 * the session id and verify or generate the device secret as required by the flow). The token endpoint
 * implementation should retrieve the value of `action` from the response and take the following steps
 * according to the value.
 *
 * **OK**
 *
 * When the action is `OK`, it indicates that the `/nativesso` API processing has successfully completed.
 * In this case, the token endpoint implementation should return a successful response (`200 OK`) to
 * the client. The value of the responseContent property in the `/nativesso` API response can be used
 * directly as the message body of the token response. Therefore, the success response can be constructed
 * as follows:
 *
 * ```
 * HTTP/1.1 200 OK
 * Content-Type: application/json
 * Cache-Control: no-store
 *
 * (Embed the value of responseContent here.)
 * ```
 *
 * **INTERNAL_SERVER_ERROR**
 *
 * When the action is `INTERNAL_SERVER_ERROR`, it indicates that something has gone wrong on the Authlete
 * side. For example, an issue such as a database error might have occurred when retrieving the access
 * token specified by the accessToken parameter from the database.
 *
 * In such cases, the token endpoint implementation should return an error response to the client.
 * The simplest implementation would be to return a `500 Internal Server Error`.
 *
 * ```
 * HTTP/1.1 500 Internal Server Error
 * Content-Type: application/json
 * Cache-Control: no-store
 *
 * (Embed the value of responseContent here.)
 * ```
 *
 * However, in a production environment, it may be better to return a more abstract error (one that
 * does not directly describe the nature of the issue), rather than a `500` error.
 *
 * **CALLER_ERROR**
 *
 * When the action is `CALLER_ERROR`, it indicates that the issue lies with the caller of the API
 * (i.e., the implementation of the OpenID Provider). For example, this could be due to missing a
 * required parameter such as accessToken.
 *
 * If `CALLER_ERROR` is returned, please review the implementation of your OpenID Provider.
 */
export function nativeSsoProcess(
  client: AuthleteCore,
  request: operations.NativeSsoApiRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    models.NativeSsoResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AuthleteCore,
  request: operations.NativeSsoApiRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      models.NativeSsoResponse,
      | errors.ResultError
      | AuthleteError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.NativeSsoApiRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.native_sso_request, {
    explode: true,
  });

  const pathParams = {
    serviceId: encodeSimple("serviceId", payload.serviceId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/api/{serviceId}/nativesso")(pathParams);

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "native_sso_api",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    models.NativeSsoResponse,
    | errors.ResultError
    | AuthleteError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, models.NativeSsoResponse$inboundSchema),
    M.jsonErr([400, 401, 403], errors.ResultError$inboundSchema),
    M.jsonErr(500, errors.ResultError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
