/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tokenOperationsAuthTokenCreateApi } from "../funcs/tokenOperationsAuthTokenCreateApi.js";
import { tokenOperationsAuthTokenDeleteApi } from "../funcs/tokenOperationsAuthTokenDeleteApi.js";
import { tokenOperationsAuthTokenGetListApi } from "../funcs/tokenOperationsAuthTokenGetListApi.js";
import { tokenOperationsAuthTokenRevokeApi } from "../funcs/tokenOperationsAuthTokenRevokeApi.js";
import { tokenOperationsAuthTokenUpdateApi } from "../funcs/tokenOperationsAuthTokenUpdateApi.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TokenOperations extends ClientSDK {
  /**
   * List Issued Tokens
   *
   * @remarks
   * Get the list of access tokens that are associated with the service.
   */
  async authTokenGetListApi(
    request: operations.AuthTokenGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenGetListResponse> {
    return unwrapAsync(tokenOperationsAuthTokenGetListApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Access Token
   *
   * @remarks
   * Create an access token.
   */
  async authTokenCreateApi(
    request: operations.AuthTokenCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenCreateResponse> {
    return unwrapAsync(tokenOperationsAuthTokenCreateApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Access Token
   *
   * @remarks
   * Update an access token.
   */
  async authTokenUpdateApi(
    request: operations.AuthTokenUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenUpdateResponse> {
    return unwrapAsync(tokenOperationsAuthTokenUpdateApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Access Token
   *
   * @remarks
   * Delete an access token.
   */
  async authTokenDeleteApi(
    request: operations.AuthTokenDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tokenOperationsAuthTokenDeleteApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke Access Token
   *
   * @remarks
   * Revoke an access token.
   */
  async authTokenRevokeApi(
    request: operations.AuthTokenRevokeApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenRevokeResponse> {
    return unwrapAsync(tokenOperationsAuthTokenRevokeApi(
      this,
      request,
      options,
    ));
  }
}
