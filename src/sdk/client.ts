/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientCreate } from "../funcs/clientCreate.js";
import { clientDelete } from "../funcs/clientDelete.js";
import { clientDeleteAuthorizations } from "../funcs/clientDeleteAuthorizations.js";
import { clientDeleteGrantedScopes } from "../funcs/clientDeleteGrantedScopes.js";
import { clientDeleteRequestableScopes } from "../funcs/clientDeleteRequestableScopes.js";
import { clientGet } from "../funcs/clientGet.js";
import { clientGetGrantedScopes } from "../funcs/clientGetGrantedScopes.js";
import { clientGetRequestableScopes } from "../funcs/clientGetRequestableScopes.js";
import { clientList } from "../funcs/clientList.js";
import { clientListAuthorizations } from "../funcs/clientListAuthorizations.js";
import { clientRefreshSecret } from "../funcs/clientRefreshSecret.js";
import { clientUpdate } from "../funcs/clientUpdate.js";
import { clientUpdateAuthorizations } from "../funcs/clientUpdateAuthorizations.js";
import { clientUpdateLockFlag } from "../funcs/clientUpdateLockFlag.js";
import { clientUpdateRequestableScopes } from "../funcs/clientUpdateRequestableScopes.js";
import { clientUpdateSecret } from "../funcs/clientUpdateSecret.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Client extends ClientSDK {
  /**
   * Get Client
   *
   * @remarks
   * Get a client.
   */
  async get(
    request: operations.ClientGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List Clients
   *
   * @remarks
   * Get a list of clients on a service.
   *
   * If the access token can view a full service (including an admin), all clients within the
   * service are returned. Otherwise, only clients that the access token can view within the
   * service are returned.
   * - ViewClient: []
   */
  async list(
    request: operations.ClientGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientGetListResponse> {
    return unwrapAsync(clientList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Client
   *
   * @remarks
   * Create a new client.
   */
  async create(
    request: operations.ClientCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client
   *
   * @remarks
   * Update a client.
   */
  async update(
    request: operations.ClientUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Client âš¡
   *
   * @remarks
   * Delete a client.
   */
  async delete(
    request: operations.ClientDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Lock
   *
   * @remarks
   * Lock and unlock a client
   */
  async updateLockFlag(
    request: operations.ClientFlagUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientFlagUpdateResponse> {
    return unwrapAsync(clientUpdateLockFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate Client Secret
   *
   * @remarks
   * Refresh the client secret of a client. A new value of the client secret will be generated by the
   * Authlete server.
   *
   * If you want to specify a new value, use `/api/client/secret/update` API.
   */
  async refreshSecret(
    request: operations.ClientSecretRefreshApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientSecretRefreshResponse> {
    return unwrapAsync(clientRefreshSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Secret
   *
   * @remarks
   * Update the client secret of a client.
   *
   * If you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`
   * API.
   */
  async updateSecret(
    request: operations.ClientSecretUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientSecretUpdateResponse> {
    return unwrapAsync(clientUpdateSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Authorized Applications
   *
   * @remarks
   * Get a list of client applications that an end-user has authorized.
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async listAuthorizations(
    request: operations.ClientAuthorizationGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationGetListResponse> {
    return unwrapAsync(clientListAuthorizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Tokens
   *
   * @remarks
   * Update attributes of all existing access tokens given to a client application.
   */
  async updateAuthorizations(
    request: operations.ClientAuthorizationUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationUpdateResponse> {
    return unwrapAsync(clientUpdateAuthorizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Client Tokens
   *
   * @remarks
   * Delete all existing access tokens issued to a client application by an end-user.
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async deleteAuthorizations(
    request: operations.ClientAuthorizationDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationDeleteResponse> {
    return unwrapAsync(clientDeleteAuthorizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Granted Scopes
   *
   * @remarks
   * Get the set of scopes that a user has granted to a client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * Possible values for `requestableScopes` parameter in the response from this API are as follows.
   *
   * **null**
   *
   * The user has not granted authorization to the client application in the past, or records about the
   * combination of the user and the client application have been deleted from Authlete's DB.
   *
   * **An empty set**
   *
   * The user has granted authorization to the client application in the past, but no scopes are associated
   * with the authorization.
   *
   * **A set with at least one element**
   *
   * The user has granted authorization to the client application in the past and some scopes are associated
   * with the authorization. These scopes are returned.
   * Example: `[ "profile", "email" ]`
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   * </details>
   */
  async getGrantedScopes(
    request: operations.ClientGrantedScopesGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationDeleteResponse> {
    return unwrapAsync(clientGetGrantedScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Granted Scopes
   *
   * @remarks
   * Delete the set of scopes that an end-user has granted to a client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * Even if records about granted scopes are deleted by calling this API, existing access tokens are
   * not deleted and scopes of existing access tokens are not changed.
   * </details>
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async deleteGrantedScopes(
    request: operations.ClientGrantedScopesDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientGrantedScopesDeleteResponse> {
    return unwrapAsync(clientDeleteGrantedScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Requestable Scopes
   *
   * @remarks
   * Get the requestable scopes per client
   */
  async getRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientExtensionRequestableScopesGetResponse> {
    return unwrapAsync(clientGetRequestableScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Requestable Scopes
   *
   * @remarks
   * Update requestable scopes of a client
   */
  async updateRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientExtensionRequestableScopesUpdateResponse> {
    return unwrapAsync(clientUpdateRequestableScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Requestable Scopes
   *
   * @remarks
   * Delete requestable scopes of a client
   */
  async deleteRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientDeleteRequestableScopes(
      this,
      request,
      options,
    ));
  }
}
