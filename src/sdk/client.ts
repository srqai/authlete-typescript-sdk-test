/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientCreate } from "../funcs/clientCreate.js";
import { clientDelete } from "../funcs/clientDelete.js";
import { clientGet } from "../funcs/clientGet.js";
import { clientList } from "../funcs/clientList.js";
import { clientUpdate } from "../funcs/clientUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { ClientManagement } from "./clientmanagement.js";

export class Client extends ClientSDK {
  private _management?: ClientManagement;
  get management(): ClientManagement {
    return (this._management ??= new ClientManagement(this._options));
  }

  /**
   * Get Client
   *
   * @remarks
   * Get a client.
   */
  async get(
    request: operations.ClientGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List Clients
   *
   * @remarks
   * Get a list of clients on a service.
   *
   * If the access token can view a full service (including an admin), all clients within the
   * service are returned. Otherwise, only clients that the access token can view within the
   * service are returned.
   * - ViewClient: []
   */
  async list(
    request: operations.ClientGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientGetListResponse> {
    return unwrapAsync(clientList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Client
   *
   * @remarks
   * Create a new client.
   */
  async create(
    request: operations.ClientCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client
   *
   * @remarks
   * Update a client.
   */
  async update(
    request: operations.ClientUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Client âš¡
   *
   * @remarks
   * Delete a client.
   */
  async delete(
    request: operations.ClientDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientDelete(
      this,
      request,
      options,
    ));
  }
}
