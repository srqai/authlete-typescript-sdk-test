/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { servicesDelete } from "../funcs/servicesDelete.js";
import { servicesGet } from "../funcs/servicesGet.js";
import { servicesUpdate } from "../funcs/servicesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Services extends ClientSDK {
  /**
   * Get Service
   *
   * @remarks
   * Get a service.
   *
   * If the access token can only view or modify clients underneath this service, but does not
   * have access to view this service directly, a limited view of the service will be returned.
   */
  async get(
    request: operations.ServiceGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(servicesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Service
   *
   * @remarks
   * Update a service.
   */
  async update(
    request: operations.ServiceUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(servicesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Service âš¡
   *
   * @remarks
   * Delete a service.
   */
  async delete(
    request: operations.ServiceDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(servicesDelete(
      this,
      request,
      options,
    ));
  }
}
