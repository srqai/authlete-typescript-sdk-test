/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientsCreate } from "../funcs/clientsCreate.js";
import { clientsDeleteGrantedScopes } from "../funcs/clientsDeleteGrantedScopes.js";
import { clientsGetGrantedScopes } from "../funcs/clientsGetGrantedScopes.js";
import { clientsList } from "../funcs/clientsList.js";
import { clientsRefreshSecret } from "../funcs/clientsRefreshSecret.js";
import { clientsUpdate } from "../funcs/clientsUpdate.js";
import { clientsUpdateLockFlag } from "../funcs/clientsUpdateLockFlag.js";
import { clientsUpdateRequestableScopes } from "../funcs/clientsUpdateRequestableScopes.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Clients extends ClientSDK {
  /**
   * List Clients
   *
   * @remarks
   * Get a list of clients on a service.
   *
   * If the access token can view a full service (including an admin), all clients within the
   * service are returned. Otherwise, only clients that the access token can view within the
   * service are returned.
   * - ViewClient: []
   */
  async list(
    request: operations.ClientGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientGetListResponse> {
    return unwrapAsync(clientsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Client
   *
   * @remarks
   * Create a new client.
   */
  async create(
    request: operations.ClientCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client
   *
   * @remarks
   * Update a client.
   */
  async update(
    request: operations.ClientUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Lock
   *
   * @remarks
   * Lock and unlock a client
   */
  async updateLockFlag(
    request: operations.ClientFlagUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientFlagUpdateResponse> {
    return unwrapAsync(clientsUpdateLockFlag(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate Client Secret
   *
   * @remarks
   * Refresh the client secret of a client. A new value of the client secret will be generated by the
   * Authlete server.
   *
   * If you want to specify a new value, use `/api/client/secret/update` API.
   */
  async refreshSecret(
    request: operations.ClientSecretRefreshApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientSecretRefreshResponse> {
    return unwrapAsync(clientsRefreshSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Granted Scopes
   *
   * @remarks
   * Get the set of scopes that a user has granted to a client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * Possible values for `requestableScopes` parameter in the response from this API are as follows.
   *
   * **null**
   *
   * The user has not granted authorization to the client application in the past, or records about the
   * combination of the user and the client application have been deleted from Authlete's DB.
   *
   * **An empty set**
   *
   * The user has granted authorization to the client application in the past, but no scopes are associated
   * with the authorization.
   *
   * **A set with at least one element**
   *
   * The user has granted authorization to the client application in the past and some scopes are associated
   * with the authorization. These scopes are returned.
   * Example: `[ "profile", "email" ]`
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   * </details>
   */
  async getGrantedScopes(
    request: operations.ClientGrantedScopesGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationDeleteResponse> {
    return unwrapAsync(clientsGetGrantedScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Granted Scopes
   *
   * @remarks
   * Delete the set of scopes that an end-user has granted to a client application.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * Even if records about granted scopes are deleted by calling this API, existing access tokens are
   * not deleted and scopes of existing access tokens are not changed.
   * </details>
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async deleteGrantedScopes(
    request: operations.ClientGrantedScopesDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientGrantedScopesDeleteResponse> {
    return unwrapAsync(clientsDeleteGrantedScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Requestable Scopes
   *
   * @remarks
   * Update requestable scopes of a client
   */
  async updateRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientExtensionRequestableScopesUpdateResponse> {
    return unwrapAsync(clientsUpdateRequestableScopes(
      this,
      request,
      options,
    ));
  }
}
