/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tokenManagementCreate } from "../funcs/tokenManagementCreate.js";
import { tokenManagementDelete } from "../funcs/tokenManagementDelete.js";
import { tokenManagementList } from "../funcs/tokenManagementList.js";
import { tokenManagementReissueIdToken } from "../funcs/tokenManagementReissueIdToken.js";
import { tokenManagementRevoke } from "../funcs/tokenManagementRevoke.js";
import { tokenManagementUpdate } from "../funcs/tokenManagementUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TokenManagement extends ClientSDK {
  /**
   * Reissue ID Token
   *
   * @remarks
   * The API is expected to be called only when the value of the `action`
   * parameter in a response from the `/auth/token` API is [ID_TOKEN_REISSUABLE](https://authlete.github.io/authlete-java-common/com/authlete/common/dto/TokenResponse.Action.html#ID_TOKEN_REISSUABLE). The purpose
   * of the `/idtoken/reissue` API is to generate a token response that
   * includes a new ID token together with a new access token and a refresh
   * token.
   */
  async reissueIdToken(
    request: operations.IdtokenReissueApiRequest,
    options?: RequestOptions,
  ): Promise<models.IdtokenReissueResponse> {
    return unwrapAsync(tokenManagementReissueIdToken(
      this,
      request,
      options,
    ));
  }

  /**
   * List Issued Tokens
   *
   * @remarks
   * Get the list of access tokens that are associated with the service.
   */
  async list(
    request: operations.AuthTokenGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenGetListResponse> {
    return unwrapAsync(tokenManagementList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Access Token
   *
   * @remarks
   * Create an access token.
   */
  async create(
    request: operations.AuthTokenCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenCreateResponse> {
    return unwrapAsync(tokenManagementCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Access Token
   *
   * @remarks
   * Update an access token.
   */
  async update(
    request: operations.AuthTokenUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenUpdateResponse> {
    return unwrapAsync(tokenManagementUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Access Token
   *
   * @remarks
   * Delete an access token.
   */
  async delete(
    request: operations.AuthTokenDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tokenManagementDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke Access Token
   *
   * @remarks
   * Revoke an access token.
   */
  async revoke(
    request: operations.AuthTokenRevokeApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenRevokeResponse> {
    return unwrapAsync(tokenManagementRevoke(
      this,
      request,
      options,
    ));
  }
}
