/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialsManagementBatchIssue } from "../funcs/verifiableCredentialsManagementBatchIssue.js";
import { verifiableCredentialsManagementBatchParse } from "../funcs/verifiableCredentialsManagementBatchParse.js";
import { verifiableCredentialsManagementDeferredIssue } from "../funcs/verifiableCredentialsManagementDeferredIssue.js";
import { verifiableCredentialsManagementDeferredParse } from "../funcs/verifiableCredentialsManagementDeferredParse.js";
import { verifiableCredentialsManagementGetJwks } from "../funcs/verifiableCredentialsManagementGetJwks.js";
import { verifiableCredentialsManagementGetJwtIssuer } from "../funcs/verifiableCredentialsManagementGetJwtIssuer.js";
import { verifiableCredentialsManagementGetMetadata } from "../funcs/verifiableCredentialsManagementGetMetadata.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VerifiableCredentialsManagement extends ClientSDK {
  /**
   * Get Verifiable Credential Issuer Metadata
   *
   * @remarks
   * Get verifiable credential issuer metadata
   */
  async getMetadata(
    request: operations.VciMetadataApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciMetadataResponse> {
    return unwrapAsync(verifiableCredentialsManagementGetMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * Get JWT Issuer Information
   *
   * @remarks
   * Get JWT issuer information for VCI
   */
  async getJwtIssuer(
    request: operations.VciJwtissuerApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwtissuerResponse> {
    return unwrapAsync(verifiableCredentialsManagementGetJwtIssuer(
      this,
      request,
      options,
    ));
  }

  /**
   * Get JSON Web Key Set
   *
   * @remarks
   * Get JSON Web Key Set for VCI
   */
  async getJwks(
    request: operations.VciJwksApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwksResponse> {
    return unwrapAsync(verifiableCredentialsManagementGetJwks(
      this,
      request,
      options,
    ));
  }

  /**
   * Parse Batch Credentials
   *
   * @remarks
   * Parse multiple verifiable credentials in batch
   */
  async batchParse(
    request: operations.VciBatchParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchParseResponse> {
    return unwrapAsync(verifiableCredentialsManagementBatchParse(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Batch Credentials
   *
   * @remarks
   * Issue multiple verifiable credentials in batch
   */
  async batchIssue(
    request: operations.VciBatchIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchIssueResponse> {
    return unwrapAsync(verifiableCredentialsManagementBatchIssue(
      this,
      request,
      options,
    ));
  }

  /**
   * Parse Deferred Credential
   *
   * @remarks
   * Parse a deferred verifiable credential
   */
  async deferredParse(
    request: operations.VciDeferredParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredParseResponse> {
    return unwrapAsync(verifiableCredentialsManagementDeferredParse(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Deferred Credential
   *
   * @remarks
   * Issue a deferred verifiable credential
   */
  async deferredIssue(
    request: operations.VciDeferredIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredIssueResponse> {
    return unwrapAsync(verifiableCredentialsManagementDeferredIssue(
      this,
      request,
      options,
    ));
  }
}
