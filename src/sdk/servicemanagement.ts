/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { serviceManagementServiceConfigurationApi } from "../funcs/serviceManagementServiceConfigurationApi.js";
import { serviceManagementServiceCreateApi } from "../funcs/serviceManagementServiceCreateApi.js";
import { serviceManagementServiceDeleteApi } from "../funcs/serviceManagementServiceDeleteApi.js";
import { serviceManagementServiceGetApi } from "../funcs/serviceManagementServiceGetApi.js";
import { serviceManagementServiceGetListApi } from "../funcs/serviceManagementServiceGetListApi.js";
import { serviceManagementServiceUpdateApi } from "../funcs/serviceManagementServiceUpdateApi.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ServiceManagement extends ClientSDK {
  /**
   * Get Service
   *
   * @remarks
   * Get a service.
   *
   * If the access token can only view or modify clients underneath this service, but does not
   * have access to view this service directly, a limited view of the service will be returned.
   */
  async serviceGetApi(
    request: operations.ServiceGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(serviceManagementServiceGetApi(
      this,
      request,
      options,
    ));
  }

  /**
   * List Services
   *
   * @remarks
   * Get a list of services.
   *
   * If the access token can only view or modify clients underneath a service, but does not
   * have access to view that service directly, a limited view of the service will be returned.
   * Otherwise, all properties of the service are returned.
   *
   * If the access token is an administrative token, this returns a list of all services on the Authlete instance.
   * Otherwise, all services that the access token can view, even in a limited fashion, are returned.
   */
  async serviceGetListApi(
    request?: operations.ServiceGetListApiRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ServiceGetListResponse> {
    return unwrapAsync(serviceManagementServiceGetListApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Service
   *
   * @remarks
   * Create a new service.
   */
  async serviceCreateApi(
    request?: models.ServiceInput | undefined,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(serviceManagementServiceCreateApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Service
   *
   * @remarks
   * Update a service.
   */
  async serviceUpdateApi(
    request: operations.ServiceUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(serviceManagementServiceUpdateApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Service âš¡
   *
   * @remarks
   * Delete a service.
   */
  async serviceDeleteApi(
    request: operations.ServiceDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serviceManagementServiceDeleteApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Service Configuration
   *
   * @remarks
   * This API gathers configuration information about a service.
   *
   * <br>
   * <details>
   * <summary>Description</summary>
   *
   * This API is supposed to be called from within the implementation of the configuration endpoint of
   * the service where the service that supports OpenID Connect and [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html)
   * must expose its configuration information in a JSON format. Details about the format are described
   * in "[3. OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)"
   * in OpenID Connect Discovery 1.0.
   *
   * </details>
   */
  async serviceConfigurationApi(
    request: operations.ServiceConfigurationApiRequest,
    options?: RequestOptions,
  ): Promise<operations.ServiceConfigurationApiResponse> {
    return unwrapAsync(serviceManagementServiceConfigurationApi(
      this,
      request,
      options,
    ));
  }
}
