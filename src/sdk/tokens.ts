/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tokensCreate } from "../funcs/tokensCreate.js";
import { tokensDelete } from "../funcs/tokensDelete.js";
import { tokensList } from "../funcs/tokensList.js";
import { tokensRevoke } from "../funcs/tokensRevoke.js";
import { tokensUpdate } from "../funcs/tokensUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tokens extends ClientSDK {
  /**
   * List Issued Tokens
   *
   * @remarks
   * Get the list of access tokens that are associated with the service.
   */
  async list(
    request: operations.AuthTokenGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenGetListResponse> {
    return unwrapAsync(tokensList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Access Token
   *
   * @remarks
   * Create an access token.
   */
  async create(
    request: operations.AuthTokenCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenCreateResponse> {
    return unwrapAsync(tokensCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Access Token
   *
   * @remarks
   * Update an access token.
   */
  async update(
    request: operations.AuthTokenUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenUpdateResponse> {
    return unwrapAsync(tokensUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Access Token
   *
   * @remarks
   * Delete an access token.
   */
  async delete(
    request: operations.AuthTokenDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tokensDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke Access Token
   *
   * @remarks
   * Revoke an access token.
   */
  async revoke(
    request: operations.AuthTokenRevokeApiRequest,
    options?: RequestOptions,
  ): Promise<models.TokenRevokeResponse> {
    return unwrapAsync(tokensRevoke(
      this,
      request,
      options,
    ));
  }
}
