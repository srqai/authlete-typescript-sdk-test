/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialsBatchIssue } from "../funcs/verifiableCredentialsBatchIssue.js";
import { verifiableCredentialsBatchParse } from "../funcs/verifiableCredentialsBatchParse.js";
import { verifiableCredentialsCreateOffer } from "../funcs/verifiableCredentialsCreateOffer.js";
import { verifiableCredentialsDeferredIssue } from "../funcs/verifiableCredentialsDeferredIssue.js";
import { verifiableCredentialsDeferredParse } from "../funcs/verifiableCredentialsDeferredParse.js";
import { verifiableCredentialsGetJwks } from "../funcs/verifiableCredentialsGetJwks.js";
import { verifiableCredentialsGetJwtIssuer } from "../funcs/verifiableCredentialsGetJwtIssuer.js";
import { verifiableCredentialsGetMetadata } from "../funcs/verifiableCredentialsGetMetadata.js";
import { verifiableCredentialsGetOfferInfo } from "../funcs/verifiableCredentialsGetOfferInfo.js";
import { verifiableCredentialsIssue } from "../funcs/verifiableCredentialsIssue.js";
import { verifiableCredentialsParse } from "../funcs/verifiableCredentialsParse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VerifiableCredentials extends ClientSDK {
  /**
   * Get Verifiable Credential Issuer Metadata
   *
   * @remarks
   * Get verifiable credential issuer metadata
   */
  async getMetadata(
    request: operations.VciMetadataApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciMetadataResponse> {
    return unwrapAsync(verifiableCredentialsGetMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * Get JWT Issuer Information
   *
   * @remarks
   * Get JWT issuer information for VCI
   */
  async getJwtIssuer(
    request: operations.VciJwtissuerApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwtissuerResponse> {
    return unwrapAsync(verifiableCredentialsGetJwtIssuer(
      this,
      request,
      options,
    ));
  }

  /**
   * Get JSON Web Key Set
   *
   * @remarks
   * Get JSON Web Key Set for VCI
   */
  async getJwks(
    request: operations.VciJwksApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwksResponse> {
    return unwrapAsync(verifiableCredentialsGetJwks(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Credential Offer
   *
   * @remarks
   * Create a verifiable credential offer
   */
  async createOffer(
    request: operations.VciOfferCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferCreateResponse> {
    return unwrapAsync(verifiableCredentialsCreateOffer(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Credential Offer Information
   *
   * @remarks
   * Get information about a verifiable credential offer
   */
  async getOfferInfo(
    request: operations.VciOfferInfoApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferInfoResponse> {
    return unwrapAsync(verifiableCredentialsGetOfferInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * Parse Single Credential
   *
   * @remarks
   * Parse a single verifiable credential
   */
  async parse(
    request: operations.VciSingleParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleParseResponse> {
    return unwrapAsync(verifiableCredentialsParse(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Single Credential
   *
   * @remarks
   * Issue a single verifiable credential
   */
  async issue(
    request: operations.VciSingleIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleIssueResponse> {
    return unwrapAsync(verifiableCredentialsIssue(
      this,
      request,
      options,
    ));
  }

  /**
   * Parse Batch Credentials
   *
   * @remarks
   * Parse multiple verifiable credentials in batch
   */
  async batchParse(
    request: operations.VciBatchParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchParseResponse> {
    return unwrapAsync(verifiableCredentialsBatchParse(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Batch Credentials
   *
   * @remarks
   * Issue multiple verifiable credentials in batch
   */
  async batchIssue(
    request: operations.VciBatchIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchIssueResponse> {
    return unwrapAsync(verifiableCredentialsBatchIssue(
      this,
      request,
      options,
    ));
  }

  /**
   * Parse Deferred Credential
   *
   * @remarks
   * Parse a deferred verifiable credential
   */
  async deferredParse(
    request: operations.VciDeferredParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredParseResponse> {
    return unwrapAsync(verifiableCredentialsDeferredParse(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Deferred Credential
   *
   * @remarks
   * Issue a deferred verifiable credential
   */
  async deferredIssue(
    request: operations.VciDeferredIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredIssueResponse> {
    return unwrapAsync(verifiableCredentialsDeferredIssue(
      this,
      request,
      options,
    ));
  }
}
