/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialsCreateOffer } from "../funcs/verifiableCredentialsCreateOffer.js";
import { verifiableCredentialsGetJwks } from "../funcs/verifiableCredentialsGetJwks.js";
import { verifiableCredentialsGetMetadata } from "../funcs/verifiableCredentialsGetMetadata.js";
import { verifiableCredentialsParse } from "../funcs/verifiableCredentialsParse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VerifiableCredentials extends ClientSDK {
  /**
   * /api/{serviceId}/vci/metadata API
   *
   * @remarks
   * Get verifiable credential issuer metadata
   */
  async getMetadata(
    request: operations.VciMetadataApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciMetadataResponse> {
    return unwrapAsync(verifiableCredentialsGetMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/jwks API
   *
   * @remarks
   * Get JSON Web Key Set for VCI
   */
  async getJwks(
    request: operations.VciJwksApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwksResponse> {
    return unwrapAsync(verifiableCredentialsGetJwks(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/offer/create API
   *
   * @remarks
   * Create a verifiable credential offer
   */
  async createOffer(
    request: operations.VciOfferCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferCreateResponse> {
    return unwrapAsync(verifiableCredentialsCreateOffer(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/parse API
   *
   * @remarks
   * Parse a single verifiable credential
   */
  async parse(
    request: operations.VciSingleParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleParseResponse> {
    return unwrapAsync(verifiableCredentialsParse(
      this,
      request,
      options,
    ));
  }
}
