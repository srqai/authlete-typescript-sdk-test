/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialsCreateOffer } from "../funcs/verifiableCredentialsCreateOffer.js";
import { verifiableCredentialsGetOfferInfo } from "../funcs/verifiableCredentialsGetOfferInfo.js";
import { verifiableCredentialsIssue } from "../funcs/verifiableCredentialsIssue.js";
import { verifiableCredentialsParse } from "../funcs/verifiableCredentialsParse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { VerifiableCredentialsManagement } from "./verifiablecredentialsmanagement.js";

export class VerifiableCredentials extends ClientSDK {
  private _management?: VerifiableCredentialsManagement;
  get management(): VerifiableCredentialsManagement {
    return (this._management ??= new VerifiableCredentialsManagement(
      this._options,
    ));
  }

  /**
   * Create Credential Offer
   *
   * @remarks
   * Create a verifiable credential offer
   */
  async createOffer(
    request: operations.VciOfferCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferCreateResponse> {
    return unwrapAsync(verifiableCredentialsCreateOffer(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Credential Offer Information
   *
   * @remarks
   * Get information about a verifiable credential offer
   */
  async getOfferInfo(
    request: operations.VciOfferInfoApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferInfoResponse> {
    return unwrapAsync(verifiableCredentialsGetOfferInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * Parse Single Credential
   *
   * @remarks
   * Parse a single verifiable credential
   */
  async parse(
    request: operations.VciSingleParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleParseResponse> {
    return unwrapAsync(verifiableCredentialsParse(
      this,
      request,
      options,
    ));
  }

  /**
   * Issue Single Credential
   *
   * @remarks
   * Issue a single verifiable credential
   */
  async issue(
    request: operations.VciSingleIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleIssueResponse> {
    return unwrapAsync(verifiableCredentialsIssue(
      this,
      request,
      options,
    ));
  }
}
