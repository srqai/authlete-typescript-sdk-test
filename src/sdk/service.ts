/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { serviceCreate } from "../funcs/serviceCreate.js";
import { serviceDelete } from "../funcs/serviceDelete.js";
import { serviceGet } from "../funcs/serviceGet.js";
import { serviceList } from "../funcs/serviceList.js";
import { serviceUpdate } from "../funcs/serviceUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { ServiceManagement } from "./servicemanagement.js";

export class Service extends ClientSDK {
  private _management?: ServiceManagement;
  get management(): ServiceManagement {
    return (this._management ??= new ServiceManagement(this._options));
  }

  /**
   * Get Service
   *
   * @remarks
   * Get a service.
   *
   * If the access token can only view or modify clients underneath this service, but does not
   * have access to view this service directly, a limited view of the service will be returned.
   */
  async get(
    request: operations.ServiceGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(serviceGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List Services
   *
   * @remarks
   * Get a list of services.
   *
   * If the access token can only view or modify clients underneath a service, but does not
   * have access to view that service directly, a limited view of the service will be returned.
   * Otherwise, all properties of the service are returned.
   *
   * If the access token is an administrative token, this returns a list of all services on the Authlete instance.
   * Otherwise, all services that the access token can view, even in a limited fashion, are returned.
   */
  async list(
    request?: operations.ServiceGetListApiRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ServiceGetListResponse> {
    return unwrapAsync(serviceList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Service
   *
   * @remarks
   * Create a new service.
   */
  async create(
    request?: models.ServiceInput | undefined,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(serviceCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Service
   *
   * @remarks
   * Update a service.
   */
  async update(
    request: operations.ServiceUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.Service> {
    return unwrapAsync(serviceUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Service âš¡
   *
   * @remarks
   * Delete a service.
   */
  async delete(
    request: operations.ServiceDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serviceDelete(
      this,
      request,
      options,
    ));
  }
}
