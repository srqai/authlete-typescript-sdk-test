/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialIssuerBatchIssue } from "../funcs/verifiableCredentialIssuerBatchIssue.js";
import { verifiableCredentialIssuerDeferredIssue } from "../funcs/verifiableCredentialIssuerDeferredIssue.js";
import { verifiableCredentialIssuerGetJwtIssuer } from "../funcs/verifiableCredentialIssuerGetJwtIssuer.js";
import { verifiableCredentialIssuerGetOfferInfo } from "../funcs/verifiableCredentialIssuerGetOfferInfo.js";
import { verifiableCredentialIssuerIssueSingle } from "../funcs/verifiableCredentialIssuerIssueSingle.js";
import { verifiableCredentialIssuerParseBatch } from "../funcs/verifiableCredentialIssuerParseBatch.js";
import { verifiableCredentialIssuerParseDeferred } from "../funcs/verifiableCredentialIssuerParseDeferred.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VerifiableCredentialIssuer extends ClientSDK {
  /**
   * /api/{serviceId}/vci/jwtissuer API
   *
   * @remarks
   * Get JWT issuer information for Verifiable Credential Issuer (VCI) service
   */
  async getJwtIssuer(
    request: operations.VciJwtissuerApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwtissuerResponse> {
    return unwrapAsync(verifiableCredentialIssuerGetJwtIssuer(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/offer/info API
   *
   * @remarks
   * Get offer information for Verifiable Credential Issuer (VCI) service
   */
  async getOfferInfo(
    request: operations.VciOfferInfoApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferInfoResponse> {
    return unwrapAsync(verifiableCredentialIssuerGetOfferInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/issue API
   *
   * @remarks
   * Issue single credential for Verifiable Credential Issuer (VCI) service
   */
  async issueSingle(
    request: operations.VciSingleIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleIssueResponse> {
    return unwrapAsync(verifiableCredentialIssuerIssueSingle(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/batch/parse API
   *
   * @remarks
   * Parse batch credential requests for Verifiable Credential Issuer (VCI) service
   */
  async parseBatch(
    request: operations.VciBatchParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchParseResponse> {
    return unwrapAsync(verifiableCredentialIssuerParseBatch(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/batch/issue API
   *
   * @remarks
   * Issue batch credentials for Verifiable Credential Issuer (VCI) service
   */
  async batchIssue(
    request: operations.VciBatchIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchIssueResponse> {
    return unwrapAsync(verifiableCredentialIssuerBatchIssue(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/deferred/parse API
   *
   * @remarks
   * Parse deferred credential request for Verifiable Credential Issuer (VCI) service
   */
  async parseDeferred(
    request: operations.VciDeferredParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredParseResponse> {
    return unwrapAsync(verifiableCredentialIssuerParseDeferred(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/deferred/issue API
   *
   * @remarks
   * Issue deferred credential for Verifiable Credential Issuer (VCI) service
   */
  async deferredIssue(
    request: operations.VciDeferredIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredIssueResponse> {
    return unwrapAsync(verifiableCredentialIssuerDeferredIssue(
      this,
      request,
      options,
    ));
  }
}
