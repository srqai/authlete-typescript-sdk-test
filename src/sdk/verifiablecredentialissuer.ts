/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verifiableCredentialIssuerVciBatchIssueApi } from "../funcs/verifiableCredentialIssuerVciBatchIssueApi.js";
import { verifiableCredentialIssuerVciBatchParseApi } from "../funcs/verifiableCredentialIssuerVciBatchParseApi.js";
import { verifiableCredentialIssuerVciDeferredIssueApi } from "../funcs/verifiableCredentialIssuerVciDeferredIssueApi.js";
import { verifiableCredentialIssuerVciDeferredParseApi } from "../funcs/verifiableCredentialIssuerVciDeferredParseApi.js";
import { verifiableCredentialIssuerVciJwksApi } from "../funcs/verifiableCredentialIssuerVciJwksApi.js";
import { verifiableCredentialIssuerVciJwtissuerApi } from "../funcs/verifiableCredentialIssuerVciJwtissuerApi.js";
import { verifiableCredentialIssuerVciMetadataApi } from "../funcs/verifiableCredentialIssuerVciMetadataApi.js";
import { verifiableCredentialIssuerVciOfferCreateApi } from "../funcs/verifiableCredentialIssuerVciOfferCreateApi.js";
import { verifiableCredentialIssuerVciOfferInfoApi } from "../funcs/verifiableCredentialIssuerVciOfferInfoApi.js";
import { verifiableCredentialIssuerVciSingleIssueApi } from "../funcs/verifiableCredentialIssuerVciSingleIssueApi.js";
import { verifiableCredentialIssuerVciSingleParseApi } from "../funcs/verifiableCredentialIssuerVciSingleParseApi.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class VerifiableCredentialIssuer extends ClientSDK {
  /**
   * /api/{serviceId}/vci/metadata API
   *
   * @remarks
   * Get verifiable credential issuer metadata
   */
  async vciMetadataApi(
    request: operations.VciMetadataApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciMetadataResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciMetadataApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/jwtissuer API
   *
   * @remarks
   * Get JWT issuer information for VCI
   */
  async vciJwtissuerApi(
    request: operations.VciJwtissuerApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwtissuerResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciJwtissuerApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/jwks API
   *
   * @remarks
   * Get JSON Web Key Set for VCI
   */
  async vciJwksApi(
    request: operations.VciJwksApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciJwksResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciJwksApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/offer/create API
   *
   * @remarks
   * Create a verifiable credential offer
   */
  async vciOfferCreateApi(
    request: operations.VciOfferCreateApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferCreateResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciOfferCreateApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/offer/info API
   *
   * @remarks
   * Get information about a verifiable credential offer
   */
  async vciOfferInfoApi(
    request: operations.VciOfferInfoApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciOfferInfoResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciOfferInfoApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/parse API
   *
   * @remarks
   * Parse a single verifiable credential
   */
  async vciSingleParseApi(
    request: operations.VciSingleParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleParseResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciSingleParseApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/single/issue API
   *
   * @remarks
   * Issue a single verifiable credential
   */
  async vciSingleIssueApi(
    request: operations.VciSingleIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciSingleIssueResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciSingleIssueApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/batch/parse API
   *
   * @remarks
   * Parse multiple verifiable credentials in batch
   */
  async vciBatchParseApi(
    request: operations.VciBatchParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchParseResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciBatchParseApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/batch/issue API
   *
   * @remarks
   * Issue multiple verifiable credentials in batch
   */
  async vciBatchIssueApi(
    request: operations.VciBatchIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciBatchIssueResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciBatchIssueApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/deferred/parse API
   *
   * @remarks
   * Parse a deferred verifiable credential
   */
  async vciDeferredParseApi(
    request: operations.VciDeferredParseApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredParseResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciDeferredParseApi(
      this,
      request,
      options,
    ));
  }

  /**
   * /api/{serviceId}/vci/deferred/issue API
   *
   * @remarks
   * Issue a deferred verifiable credential
   */
  async vciDeferredIssueApi(
    request: operations.VciDeferredIssueApiRequest,
    options?: RequestOptions,
  ): Promise<models.VciDeferredIssueResponse> {
    return unwrapAsync(verifiableCredentialIssuerVciDeferredIssueApi(
      this,
      request,
      options,
    ));
  }
}
