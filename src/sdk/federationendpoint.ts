/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { federationEndpointFederationConfigurationApi } from "../funcs/federationEndpointFederationConfigurationApi.js";
import { federationEndpointFederationRegistrationApi } from "../funcs/federationEndpointFederationRegistrationApi.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FederationEndpoint extends ClientSDK {
  /**
   * Process Entity Configuration Request
   *
   * @remarks
   * This API gathers the federation configuration about a service.
   *
   * The authorization server implementation should
   * retrieve the value of the <code>action</code>
   * response parameter from the API response and take the following steps
   * according to the value.
   *
   * <h3><code>OK</code></h3>
   *
   * When the value of the <code> action</code> response
   * parameter is <code>OK</code>, it means that Authlete
   * could prepare an entity configuration successfully.
   *
   * In this case, the implementation of the entity configuration endpoint of the
   * authorization server should return an HTTP response to the client application
   * with the HTTP status code "`200 OK`" and the content type
   * "`application/entity-statement+jwt`". The message body (= an entity
   * configuration in the JWT format) of the response has been prepared by
   * Authlete's `/federation/configuration` API and it is available as the
   * <code>responseContent</code> response parameter.
   *
   * The implementation of the entity configuration endpoint can construct an
   * HTTP response by doing like below.
   *
   * <pre style="border: solid 1px black; padding: 0.5em;">
   * 200 OK
   * Content-Type: application/entity-statement+jwt
   * (Other HTTP headers)
   *
   * <i>(the value of the responseContent response parameter)</i></pre>
   *
   * <h3><code>NOT_FOUND</code></h3>
   *
   * When the value of the <code> action</code> response
   * parameter is <code>NOT_FOUND</code>, it means that
   * the service configuration has not enabled the feature of <a href=
   * "https://openid.net/specs/openid-connect-federation-1_0.html">OpenID Connect
   * Federation 1.0</a> and so the client application should have not access the
   * entity configuration endpoint.
   *
   * In this case, the implementation of the entity configuration endpoint of the
   * authorization server should return an HTTP response to the client application
   * with the HTTP status code "`404 Not Found`" and the content type
   * "`application/json`". The message body (= error information in the JSON
   * format) of the response has been prepared by Authlete's
   * `/federation/configuration` API and it is available as the
   * <code>responseContent</code> response parameter.
   *
   * The implementation of the entity configuration endpoint can construct an
   * HTTP response by doing like below.
   *
   * <pre style="border: solid 1px black; padding: 0.5em;">
   * 404 Not Found
   * Content-Type: application/json
   * (Other HTTP headers)
   *
   * <i>(the value of the responseContent response parameter)</i></pre>
   *
   * <h3><code>INTERNAL_SERVER_ERROR</code></h3>
   *
   * could prepare an entity configuration successfully.
   *
   * In this case, the implementation of the entity configuration endpoint of the
   * authorization server should return an HTTP response to the client application
   * with the HTTP status code "`200 OK`" and the content type
   * "`application/entity-statement+jwt`". The message body (= an entity
   * configuration in the JWT format) of the response has been prepared by
   * Authlete's `/federation/configuration` API and it is available as the
   * <code>responseContent</code> response parameter.
   *
   * The implementation of the entity configuration endpoint can construct an
   * HTTP response by doing like below.
   *
   * <pre style="border: solid 1px black; padding: 0.5em;">
   * 200 OK
   * Content-Type: application/entity-statement+jwt
   * (Other HTTP headers)
   *
   * <i>(the value of the responseContent response parameter)</i></pre>
   *
   * </details>
   */
  async federationConfigurationApi(
    request: operations.FederationConfigurationApiRequest,
    options?: RequestOptions,
  ): Promise<models.FederationConfigurationResponse> {
    return unwrapAsync(federationEndpointFederationConfigurationApi(
      this,
      request,
      options,
    ));
  }

  /**
   * Process Federation Registration Request
   *
   * @remarks
   * The Authlete API is for implementations of the <b>federation registration
   * endpoint</b> that accepts "explicit client registration". Its details are
   * defined in <a href="https://openid.net/specs/openid-connect-federation-1_0.html"
   * >OpenID Connect Federation 1.0</a>.
   * </p>
   *
   * <p>
   * The endpoint accepts `POST` requests whose `Content-Type`
   * is either of the following.
   * </p>
   *
   * <ol>
   *   <li>`application/entity-statement+jwt`
   *   <li>`application/trust-chain+json`
   * </ol>
   *
   * <p>
   * When the `Content-Type` of a request is
   * `application/entity-statement+jwt`, the content of the request is
   * the entity configuration of a relying party that is to be registered.
   * In this case, the implementation of the federation registration endpoint
   * should call Authlete's `/federation/registration` API with the
   * entity configuration set to the `entityConfiguration` request
   * parameter.
   * </p>
   *
   * <p>
   * On the other hand, when the `Content-Type` of a request is
   * `application/trust-chain+json`, the content of the request is a
   * JSON array that contains entity statements in JWT format. The sequence
   * of the entity statements composes the trust chain of a relying party
   * that is to be registered. In this case, the implementation of the
   * federation registration endpoint should call Authlete's
   * `/federation/registration` API with the trust chain set to the
   * `trustChain` request parameter.
   * </p>
   */
  async federationRegistrationApi(
    request: operations.FederationRegistrationApiRequest,
    options?: RequestOptions,
  ): Promise<models.FederationRegistrationResponse> {
    return unwrapAsync(federationEndpointFederationRegistrationApi(
      this,
      request,
      options,
    ));
  }
}
