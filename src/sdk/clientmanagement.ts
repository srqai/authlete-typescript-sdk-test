/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientManagementDeleteAuthorizations } from "../funcs/clientManagementDeleteAuthorizations.js";
import { clientManagementDeleteClient } from "../funcs/clientManagementDeleteClient.js";
import { clientManagementDeleteRequestableScopes } from "../funcs/clientManagementDeleteRequestableScopes.js";
import { clientManagementGetClient } from "../funcs/clientManagementGetClient.js";
import { clientManagementGetRequestableScopes } from "../funcs/clientManagementGetRequestableScopes.js";
import { clientManagementListAuthorizedApplications } from "../funcs/clientManagementListAuthorizedApplications.js";
import { clientManagementUpdateAuthorization } from "../funcs/clientManagementUpdateAuthorization.js";
import { clientManagementUpdateSecret } from "../funcs/clientManagementUpdateSecret.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ClientManagement extends ClientSDK {
  /**
   * Get Client
   *
   * @remarks
   * Get a client.
   */
  async getClient(
    request: operations.ClientGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.Client> {
    return unwrapAsync(clientManagementGetClient(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Client âš¡
   *
   * @remarks
   * Delete a client.
   */
  async deleteClient(
    request: operations.ClientDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientManagementDeleteClient(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Secret
   *
   * @remarks
   * Update the client secret of a client.
   *
   * If you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`
   * API.
   */
  async updateSecret(
    request: operations.ClientSecretUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientSecretUpdateResponse> {
    return unwrapAsync(clientManagementUpdateSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Authorized Applications
   *
   * @remarks
   * Get a list of client applications that an end-user has authorized.
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async listAuthorizedApplications(
    request: operations.ClientAuthorizationGetListApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationGetListResponse> {
    return unwrapAsync(clientManagementListAuthorizedApplications(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Client Tokens
   *
   * @remarks
   * Update attributes of all existing access tokens given to a client application.
   */
  async updateAuthorization(
    request: operations.ClientAuthorizationUpdateApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationUpdateResponse> {
    return unwrapAsync(clientManagementUpdateAuthorization(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Client Tokens
   *
   * @remarks
   * Delete all existing access tokens issued to a client application by an end-user.
   *
   * The subject parameter is required and can be provided either in the path or as a query parameter.
   */
  async deleteAuthorizations(
    request: operations.ClientAuthorizationDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientAuthorizationDeleteResponse> {
    return unwrapAsync(clientManagementDeleteAuthorizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Requestable Scopes
   *
   * @remarks
   * Get the requestable scopes per client
   */
  async getRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesGetApiRequest,
    options?: RequestOptions,
  ): Promise<models.ClientExtensionRequestableScopesGetResponse> {
    return unwrapAsync(clientManagementGetRequestableScopes(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Requestable Scopes
   *
   * @remarks
   * Delete requestable scopes of a client
   */
  async deleteRequestableScopes(
    request: operations.ClientExtensionRequestablesScopesDeleteApiRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientManagementDeleteRequestableScopes(
      this,
      request,
      options,
    ));
  }
}
